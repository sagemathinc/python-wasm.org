(self.webpackChunk_wapython_website=self.webpackChunk_wapython_website||[]).push([[682],{9584:function(t,e,r){"use strict";var n=r(4229);function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function o(t,e,r,n,i,o,a){try{var u=t[o](a),l=u.value}catch(t){return void r(t)}u.done?e(l):Promise.resolve(l).then(n,i)}function a(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function u(t){o(a,n,i,u,l,"next",t)}function l(t){o(a,n,i,u,l,"throw",t)}u(void 0)}))}}function u(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function l(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),n.forEach((function(e){u(t,e,r[e])}))}return t}function s(t,e){return e=null!=e?e:{},Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):function(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);r.push.apply(r,n)}return r}(Object(e)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(e,r))})),t}function c(t){return function(t){if(Array.isArray(t))return i(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return i(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(r):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?i(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var f=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},_=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var I=r(3091),S=_(r(7798)),E=_(r(7553)),d=_(r(8952)),A=(0,d.default)("dylink"),p=(0,d.default)("dylink:import"),v=1048576;function y(){return y=a((function(t){var e,r,i,o,a,u,_,d,y,T,m,h,g,W,O,b,R,w,D,N,P,L,F;function C(t){if(null!=y){A("symbolViaPointer",t);var e=y.exports["__WASM_EXPORT__".concat(t)];if(null!=e)return e()}}function G(t){if(null!=y){var e=y.exports["__WASM_EXPORT__".concat(t)];if(null!=e){var r=e();if(A("functionViaPointer",t,r),null==h)throw Error("__indirect_function_table must be defined");return h.get(r)}}}function H(t,e){if(null==h)throw Error("__indirect_function_table must be defined");if(h.get(t))throw Error("setTable: attempt to overwrite existing function! ".concat(t));h.length<=t+50&&h.grow(50),h.set(t,e)}function M(t){for(var r in D){var n,i,o,a=D[r],u=a.symToPtr,l=a.instance,s=null!==(o=u[t])&&void 0!==o?o:null===(i=(n=l.exports)["__WASM_EXPORT__".concat(t)])||void 0===i?void 0:i.call(n);if(null!=s){if(null==h)throw Error("__indirect_function_table must be defined");return A("functionFromOtherLibrary - got ",t," from ",e),h.get(s)}}}function U(t){var e,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",o=null==r||null===(e=r.env)||void 0===e?void 0:e[t];if(null!=o)return A("getFunction ",t,"from env"),o;if(null!=(o=G(t)))return A("getFunction ",t,"from function pointer"),o;if(null!=(o=M(t)))return A("getFunction ",t,"from other library"),o;if(_&&null!=(o=null==y?void 0:y.exports[t]))return A("getFunction ",t,"from mainInstance exports (potentially dangerous!)"),o;if((null==i?void 0:i.includes("numpy"))&&t.startsWith("_Z"))return function(){n.log("WARNING: calling dangerous stub for ",t)};if(i)throw Error("".concat(t," -- undefined when importing ").concat(i));return N.env[t]}function B(t){return function(e,r){if(r in e)return Reflect.get(e,r);A("dlopenEnvHandler",r);var n=U(r,t);if(null!=n)return n;A("dlopenEnvHandler got null")}}function k(t,e){if(e in t)return Reflect.get(t,e);var r=t[e];if(!r){var n=new WebAssembly.Global({value:"i32",mutable:!0},0);W[e]=n,r=t[e]=n}return r}function x(t,e){if(e in t)return Reflect.get(t,e);var r=t[e];if(!r){var n,i=null==y?void 0:y.exports["__WASM_EXPORT__".concat(e)];null==i?(n=F,O[e]=n,F+=1):n=i(),A("GOTFuncHandler ",e,"--\x3e",n);var o=new WebAssembly.Global({value:"i32",mutable:!0},n);r=t[e]=o}return r}return f(this,(function(n){switch(n.label){case 0:return e=t.path,r=t.importObject,i=t.importWebAssembly,o=t.importWebAssemblySync,a=t.readFileSync,u=t.stub,_=t.allowMainExports,y=null,null==r&&(r={}),null==(T=r.env)&&(T=r.env={}),null==(m=T.memory)&&(m=T.memory=new WebAssembly.Memory({initial:10})),null==(h=T.__indirect_function_table)&&(h=T.__indirect_function_table=new WebAssembly.Table({initial:1e3,element:"anyfunc"})),g={},W={},O={},b=new Proxy(g,{get:k}),R=new Proxy(g,{get:x}),w={},D={},T.dlopen=function(t,e){var n;if(null==m)throw Error("bug");var i=(0,I.recvString)(t,m);if(A("dlopen: path='%s'",i),null!=w[i])return w[i].handle;var u,f=new Uint8Array(a(i)),_=(0,S.default)(f);A("metadata",_);var E=Math.pow(2,null!==(u=_.memoryAlign)&&void 0!==u?u:0);E=Math.max(E,16);var d=U("malloc");if(null==d)throw Error("malloc from libc must be available in the  main instance");if(null==_.memorySize)throw Error("memorySize must be defined in the shared library");var T=d(_.memorySize+E);if(0==T)throw Error("malloc failed (you cannot use a stub for malloc)");var g=d(v);if(0==g)throw Error("malloc failed for stack");A("allocating %s bytes for shared library -- at ",_.memorySize+E,T);var N=_.memorySize?(0,I.alignMemory)(T,E):0,P=_.tableSize?F:0,L={memory:m,__indirect_function_table:h,__memory_base:N,__table_base:P,__stack_pointer:new WebAssembly.Global({value:"i32",mutable:!0},g+v)};A("env =",L);var G,M=s(l({},r),{env:new Proxy(L,{get:B(i)}),"GOT.mem":b,"GOT.func":R});if(F+=null!==(G=_.tableSize)&&void 0!==G?G:0,null==h)throw Error("__indirect_function_table must not be null");h.length<=F+50&&h.grow(50+F-h.length);var k=0;p.enabled&&(k=(new Date).valueOf(),p("importing ",i));var x=o(i,M);if(p.enabled&&p("imported ",i,", time =",(new Date).valueOf()-k,"ms"),null==h)throw Error("bug");var j={};for(var Y in x.exports)if(null==O[Y]){var K=x.exports[Y];null==j[Y]&&"function"==typeof K&&(H(F,K),j[Y]=F,F+=1)}for(var V in O){var X,z=null!==(X=x.exports[V])&&void 0!==X?X:null==y?void 0:y.exports[V];if(A("table[%s] = %s",O[V],V,z),null==z)throw Error("dlopen -- UNRESOLVED FUNCTION: ".concat(V));H(O[V],z),j[V]=O[V],delete O[V]}for(var Z in W){var Q,J=W[Z];delete W[Z];var $=null===(Q=x.exports[Z])||void 0===Q?void 0:Q.value;if(null==$){var q=C(Z);if(null==q)throw Error("dlopen -- UNRESOLVED SYMBOL: ".concat(Z));J.value=q}else J.value=$+N}null!=x.exports.__wasm_call_ctors&&(A("calling __wasm_call_ctors for dynamic library"),x.exports.__wasm_call_ctors()),null!=x.exports.__wasm_apply_data_relocs&&(A("calling __wasm_apply_data_relocs for dynamic library"),x.exports.__wasm_apply_data_relocs());var tt=(n=Math).max.apply(n,[0].concat(c(Object.keys(D).map((function(t){return parseInt(t)})))))+1,et={path:i,handle:tt,instance:x,symToPtr:j};return w[i]=et,D[tt]=et,tt},T.dlsym=function(t,e){var r,n;if(null==m)throw Error("bug");var i=(0,I.recvString)(e,m);A("dlsym: handle=%s, symName='%s'",t,i);var o=D[t];if(null==o)throw Error("dlsym: invalid handle ".concat(t));var a=o.symToPtr[i];if(A("sym= ",i,", ptr = ",a),null!=a)return a;if(null!=(a=null===(n=(r=o.instance.exports)["__WASM_EXPORT__".concat(i)])||void 0===n?void 0:n.call(r)))return a;throw Error("dlsym: handle=".concat(t," - unknown symbol '").concat(i,"'"))},T.dlerror=function(){return 0},T.dladdr=function(){return A("dladdr: STUB"),0},T.dlclose=function(t){return 0},N=u?s(l({},r),{env:(0,E.default)(r.env,G,u)}):r,P=0,p.enabled&&(P=(new Date).valueOf(),p("importing ",e)),null==i?[3,2]:[4,i(e,N)];case 1:return L=n.sent(),[3,3];case 2:L=o(e,N),n.label=3;case 3:return y=L,p.enabled&&p("imported ",e,", time =",(new Date).valueOf()-P,"ms"),null!=y.exports.__wasm_call_ctors&&y.exports.__wasm_call_ctors(),F=(d=Math).max.apply(d,[0].concat(c((0,I.nonzeroPositions)(h))))+1,[2,y]}}))})),y.apply(this,arguments)}e.default=function(t){return y.apply(this,arguments)}},8989:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.MBtoPages=void 0;var i=n(r(9584));e.default=i.default;var o=r(3091);Object.defineProperty(e,"MBtoPages",{enumerable:!0,get:function(){return o.MBtoPages}})},7798:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e,n,i=function(){for(var e=0,r=1;;){var n=t[u++];if(e+=(127&n)*r,r*=128,!(128&n))break}return e},o=function(){var e=i();return function(t,e,n){for(var i=e+n,o=e;t[o]&&o<i;)o++;var a=t.slice(e,o);return r.decode(a)}(t,(u+=e)-e,e)},a=function(t,e){if(t)throw new Error(e)},u=0;a(!(1836278016==new Uint32Array(new Uint8Array(t.subarray(0,24)).buffer)[0]),"need to see wasm magic number"),a(0!==t[8],"need the dylink section to be first"),u=9;var l=i();e=u+l,n=o();var s={neededDynlibs:[],tlsExports:new Set,weakImports:new Set};if(null==s.neededDynlibs)throw Error("bug: typescript");if(null==s.tlsExports)throw Error("bug: typescript");if(null==s.weakImports)throw Error("bug: typescript");if("dylink"==n){s.memorySize=i(),s.memoryAlign=i(),s.tableSize=i(),s.tableAlign=i();for(var c=i(),f=0;f<c;++f){var _=o();s.neededDynlibs.push(_)}}else for(a("dylink.0"!==n,"invalid format -- name must be dylink.0 or dylink");u<e;){var I=t[u++],S=i();if(1===I)s.memorySize=i(),s.memoryAlign=i(),s.tableSize=i(),s.tableAlign=i();else if(2===I)for(var E=i(),d=0;d<E;++d){var A=o();s.neededDynlibs.push(A)}else if(3===I)for(var p=i();p--;){var v=o();256&i()&&s.tlsExports.add(v)}else if(4===I)for(var y=i();y--;){o();var T=o();1==(3&i())&&s.weakImports.add(T)}else u+=S}return s};var r=new TextDecoder},7553:function(t,e,r){"use strict";var n=r(4229),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=i(r(8952)),a=(0,o.default)("stub"),u=(0,o.default)("stub:use"),l=(0,o.default)("stub:first");e.default=function(t,e,r){return new Proxy(t,{get:function(t,i){if(i in t)return Reflect.get(t,i);var o=e(i);return null!=o?(a("using function via pointer for ",i),o):("warn"==r&&n.warn("\n* WARNING: creating UNSAFE stub for ".concat(String(i),".  Please fix ASAP!")),u.enabled||l.enabled?function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return c(i,e),0}:function(){return 0})}})};var s=new Set([]);function c(t,e){if(u("WARNING: using stub",t,e),l.enabled){if(s.has(t))return;s.add(t)}l("WARNING: first use of stub",t,e)}},3091:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MBtoPages=e.alignMemory=e.strlen=e.recvString=e.nonzeroPositions=void 0,e.nonzeroPositions=function(t){for(var e=[],r=0;r<t.length;r++)null!=t.get(r)&&e.push(r);return e};var r=new TextDecoder;function n(t,e){for(var r=new Uint8Array(e.buffer),n=t;r[n];)n+=1;return n-t}e.recvString=function(t,e){var i=n(t,e),o=e.buffer.slice(t,t+i);return r.decode(o)},e.strlen=n,e.alignMemory=function(t,e){return Math.ceil(t/e)*e},e.MBtoPages=function(t){return 16*t}},5873:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initConstants=void 0;var r={};e.default=r,e.initConstants=function(t){for(var e=function(t,e){var r=t.callFunction,n=t.recv,i=r("getConstants");if(0==i)throw Error("unable to receive JSON object");return JSON.parse(n.string(i))}(t),n=e.names,i=e.values,o=0;o<n.length;o++)r[n[o]]=i[o]}},8344:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.nativeToWasm=void 0;var i=n(r(5873));e.default=function(t){var e=i.default[t],r=Error("Error ".concat(t,"  (errno=").concat(e,")."));return r.wasiErrno=e,r},e.nativeToWasm=function(t){var e={},r=!0,n=!1,o=void 0;try{for(var a,u=["E2BIG","EACCES","EBADF","EBUSY","ECHILD","EDEADLK","EEXIST","EFAULT","EFBIG","EINTR","EINVAL","EIO","EISDIR","EMFILE","EMLINK","ENFILE","ENODEV","ENOENT","ENOEXEC","ENOMEM","ENOSPC","ENOTDIR","ENOTTY","ENXIO","EPERM","EPIPE","EROFS","ESPIPE","ESRCH","ETXTBSY","EXDEV"][Symbol.iterator]();!(r=(a=u.next()).done);r=!0){var l,s=a.value,c=null===(l=t.constants)||void 0===l?void 0:l[s];if(!c)throw Error("posix constant ".concat(s," not known"));var f=i.default[s];if(!f)throw Error("wasm constant ".concat(s," not known"));e[c]=f}}catch(t){n=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(n)throw o}}return e}},4486:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(r(7587)),o=r(8344),a=n(r(5873)),u=(0,i.default)("posix:fork-exec");e.default=function(t){var e=t.posix,r=t.recv,n=t.wasi,i=function(t){var e=n.FD_MAP.get(t);return null==e?-1:e.real},l=function(){var t={},r=!0,i=!1,o=void 0;try{for(var a,l=n.FD_MAP.keys()[Symbol.iterator]();!(r=(a=l.next()).done);r=!0){var s=a.value,c=n.FD_MAP.get(s);try{e.is_inheritable(c.real)&&(t[s]=c.real)}catch(t){u("getInheritableDescriptorsMap",c.real,t)}}}catch(t){i=!0,o=t}finally{try{r||null==l.return||l.return()}finally{if(i)throw o}}return t};return{python_wasm_set_inheritable:function(t,r){if(null==e.set_inheritable)return 0;var n=i(t);if(-1==n)throw Error("invalid file descriptor");try{e.set_inheritable(n,!!r)}catch(t){return 0}return 0},python_wasm_fork_exec:function(t,n,s,c,f,_,I,S,E,d,A,p,v,y,T,m,h,g,W,O,b,R,w,D,N,P){u("called fork_exec"),u("ignoring these: ",{restore_signals:y,call_setsid:T,pgid_to_set:m,call_setgid:h,gid:g,call_setgroups:W,groups_size:O,groups:b,call_setuid:R,uid:w,child_umask:D,child_sigmask:N}),u("before change",{p2cread:f,p2cwrite:_,c2pread:I,c2pwrite:S,errread:E,errwrite:d,errpipe_read:A,errpipe_write:p});for(var L=[],F=(0,o.nativeToWasm)(e),C=0;C<100;C++){var G;L[C]=null!==(G=F[C])&&void 0!==G?G:a.default.ENOENT}var H=JSON.stringify(l()),M=r.arrayOfStrings(s);M.length>0&&M.push("WASI_FD_INFO=".concat(H));var U={exec_array:r.arrayOfStrings(t),argv:r.arrayOfStrings(n),envp:M,cwd:r.string(c),p2cread:i(f),p2cwrite:i(_),c2pread:i(I),c2pwrite:i(S),errread:i(E),errwrite:i(d),errpipe_read:i(A),errpipe_write:i(p),close_fds:v,fds_to_keep:r.arrayOfI32(P).map(i),err_map:L,WASI_FD_INFO:H};u("opts",U),u("descriptors map = ",l());try{var B=e.fork_exec(U);return u("got subprocess = ",B),B}catch(t){return u("error doing fork",t),-1}}}}},2502:function(t,e,r){"use strict";var n=r(5925);function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function a(t){return function(t){if(Array.isArray(t))return i(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return i(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(r):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?i(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var l=u(r(4486)),s=u(r(6285)),c=u(r(8488)),f=u(r(6114)),_=u(r(8689)),I=u(r(9760)),S=u(r(8201)),E=u(r(8612)),d=u(r(1940)),A=u(r(7892)),p=u(r(8162)),v=u(r(6108)),y=u(r(7233)),T=r(5873),m=u(r(5873)),h=u(r(7587)),g=(0,h.default)("posix:not-implemented"),W=(0,h.default)("posix:call"),O=(0,h.default)("posix:return");n.env.__STUPID_HACK__="",e.default=function(t){var e,r=function(r){u[r]=function(){for(var o=arguments.length,u=new Array(o),l=0;l<o;l++)u[l]=arguments[l];e();try{var s;W(r,u);var c=(s=i)[r].apply(s,a(u));return O(r,c),c}catch(e){var f;return null!=e.wasiErrno?t.callFunction("setErrno",e.wasiErrno):null!=e.code?n(parseInt(e.code)):"NotImplementedError"==e.name?t.callFunction("setErrno",m.default.ENOSYS):g("Posix library raised exception without error code",e),null!==(f=e.ret)&&void 0!==f?f:-1}}},n=function(e){var r=h[e];if(null!=r){var n=m.default[r];if(null!=n)return void t.callFunction("setErrno",n)}g("Unable to map nativeErrno (please update code)",e)},i=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),n.forEach((function(e){o(t,e,r[e])}))}return t}({},(0,l.default)(t),(0,s.default)(t),(0,c.default)(t),(0,f.default)(t),(0,_.default)(t),(0,I.default)(t),(0,S.default)(t),(0,E.default)(t),(0,A.default)(t),(0,d.default)(t),(0,p.default)(t),(0,v.default)(t),(0,y.default)(t)),u={},h={};if(null!=t.posix.constants)for(var b in t.posix.constants)h[t.posix.constants[b]]=b;for(var R in e=null!=t.posix.chdir?function(){var e,r;null===(r=(e=t.posix).chdir)||void 0===r||r.call(e,t.getcwd())}:function(){},i)r(R);return u.init=function(){(0,T.initConstants)(t)},u}},6285:function(t,e,r){"use strict";var n=r(4229),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.wasmToNativeSocktype=e.wasmToNativeFamily=void 0;var o=r(1731),a=i(r(5873));function u(t,e){if(0==e)return e;if(e==a.default.AF_INET)return t.constants.AF_INET;if(e==a.default.AF_INET6)return t.constants.AF_INET6;throw Error("unsupported WASM address family: ".concat(e))}function l(t,e){if(0==e)return e;if(e==t.constants.AF_INET)return a.default.AF_INET;if(e==t.constants.AF_INET6)return a.default.AF_INET6;throw Error("unsupported native address family: ".concat(e))}function s(t,e){if(!e)return e;var r=0;for(var i in a.default)if(i.startsWith("SOCK")&&a.default[i]&e){if(null==t.constants[i]){var o="We need the constant ".concat(i," to be defined in the posix-node module.");throw n.warn(o),Error(o)}r|=t.constants[i],e&=~a.default[i]}if(0!=e){var u="Unable to convert remainging socktype ".concat(e," to native. Make sure all SOCK* constants are defined.");throw n.warn(u),Error(u)}return r}function c(t,e){if(!e)return e;var r=0;for(var i in t.constants)if(i.startsWith("SOCK")&&t.constants[i]&e){if(null==a.default[i]){var o="We need the constant ".concat(i," to be defined in the posix-node module.");throw n.warn(o),Error(o)}r|=a.default[i],e&=~t.constants[i]}if(0!=e){var u="Unable to convert remainging socktype ".concat(e," to native. Make sure all SOCK* posix.constants are defined.");throw n.warn(u),Error(u)}return r}e.default=function(t){var e=t.memory,r=t.posix,n=t.callFunction,i=t.recv,a=t.send,f=t.free,_=function(t,r,n){var i=a.malloc(2+r),o=new DataView(e.buffer);o.setUint16(i,t,!0);for(var u=0;u<r;u++)o.setUint8(i+2+u,n[u]);return i},I=function(t,r){new DataView(e.buffer).setUint32(t,r,!0)},S=function(t){var e=a.malloc(4*(t.length+1));if(0==e)throw Error("out of memory");for(var r=0;r<t.length;r++){var n=a.string(t[r]);I(e+4*r,n)}return I(e+4*t.length,0),e},E=function(t){var e=l(r,t.h_addrtype);return n("sendHostent",a.string(t.h_name),S(t.h_aliases),e,t.h_length,S(t.h_addr_list),t.h_addr_list.length)},d={},A=!0,p=!1,v=void 0;try{for(var y,T=function(){var t=y.value;d[t]=function(){return(0,o.notImplemented)(t)}},m=" getprotobyname getservbyname getservbyport getnameinfo getpeername".split(/\s+/)[Symbol.iterator]();!(A=(y=m.next()).done);A=!0)T()}catch(t){p=!0,v=t}finally{try{A||null==m.return||m.return()}finally{if(p)throw v}}d.gethostbyname=function(t){try{null==r.gethostbyname&&(0,o.notImplemented)("gethostbyaddr",0);var e=i.string(t),n=r.gethostbyname(e);return E(n)}catch(t){throw t.ret=0,t}},d.gethostbyaddr=function(t,e,a){try{null==r.gethostbyaddr&&(0,o.notImplemented)("gethostbyaddr",0);var u=n("recvAddr",t,a);if(0==u)return 0;var l=i.string(u);f(u);var s=r.gethostbyaddr(l);return E(s)}catch(t){throw t.ret=0,t}},d.getaddrinfo=function(t,f,S,E){if(null==r.getaddrinfo)return(0,o.notImplemented)("getaddrinfo"),-1;var d,A=i.string(t),p=i.string(f),v=function(t){var n=new DataView(e.buffer),i=n.getUint32(t,!0);t+=4;var o=u(r,n.getUint32(t,!0));t+=4;var a=s(r,n.getUint32(t,!0));return t+=4,{flags:i,family:o,socktype:a,protocol:n.getUint32(t,!0)}}(S);try{d=r.getaddrinfo(A,p,v)}catch(t){if(t.code)return parseInt(t.code);throw t}for(var y=0,T=0,m=d.length-1;m>=0;){var h=d[m];h.ai_socktype=c(r,h.ai_socktype),h.ai_family=h.sa_family=l(r,h.ai_family);var g=_(h.sa_family,h.ai_addrlen,h.sa_data);if(!g)throw Error("error creating sockaddr");if(!(T=n("sendAddrinfo",h.ai_flags,h.ai_family,h.ai_socktype,h.ai_protocol,h.ai_addrlen,g,null!=h.ai_canonname?a.string(h.ai_canonname):0,y)))throw Error("error creating addrinfo structure");y=T,m-=1}if(!T)throw Error("error creating addrinfo structure");return I(E,T),0};var h={};d.gai_strerror=function(t){var e,n;if(null!=h[t])return h[t];var i=a.string(null!==(n=null===(e=r.gai_strerror)||void 0===e?void 0:e.call(r,t))&&void 0!==n?n:"Unknown error");return h[t]=i,i};var g={};d.hstrerror=function(t){var e,n;if(null!=g[t])return g[t];var i=a.string(null!==(n=null===(e=r.hstrerror)||void 0===e?void 0:e.call(r,t))&&void 0!==n?n:"Unknown error");return g[t]=i,i};var W=null;return d.__h_errno_location=function(){if(null==W&&(W=a.malloc(4),a.i32(W,0)),null==W)throw Error("bug");return W},d},e.wasmToNativeFamily=u,e.wasmToNativeSocktype=s},8488:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(1731),o=n(r(5873));e.default=function(t){var e=t.posix,r=t.recv,n=t.send,a=t.callFunction;return{if_indextoname:function(t,r){var a,u=e.if_indextoname;null==u&&(0,i.notImplemented)("if_indextoname");try{a=u(t)}catch(t){return 0}return n.string(a,{ptr:r,len:o.default.IFNAMSIZ}),r},if_nametoindex:function(t){var n=e.if_nametoindex;null==n&&(0,i.notImplemented)("if_nametoindex");var o=r.string(t);try{return n(o)}catch(t){return 0}},if_nameindex:function(){var t=e.if_nameindex;try{if(null==t){var r=a("createNameIndexArray",0);if(0==r)throw Error("out of memory");return r}var i=t(),o=a("createNameIndexArray",i.length);if(0==o)throw Error("out of memory");for(var u=0;u<i.length;u++)a("setNameIndexElement",o,u,i[u][0],n.string(i[u][1]));return o}catch(t){throw t.ret=0,t}},if_freenameindex:function(t){a("freeNameIndexArray",t)}}}},6114:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(1731);e.default=function(t){var e=t.callFunction,r=t.posix,i=t.recv,o=t.send,a=function(t,r){e("set_statvfs",t,r.f_bsize,r.f_frsize,BigInt(r.f_blocks),BigInt(r.f_bfree),BigInt(r.f_bavail),BigInt(r.f_files),BigInt(r.f_ffree),BigInt(r.f_favail),r.f_fsid,r.f_flag,r.f_namemax)},u=0;return{login_tty:function(t){return null==r.login_tty&&(0,n.notImplemented)("login_tty"),r.login_tty(t),0},statvfs:function(t,e){null==r.statvfs&&(0,n.notImplemented)("statvfs");var o=i.string(t);return a(e,r.statvfs(o)),0},fstatvfs:function(t,e){return null==r.fstatvfs&&(0,n.notImplemented)("statvfs"),a(e,r.fstatvfs(t)),0},ctermid:function(t){if(null==r.ctermid&&(0,n.notImplemented)("ctermid"),t){var e=r.ctermid();return o.string(e,{ptr:t,len:e.length+1}),t}if(u)return u;var i=r.ctermid();return u=o.string(i)},getpwnam_r:function(){(0,n.notImplemented)("getpwnam_r")},getpwuid:function(){(0,n.notImplemented)("getpwnam_r")},getpwuid_r:function(){(0,n.notImplemented)("getpwnam_r")},openpty:function(){(0,n.notImplemented)("openpty")},msync:function(){(0,n.notImplemented)("msync")},madvise:function(){(0,n.notImplemented)("madvise")},mremap:function(){(0,n.notImplemented)("mremap")},tmpfile:function(){(0,n.notImplemented)("tmpfile")},tcflush:function(){(0,n.notImplemented)("tcflush")}}}},8689:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(1731);e.default=function(t){t=null!==t?t:function(t){throw new TypeError("Cannot destructure undefined")}();var e={},r=!0,i=!1,o=void 0;try{for(var a,u=function(){var t=a.value;e[t]=function(){return(0,n.notImplemented)(t)}},l="sched_get_priority_max sched_get_priority_min sched_getparam sched_getscheduler sched_rr_get_interval sched_setparam sched_setscheduler".split(/\s+/)[Symbol.iterator]();!(r=(a=l.next()).done);r=!0)u()}catch(t){i=!0,o=t}finally{try{r||null==l.return||l.return()}finally{if(i)throw o}}return e}},9760:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.setSignalSet=e.getSignalSet=void 0;var i=n(r(5873)),o={};function a(t){return null==o[t]&&(o[t]=new Set),o[t]}e.getSignalSet=a,e.setSignalSet=function(t,e){o[t]=e};var u=new Set;e.default=function(t){var e=t.process,r={kill:function(t,r){return null==e.kill||e.kill(t,r),0},raise:function(t){var n;return r.kill(null!==(n=e.pid)&&void 0!==n?n:1,t)},killpg:function(t,r){return null==e.kill||e.kill(-t,r),0},sigemptyset:function(t){return a(t).clear(),0},sigfillset:function(t){for(var e=a(t),r=1;r<=31;r++)e.add(r);return 0},sigaddset:function(t,e){return a(t).add(e),0},sigdelset:function(t,e){return a(t).delete(e),0},sigismember:function(t,e){return a(t).has(e)?1:0},sigprocmask:function(t,e,r){try{if(!e)return 0;var n=a(e);switch(t){case i.default.SIG_BLOCK:var o=!0,l=!1,s=void 0;try{for(var c,f=n[Symbol.iterator]();!(o=(c=f.next()).done);o=!0){var _=c.value;u.add(_)}}catch(t){l=!0,s=t}finally{try{o||null==f.return||f.return()}finally{if(l)throw s}}return 0;case i.default.SIG_UNBLOCK:var I=!0,S=!1,E=void 0;try{for(var d,A=n[Symbol.iterator]();!(I=(d=A.next()).done);I=!0){var p=d.value;u.delete(p)}}catch(t){S=!0,E=t}finally{try{I||null==A.return||A.return()}finally{if(S)throw E}}return 0;case i.default.SIG_SETMASK:u.clear();var v=!0,y=!1,T=void 0;try{for(var m,h=n[Symbol.iterator]();!(v=(m=h.next()).done);v=!0){var g=m.value;u.add(g)}}catch(t){y=!0,T=t}finally{try{v||null==h.return||h.return()}finally{if(y)throw T}}return 0;default:throw Error("sigprocmask - invalid how=".concat(t))}}finally{r&&function(t){var e=a(t);e.clear();var r=!0,n=!1,i=void 0;try{for(var o,l=u[Symbol.iterator]();!(r=(o=l.next()).done);r=!0){var s=o.value;e.add(s)}}catch(t){n=!0,i=t}finally{try{r||null==l.return||l.return()}finally{if(n)throw i}}}(r)}}};return r.pthread_sigmask=r.sigprocmask,r}},8201:function(t,e,r){"use strict";var n=r(4229),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=i(r(8344)),a=(r(6285),i(r(5873)),r(7480),r(1731));e.default=function(t){var e=t.callFunction,r=(t.posix,t.recv);return t.wasi,{socket:function(t,e,r){throw(0,o.default)("ENOTSUP")},bind:function(t,i,o){n.log("bind stub ",{socket:t,sockaddrPtr:i,address_len:o});var u=e("recv_sockaddr_sa_family",i),l=r.buffer(e("recv_sockaddr_sa_data",i),o-2);return n.log({sa_family:u,sa_data:l.toString()}),n.log("sa_data = ",new Uint8Array(l)),(0,a.notImplemented)("bind"),-1},getsockname:function(t,e,r){return n.log("getsockname stub ",{socket:t,sockaddrPtr:e,addressLenPtr:r}),(0,a.notImplemented)("getsockname"),-1},connect:function(t,e,r){return n.log("connect stub ",{socket:t,sockaddrPtr:e,address_len:r}),(0,a.notImplemented)("connect"),-1}}}},8612:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(1731),i=r(9760);e.default=function(t){var e=t.callFunction,r=t.posix,o=t.recv,a=t.send,u=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(null==s[t])return s[t]={};var r=s[t];if(null!=r)return e&&(null!=r.sigdefaultPtr&&(r.sigdefault=(0,i.getSignalSet)(r.sigdefaultPtr)),null!=r.sigmaskPtr&&(r.sigmask=(0,i.getSignalSet)(r.sigmaskPtr))),r;throw Error("bug")},l={},s={};return{posix_spawnattr_setschedparam:function(t,r){return u(t).schedparam={sched_priority:e("get_posix_spawnattr_schedparam_sched_priority",r)},0},posix_spawnattr_getschedparam:function(t,r){var n,i=null!==(n=u(t).schedparam)&&void 0!==n?n:0;return e("set_posix_spawnattr_schedparam_sched_priority",r,i),0},posix_spawnattr_setschedpolicy:function(t,e){return u(t).schedpolicy=e,0},posix_spawnattr_getschedpolicy:function(t,e){var r;return a.i32(e,null!==(r=u(t).schedpolicy)&&void 0!==r?r:0),0},posix_spawnattr_init:function(t){return s[t]={},0},posix_spawnattr_destroy:function(t){return delete s[t],0},posix_spawnattr_setflags:function(t,e){return u(t).flags=e,0},posix_spawnattr_getflags:function(t,e){var r;return a.i32(e,null!==(r=u(t).flags)&&void 0!==r?r:0),0},posix_spawnattr_setpgroup:function(t,e){return u(t).pgroup=e,0},posix_spawnattr_getpgroup:function(t,e){var r;return a.i32(e,null!==(r=u(t).pgroup)&&void 0!==r?r:0),0},posix_spawnattr_setsigmask:function(t,e){return u(t).sigmaskPtr=e,0},posix_spawnattr_getsigmask:function(t,e){var r=u(t).sigmaskPtr;return(0,i.setSignalSet)(e,(0,i.getSignalSet)(r)),0},posix_spawnattr_setsigdefault:function(t,e){return u(t).sigdefaultPtr=e,0},posix_spawnattr_getsigdefault:function(t,e){var r=u(t).sigdefaultPtr;return(0,i.setSignalSet)(e,(0,i.getSignalSet)(r)),0},posix_spawn:function(t,e,i,s,c,f){null==r.posix_spawn&&(0,n.notImplemented)("posix_spawn");var _=o.string(e),I=o.arrayOfStrings(c),S=o.arrayOfStrings(f),E=r.posix_spawn(_,l[i],u(s,!0),I,S);return a.i32(t,E),0},posix_spawnp:function(t,e,i,s,c,f){null==r.posix_spawnp&&(0,n.notImplemented)("posix_spawnp");var _=o.string(e),I=o.arrayOfStrings(c),S=o.arrayOfStrings(f),E=r.posix_spawnp(_,l[i],u(s,!0),I,S);return a.i32(t,E),0},posix_spawn_file_actions_init:function(t){return l[t]=[],0},posix_spawn_file_actions_destroy:function(t){return delete l[t],0},posix_spawn_file_actions_addclose:function(t,e){return null==l[t]&&(l[t]=[]),l[t].push(["addclose",e]),0},posix_spawn_file_actions_addopen:function(t,e,r,n,i){null==l[t]&&(l[t]=[]);var a=o.string(r);return l[t].push(["addopen",e,a,n,i]),0},posix_spawn_file_actions_adddup2:function(t,e,r){return null==l[t]&&(l[t]=[]),l[t].push(["adddup2",e,r]),0}}}},7892:function(t,e,r){"use strict";r(4229);var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),r(7554),n(r(5873)),n(r(8344)),e.default=function(t){t.fs;var e=t.process;return t.recv,t.wasi,{chmod:function(t,e){return 0},_fchmod:function(t,e){return 0},fchmodat:function(t,e,r,n){return 0},lchmod:function(t,e){return 0},umask:function(t){var r,n;return null!==(n=null===(r=e.umask)||void 0===r?void 0:r.call(e,t))&&void 0!==n?n:18}}}},1940:(t,e,r)=>{"use strict";var n=r(4229);Object.defineProperty(e,"__esModule",{value:!0});var i=r(1731);e.default=function(t){var e=t.child_process,r=t.os,o=t.recv,a=t.send,u=t.fs;return{longjmp:function(){(0,i.notImplemented)("longjmp")},getloadavg:function(t,e){var n=r.loadavg;if(null==n)return-1;var i=n();return a.f64(t,i[0]),a.f64(t+8,i[1]),a.f64(t+16,i[2]),e},system:function(t){null==e.spawnSync&&(0,i.notImplemented)("system is not implemented yet");var r=o.string(t),a=e.spawnSync(r,{shell:!0}),u=a.stdout,l=a.stderr,s=a.status;return n.log(u.toString()),n.warn(l.toString()),s},realpath:function(t,e){try{var r=o.string(t),i=u.realpathSync(r);return a.string(i,{ptr:e,len:4096})}catch(t){return n.warn("ERROR",t),0}}}}},8162:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(6759);e.default=function(t){var e=t.child_process,r=t.memory,i=t.os;return{clock_settime:function(t,o){var a;if(null==e.spawnSync)throw Error("clock_settime is not supported on this platform");var u,l,s=new DataView(r.buffer).getUint32(o,!0),c="";switch(null===(a=i.platform)||void 0===a?void 0:a.call(i)){case"darwin":u="date",l=["-f","%s","".concat(s)];break;case"linux":u="date",l=["--set=@".concat(s)];break;case"win32":var f=new Date(1e3*s);u="date",l=[n("m/d/yyyy",f)],c="time",l=[n("HH:MM:ss",f)];break;default:var _;throw Error("clock_settime not supported on platform  = ".concat(null===(_=i.platform)||void 0===_?void 0:_.call(i)))}var I=e.spawnSync(u,l),S=I.status,E=I.stderr;if(S)throw Error("clock_settime failed - ".concat(E));if(c){var d=e.spawnSync(c,[]),A=d.status,p=d.stderr;if(A)throw Error("clock_settime failed - ".concat(p))}return 0}}}},6108:function(t,e,r){"use strict";var n=r(4229);function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function a(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),n.forEach((function(e){o(t,e,r[e])}))}return t}function u(t,e){return e=null!=e?e:{},Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):function(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);r.push.apply(r,n)}return r}(Object(e)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(e,r))})),t}var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=r(1731),c=l(r(5873)),f=l(r(7587)),_=r(7480),I=(0,f.default)("posix:unistd");e.default=function(t){var e,r,o,l,f,S=t.fs,E=t.os,d=t.process,A=t.recv,p=t.send,v=t.wasi,y=t.posix,T=t.memory,m=function(t){var e=v.FD_MAP.get(t);if(null==e)throw Error("invalid file descriptor");return e.real},h=void 0,g=v.FD_MAP.get(0),W=v.FD_MAP.get(1),O={chown:function(t,e,r){var n=A.string(t);return S.chownSync(n,e,r),0},lchown:function(t,e,r){var n=A.string(t);return S.lchownSync(n,e,r),0},_fchown:function(t,e,r){return S.fchownSync(m(t),e,r),0},getuid:function(){var t;return null!==(e=null===(t=d.getuid)||void 0===t?void 0:t.call(d))&&void 0!==e?e:0},getgid:function(){var t;return null!==(r=null===(t=d.getgid)||void 0===t?void 0:t.call(d))&&void 0!==r?r:0},_geteuid:function(){var t;return null!==(o=null===(t=d.geteuid)||void 0===t?void 0:t.call(d))&&void 0!==o?o:0},getegid:function(){var t;return null!==(l=null===(t=d.getegid)||void 0===t?void 0:t.call(d))&&void 0!==l?l:0},getgroups:function(t,e){var r,n=null===(r=d.getgroups)||void 0===r?void 0:r.call(d);if(null==n)return 0;if(0==t)return n.length;var i=Math.min(n.length,t);if(0==i)return 0;for(var o=new DataView(T.buffer),a=0;a<i;a++)o.setUint32(e+4*a,n[a],!0);return i},getpid:function(){return null!==(f=d.pid)&&void 0!==f?f:1},getpgid:function(t){var e,r;return null!==(r=null===(e=y.getpgid)||void 0===e?void 0:e.call(y,t))&&void 0!==r?r:1},setpgid:function(t,e){return null==y.setpgid&&(0,s.notImplemented)("setpgid"),y.setpgid(t,e),0},getpgrp:function(){var t,e;return null!==(e=null===(t=y.getpgrp)||void 0===t?void 0:t.call(y))&&void 0!==e?e:1},nice:function(t){var e,r,n=null===(e=E.getPriority)||void 0===e?void 0:e.call(E);null!=n&&(null===(r=E.setPriority)||void 0===r||r.call(E,n+t))},getpriority:function(t,e){var r;return null==E.getPriority?0:0!=t?(n.warn("getpriority can only be implemented in node.js for *process id*"),0):null===(r=E.getPriority)||void 0===r?void 0:r.call(E,e)},setpriority:function(t,e,r){var i;return null==E.setPriority?0:0!=t?(n.warn("setpriority can only be implemented in node.js for *process id*"),-1):null===(i=E.setPriority)||void 0===i?void 0:i.call(E,e,r)},dup:function(t){null==y.dup&&(0,s.notImplemented)("dup");var e=v.FD_MAP.get(t),r=y.dup(e.real),n=v.getUnusedFileDescriptor();return v.FD_MAP.set(n,u(a({},e),{real:r})),n},dup2:function(t,e){null==y.dup2&&(0,s.notImplemented)("dup2");var r,n,i=v.FD_MAP.get(t);r=v.FD_MAP.has(e)&&null!==(n=v.FD_MAP.get(e).real)&&void 0!==n?n:e;var o=y.dup2(i.real,r);return v.FD_MAP.set(e,u(a({},i),{real:o})),e},sync:function(){if(null!=S.fsyncSync){var t=!0,e=!1,r=void 0;try{for(var n,o=v.FD_MAP[Symbol.iterator]();!(t=(n=o.next()).done);t=!0){var a=(l=n.value,s=2,function(t){if(Array.isArray(t))return t}(l)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,o=[],a=!0,u=!1;try{for(r=r.call(t);!(a=(n=r.next()).done)&&(o.push(n.value),!e||o.length!==e);a=!0);}catch(t){u=!0,i=t}finally{try{a||null==r.return||r.return()}finally{if(u)throw i}}return o}}(l,s)||function(t,e){if(t){if("string"==typeof t)return i(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(r):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?i(t,e):void 0}}(l,s)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=(a[0],a[1].real);S.fsyncSync(u)}}catch(t){e=!0,r=t}finally{try{t||null==o.return||o.return()}finally{if(e)throw r}}}var l,s},setuid:function(){throw Error("setuid is not supported")},seteuid:function(t){return null==y.seteuid&&(0,s.notImplemented)("seteuid"),y.seteuid(t),0},setegid:function(t){return null==y.setegid&&(0,s.notImplemented)("setegid"),y.setegid(t),0},setgid:function(t){return null==d.setgid&&(0,s.notImplemented)("setgid"),d.setgid(t),0},setsid:function(t){return null==y.setsid&&(0,s.notImplemented)("setsid"),y.setsid(t)},getsid:function(){(0,s.notImplemented)("getsid")},setreuid:function(t){return null==y.setreuid&&(0,s.notImplemented)("setreuid"),y.setreuid(t),0},setregid:function(t){return null==y.setregid&&(0,s.notImplemented)("setregid"),y.setregid(t),0},getppid:function(){return null==y.getppid?O.getpid():y.getppid()},setgroups:function(){(0,s.notImplemented)("setgroups")},setpgrp:function(){(0,s.notImplemented)("setpgrp")},tcgetpgrp:function(){(0,s.notImplemented)("tcgetpgrp")},tcsetpgrp:function(){(0,s.notImplemented)("tcsetpgrp")},fork:function(){null==y.fork&&(0,s.notImplemented)("fork");var t,e=y.fork();return 0==e&&(null===(t=y.close_event_loop)||void 0===t||t.call(y)),e},fork1:function(){(0,s.notImplemented)("fork1")},forkpty:function(){(0,s.notImplemented)("forkpty")},getlogin:function(){var t,e,r;if(null!=h)return h;var n=null!==(r=null===(t=E.userInfo)||void 0===t||null===(e=t.call(E))||void 0===e?void 0:e.username)&&void 0!==r?r:"user";if(null==(h=p.string(n)))throw Error("bug");return h},gethostname:function(t,e){if(null==E.hostname)throw Error("gethostname not supported on this platform");var r=E.hostname();return p.string(r,{ptr:t,len:e}),0},sethostname:function(t,e){if(null==y.sethostname)throw Error("sethostname not supported on this platform");var r=A.string(t,e);return y.sethostname(r),0},ttyname_r:function(t,e,r){if(null==y.ttyname)throw Error("ttyname_r is not supported on this platform");return p.string(y.ttyname(t),{ptr:e,len:r}),0},alarm:function(t){if(null==y.alarm)throw Error("alarm is not supported on this platform");return y.alarm(t)},getresuid:function(t,e,r){null==y.getresuid&&(0,s.notImplemented)("getresuid");var n=y.getresuid(),i=n.ruid,o=n.euid,a=n.suid,u=new DataView(T.buffer);return u.setUint32(t,i,!0),u.setUint32(e,o,!0),u.setUint32(r,a,!0),0},getresgid:function(t,e,r){null==y.getresgid&&(0,s.notImplemented)("getresgid");var n=y.getresgid(),i=n.rgid,o=n.egid,a=n.sgid,u=new DataView(T.buffer);return u.setUint32(t,i,!0),u.setUint32(e,o,!0),u.setUint32(r,a,!0),0},setresuid:function(t,e,r){return null==y.setresuid&&(0,s.notImplemented)("setresuid"),y.setresuid(t,e,r),0},setresgid:function(t,e,r){return null==y.setresgid&&(0,s.notImplemented)("setresgid"),y.setresgid(t,e,r),0},execve:function(t,e,r){null==y._execve&&(0,s.notImplemented)("execve");var n=A.string(t),i=A.arrayOfStrings(e),o=A.arrayOfStrings(r);return I("execve",n,i,o),y._execve(n,i,o),0},execv:function(t,e){null==y.execv&&(0,s.notImplemented)("execve");var r=A.string(t),n=A.arrayOfStrings(e);return I("execv",r,n),y.execv(r,n),0},execlp:function(){(0,s.notImplemented)("execlp")},fexecve:function(t,e,r){null==y._fexecve&&(0,s.notImplemented)("fexecve");var n=A.arrayOfStrings(e),i=A.arrayOfStrings(r);return y._fexecve(m(t),n,i),0},pipe:function(t){null==y.pipe&&(0,s.notImplemented)("pipe");var e=y.pipe(),r=e.readfd,n=e.writefd,i=v.getUnusedFileDescriptor();v.FD_MAP.set(i,{real:r,rights:g.rights,filetype:_.constants.WASI_FILETYPE_SOCKET_STREAM});var o=v.getUnusedFileDescriptor();return v.FD_MAP.set(o,{real:n,rights:W.rights,filetype:_.constants.WASI_FILETYPE_SOCKET_STREAM}),p.i32(t,i),p.i32(t+4,o),0},pipe2:function(t,e){null==y.pipe2&&(0,s.notImplemented)("pipe2");var r,i,o=0;e&c.default.O_NONBLOCK&&(o+=null!==(i=null===(r=y.constants)||void 0===r?void 0:r.O_NONBLOCK)&&void 0!==i?i:0);var a=y.pipe2(o),u=a.readfd,l=a.writefd;return n.warn("pipe2 -- TODO: we almost certainly need to abstract these through our WASI fd object!"),p.i32(t,u),p.i32(t+4,l),0},lockf:function(t,e,r){var n=y.lockf;null==n&&(0,s.notImplemented)("lockf");for(var i=void 0,o=0,a=["F_ULOCK","F_LOCK","F_TLOCK","F_TEST"];o<a.length;o++){var u=a[o];if(e==c.default[u]){i=y.constants[u];break}}if(null==i)throw Error("invalid cmd ".concat(e));return n(m(t),i,BigInt(r)),0},pause:function(){var t=y.pause;return null==t&&(0,s.notImplemented)("pause"),t()},initgroups:function(t,e){var r=d.initgroups;return null==r&&(0,s.notImplemented)("initgroups"),r(A.string(t),e),0},getgrouplist:function(t,e,r,n){var i,o=y.getgrouplist,a=A.string(t),u=A.i32(n);i=null==o?[e]:o(a,e);for(var l=Math.min(i.length,u),s=0;s<l;s++)p.u32(r+4*s,i[s]);return p.i32(n,i.length),l<i.length?-1:0}};return O}},1731:(t,e)=>{"use strict";function r(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function n(t,e,i){return n=r()?Reflect.construct:function(t,e,r){var n=[null];n.push.apply(n,e);var i=new(Function.bind.apply(t,n));return r&&a(i,r.prototype),i},n.apply(null,arguments)}function i(t){return i=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},i(t)}function o(t,e){return!e||"object"!==u(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t,e){return a=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},a(t,e)}var u=function(t){return t&&"undefined"!=typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};function l(t){var e="function"==typeof Map?new Map:void 0;return l=function(t){if(null===t||(r=t,-1===Function.toString.call(r).indexOf("[native code]")))return t;var r;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,o)}function o(){return n(t,arguments,i(this).constructor)}return o.prototype=Object.create(t.prototype,{constructor:{value:o,enumerable:!1,writable:!0,configurable:!0}}),a(o,t)},l(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.notImplemented=e.NotImplementedError=void 0;var s=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&a(t,e)}(u,t);var e,r,n=(e=u,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=i(e);if(r){var a=i(this).constructor;t=Reflect.construct(n,arguments,a)}else t=n.apply(this,arguments);return o(this,t)});function u(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(r=n.call(this,"".concat(t," is not implemented yet"))).name="NotImplementedError",null!=e&&(r.ret=e),r}return u}(l(Error));e.NotImplementedError=s,e.notImplemented=function(t,e){throw new s(t,e)}},7233:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(1731);e.default=function(t){var e=t.posix,r=t.send;return{wait:function(t){null==e.wait&&(0,n.notImplemented)("wait");var i=e.wait(),o=i.ret,a=i.wstatus;return r.i32(t,a),o},waitid:function(){return(0,n.notImplemented)("waitid"),-1},waitpid:function(t,i,o){null==e.waitpid&&(0,n.notImplemented)("waitpid");var a=e.waitpid(t,o),u=a.ret,l=a.wstatus;return r.i32(i,l),u}}}},6224:(t,e,r)=>{"use strict";var n=r(4229);function i(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}Object.defineProperty(e,"__esModule",{value:!0});var o={createKey:function(t){return JSON.stringify(t)},ignoreSingleUndefined:!1};e.default=function(t,e){e=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),n.forEach((function(e){i(t,e,r[e])}))}return t}({},o,e||{});var r={};return function(){for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];e.ignoreSingleUndefined&&1===o.length&&void 0===o[0]&&(n.warn("Ignoring single undefined arg (reuseInFlight)"),o=[]);var u=e.createKey(o);return r.hasOwnProperty(u)||(r[u]=t.apply(this,o).then((function(t){return delete r[u],t}),(function(t){throw delete r[u],t}))),r[u]}}},2336:function(t,e,r){"use strict";var n=r(5925);function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function o(t,e,r,n,i,o,a){try{var u=t[o](a),l=u.value}catch(t){return void r(t)}u.done?e(l):Promise.resolve(l).then(n,i)}function a(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function u(t){o(a,n,i,u,l,"next",t)}function l(t){o(a,n,i,u,l,"throw",t)}u(void 0)}))}}function u(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function l(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),n.forEach((function(e){u(t,e,r[e])}))}return t}function s(t,e){return e=null!=e?e:{},Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):function(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);r.push.apply(r,n)}return r}(Object(e)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(e,r))})),t}function c(t){return function(t){if(Array.isArray(t))return i(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return i(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(r):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?i(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var f=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},_=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(e,r);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,n,i)}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),I=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),S=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&_(e,t,r);return I(e,t),e},E=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.strlen=void 0;var d=E(r(7480)),A=E(r(6224)),p=E(r(1880)),v=S(r(8989)),y=E(r(330)),T=E(r(2502)),m=E(r(8378)),h=E(r(1229)),g=(0,E(r(7587)).default)("wasm-worker");e.strlen=function(t,e){for(var r=new Uint8Array(e.buffer),n=t;r[n];)n+=1;return n-t};var W={};function O(){return O=a((function(t){var e,r,i,o,a,u,_,I,S,E,A,O,b,R,w,D,N,P,L,F,C;function G(t){for(var e=arguments.length,r=new Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];var i=b.getFunction(t);if(null==i)throw Error("error - ".concat(t," is not defined"));return i.apply(void 0,c(r))}function H(){if(null==b.getcwd)throw Error("error - ".concat(name," is not defined"));return b.getcwd()}function M(t){b.exports.c_free(t)}return f(this,(function(c){switch(c.label){case 0:if(e=t.source,r=t.bindings,i=t.options,o=void 0===i?{}:i,a=t.importWebAssemblySync,u=t.importWebAssembly,_=t.readFileSync,I=t.maxMemoryMB,g("doWasmImport",e),null!=W[e])return[2,W[e]];for(var f in S=(new Date).valueOf(),E=new WebAssembly.Memory(l({initial:(0,v.MBtoPages)(10)},I?{maximum:(0,v.MBtoPages)(I)}:{})),A=new WebAssembly.Table({initial:1e4,element:"anyfunc"}),null==(O={env:s(l({},{reportError:function(t,e){var r=E.buffer.slice(t,t+e),n=new TextDecoder;throw Error(n.decode(r))}},o.wasmEnv),{memory:E,__indirect_function_table:A})}).env.wasmGetSignalState&&(O.env.wasmGetSignalState=function(){return 0}),null==O.env.wasmSendString&&(O.env.wasmSendString=function(t,e){b.result=b.recv.string(t,e)}),null==O.env.wasmSetException&&(O.env.wasmSetException=function(){b.resultException=!0}),null==O.env.getrandom&&(O.env.getrandom=function(t,e,n){return r.randomFillSync(new Uint8Array(E.buffer),t,e),e}),null==O.env.main&&(O.env.main=function(){return 0}),null==O.env._Py_emscripten&&(O.env._Py_emscripten_runtime=function(){return 0}),(0,y.default)(A,O.env),R=r.fs,w={preopens:{"/":"/"},bindings:r,args:n.argv,env:o.env,sleep:o.sleep,getStdin:o.getStdin,sendStdout:o.sendStdout,sendStderr:o.sendStderr},D=new d.default(w),O.wasi_snapshot_preview1=D.wasiImport,F=(0,T.default)({fs:R,send:new m.default({memory:E,callFunction:G}),recv:new h.default({memory:E,callFunction:G}),wasi:D,process:n,os:null!==(N=r.os)&&void 0!==N?N:{},posix:null!==(P=r.posix)&&void 0!==P?P:{},child_process:null!==(L=r.child_process)&&void 0!==L?L:{},memory:E,callFunction:G,getcwd:H,free:M}))null==O.env[f]&&(O.env[f]=F[f]);if(null==e)throw Error("source must be defined for now...");return[4,(0,v.default)({path:e,importWebAssemblySync:a,importWebAssembly:u,readFileSync:_,importObject:O,stub:!1})];case 1:return C=c.sent(),null!=D&&D.start(C,E),b=new p.default(C.exports,E,R,A),null==o.init?[3,3]:[4,o.init(b)];case 2:c.sent(),c.label=3;case 3:return F.init(),W[e]=b,o.time&&g.enabled&&g("imported ".concat(e," in ").concat((new Date).valueOf()-S,"ms")),b.table=A,b.wasi=D,b.posixEnv=F,[2,b]}}))})),O.apply(this,arguments)}var b=(0,A.default)((function(t){return O.apply(this,arguments)}),{createKey:function(t){return t[0]}});e.default=b},6435:function(t,e,r){"use strict";function n(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function i(t,e,r,n,i,o,a){try{var u=t[o](a),l=u.value}catch(t){return void r(t)}u.done?e(l):Promise.resolve(l).then(n,i)}function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var a=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var l=(0,u(r(7587)).default)("wasm:worker:init");e.default=function(t){var e,r,u=t.wasmImport,s=t.parent,c=t.captureOutput,f=t.IOHandler,_=void 0;s.on("message",(e=function(t){var e,r,i,I,S,E,d;return a(this,(function(a){switch(a.label){case 0:switch(l("worker got message ",t),t.event){case"init":return[3,1];case"callWithString":return[3,5];case"call":return[3,6];case"waitUntilFsLoaded":return[3,7]}return[3,12];case 1:return a.trys.push([1,3,,4]),e=new f(t.options,(function(){s.postMessage({event:"service-worker-broken"})})),p=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),n.forEach((function(e){o(t,e,r[e])}))}return t}({},t.options),v=null!=(v={sleep:e.sleep.bind(e),getStdin:e.getStdin.bind(e),wasmEnv:{wasmGetSignalState:e.getSignalState.bind(e)}})?v:{},Object.getOwnPropertyDescriptors?Object.defineProperties(p,Object.getOwnPropertyDescriptors(v)):function(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);r.push.apply(r,n)}return r}(Object(v)).forEach((function(t){Object.defineProperty(p,t,Object.getOwnPropertyDescriptor(v,t))})),r=p,c&&(r.sendStdout=function(t){l("sendStdout",t),s.postMessage({event:"stdout",data:t})},r.sendStderr=function(t){l("sendStderr",t),s.postMessage({event:"stderr",data:t})}),[4,u(t.name,r)];case 2:return _=a.sent(),s.postMessage({event:"init",status:"ok"}),[3,4];case 3:return i=a.sent(),s.postMessage({event:"init",status:"error",error:i.toString()}),[3,4];case 4:return[2];case 5:if(null==_)throw Error("wasm must be initialized");try{s.postMessage({id:t.id,result:(I=_).callWithString.apply(I,[t.name,t.str].concat((A=t.args,function(t){if(Array.isArray(t))return n(t)}(A)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(A)||function(t,e){if(t){if("string"==typeof t)return n(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(r):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(t,e):void 0}}(A)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())))})}catch(e){s.postMessage({id:t.id,error:e})}return[2];case 6:if(null==_)throw Error("wasm must be initialized");return s.postMessage({id:t.id,result:_.callWithString(t.name,"",[])}),[2];case 7:if(null==(null==_?void 0:_.fs))throw Error("wasm.fs must be initialized");a.label=8;case 8:return a.trys.push([8,10,,11]),[4,null===(E=(S=_.fs).waitUntilLoaded)||void 0===E?void 0:E.call(S)];case 9:return a.sent(),s.postMessage({id:t.id,result:{}}),[3,11];case 10:return d=a.sent(),s.postMessage({id:t.id,error:d}),[3,11];case 11:case 12:return[2]}var A,p,v}))},r=function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function u(t){i(a,n,o,u,l,"next",t)}function l(t){i(a,n,o,u,l,"throw",t)}u(void 0)}))},function(t){return r.apply(this,arguments)}))}},1880:function(t,e,r){"use strict";function n(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function i(t,e,r,n,i,o,a){try{var u=t[o](a),l=u.value}catch(t){return void r(t)}u.done?e(l):Promise.resolve(l).then(n,i)}function o(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var a=t.apply(e,r);function u(t){i(a,n,o,u,l,"next",t)}function l(t){i(a,n,o,u,l,"throw",t)}u(void 0)}))}}function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function u(t){return u=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},u(t)}function l(t,e){return!e||"object"!==f(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function s(t,e){return s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},s(t,e)}function c(t){return function(t){if(Array.isArray(t))return n(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return n(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(r):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var f=function(t){return t&&"undefined"!=typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};var _=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var S=r(3124),E=I(r(8378)),d=I(r(1229)),A=new TextEncoder,p=8192,v=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(I,t);var e,r,n,i,f=(n=I,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=u(n);if(i){var r=u(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return l(this,t)});function I(t,e,r,n){var i;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,I),(i=f.call(this)).result=void 0,i.resultException=!1,i._getFunctionCache={},i.exports=t,i.memory=e,i.table=n,i.fs=r;var o={memory:i.memory,callFunction:function(t){for(var e=arguments.length,r=new Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];var o=i.getFunction(t);if(null==o)throw Error("error - ".concat(t," is not defined"));return o.apply(void 0,c(r))}};return i.send=new E.default(o),i.recv=new d.default(o),i}return e=I,r=[{key:"terminal",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["command"],e=this;return o((function(){return _(this,(function(r){switch(r.label){case 0:return[4,e.callWithString("terminal",t)];case 1:return[2,r.sent()]}}))}))()}},{key:"writeToStdin",value:function(t){throw Error("not implemented")}},{key:"callWithString",value:function(t,e){for(var r=arguments.length,n=new Array(r>2?r-2:0),i=2;i<r;i++)n[i-2]=arguments[i];this.result=void 0,this.resultException=!1;var o,a,u=this.getFunction(t);if(null==u)throw Error('no function "'.concat(t,'" defined in wasm module'));if("string"==typeof e){var l,s=A.encode(e);if(s.length<p)return o=this.callWithSmallString(u,s),null!==(l=this.result)&&void 0!==l?l:o;var f=this.send.encodedString(s);try{o=u.apply(void 0,[f].concat(c(n)))}finally{this.exports.c_free(f)}}else{var _=[],I=!0,S=!1,E=void 0;try{for(var d,v=e[Symbol.iterator]();!(I=(d=v.next()).done);I=!0){var y=d.value;_.push(this.send.string(y))}}catch(t){S=!0,E=t}finally{try{I||null==v.return||v.return()}finally{if(S)throw E}}var T=_.length,m=this.exports.c_malloc(4*T),h=new Int32Array(this.memory.buffer,m,T),g=0,W=!0,O=!1,b=void 0;try{for(var R,w=_[Symbol.iterator]();!(W=(R=w.next()).done);W=!0){var D=R.value;h[g]=D,g+=1}}catch(t){O=!0,b=t}finally{try{W||null==w.return||w.return()}finally{if(O)throw b}}try{o=u.apply(void 0,[T,m].concat(c(n)))}finally{this.exports.c_free(m);var N=!0,P=!1,L=void 0;try{for(var F,C=_[Symbol.iterator]();!(N=(F=C.next()).done);N=!0){var G=F.value;this.exports.c_free(G)}}catch(t){P=!0,L=t}finally{try{N||null==C.return||C.return()}finally{if(P)throw L}}}}if(this.resultException)throw Error("RuntimeError");return null!==(a=this.result)&&void 0!==a?a:o}},{key:"getSmallStringPtr",value:function(){if(null==this.smallStringPtr&&(this.smallStringPtr=this.exports.c_malloc(p),!this.smallStringPtr))throw Error("MemoryError -- out of memory allocating small string buffer");return this.smallStringPtr}},{key:"callWithSmallString",value:function(t,e){for(var r=arguments.length,n=new Array(r>2?r-2:0),i=2;i<r;i++)n[i-2]=arguments[i];var o=this.getSmallStringPtr(),a=e.length+1,u=new Int8Array(this.memory.buffer,o,a);return u.set(e),u[a-1]=0,t.apply(void 0,[o].concat(c(n)))}},{key:"getFunction",value:function(t){var e=this._getFunctionCache[t];if(null!=e)return e;if(null!=this.table){var r=this.exports["__WASM_EXPORT__".concat(t)];if(null!=r){var n=this.table.get(r());if(null!=n)return this._getFunctionCache[t]=n,n}}return this.exports[t]}},{key:"getcwd",value:function(){var t=this.getFunction("getcwd");if(null==t)throw Error("C library function getcwd must be exported");return this.recv.string(t(this.getSmallStringPtr(),p))}},{key:"waitUntilFsLoaded",value:function(){var t=this;return o((function(){var e,r;return _(this,(function(n){switch(n.label){case 0:if(null==t.fs)throw Error("fs must be defined");return[4,null===(r=(e=t.fs).waitUntilLoaded)||void 0===r?void 0:r.call(e)];case 1:return[2,n.sent()]}}))}))()}},{key:"signal",value:function(t){throw Error("not implemented")}}],r&&a(e.prototype,r),I}(S.EventEmitter);e.default=v},521:function(t,e,r){"use strict";var n=r(2372).Buffer;function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=(0,o(r(7587)).default)("wasm:worker:io-using-atomics"),u=function(){function t(e){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),a("creating ioHandler"),null==e.stdinLengthBuffer)throw Error("must define stdinLengthBuffer");if(null==e.stdinBuffer)throw Error("must define stdinBuffer");if(null==e.signalBuffer)throw Error("must define signalBuffer");this.stdinBuffer=n.from(e.stdinBuffer),this.stdinLength=new Int32Array(e.stdinLengthBuffer),this.signalState=new Int32Array(e.signalBuffer),this.sleepArray=new Int32Array(new SharedArrayBuffer(4))}var e,r;return e=t,(r=[{key:"sleep",value:function(t){for(a("sleep starting, milliseconds=",t);t>0;){var e=Math.min(t,500);if(Atomics.wait(this.sleepArray,0,0,e),t-=e,Atomics.load(this.signalState,0))return}}},{key:"getStdin",value:function(){for(;0==this.stdinLength[0];)if(a("getStdin: waiting for some new stdin"),Atomics.wait(this.stdinLength,0,0,1e3),Atomics.load(this.signalState,0))return n.from("");var t=this.stdinLength[0];a("getStdin: have stdin, processing ",t," bytes");var e=n.alloc(t);return this.stdinBuffer.copy(e,0,0,t),Atomics.store(this.stdinLength,0,0),Atomics.notify(this.stdinLength,0),e}},{key:"getSignalState",value:function(){var t=Atomics.load(this.signalState,0);return t?(a("signalState",this.signalState[0]),Atomics.store(this.signalState,0,0),t):0}}])&&i(e.prototype,r),t}();e.default=u},9198:function(t,e,r){"use strict";var n=r(2372).Buffer,i=r(4229);function o(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var u=(0,a(r(7587)).default)("wasm:worker:io-using-atomics"),l=function(){function t(e,r){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.lastSignalCheck=0,u(e),this.id=e.id,this.serviceWorkerBroken=r,null==this.id)throw Error("".concat(this.id," must be a v4 uuid"))}var e,r;return e=t,r=[{key:"request",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=new XMLHttpRequest;r.open("POST","/python-wasm-sw/".concat(t),!1),r.setRequestHeader("cache-control","no-cache, no-store, max-age=0");try{r.send(JSON.stringify(e))}catch(t){this.serviceWorkerBroken(),s(t)}return 200!=r.status&&304!=r.status&&(this.serviceWorkerBroken(),s("invalid status=".concat(r.status))),r}},{key:"sleep",value:function(t){u("sleep ",t);for(var e=(new Date).valueOf();(new Date).valueOf()-e<=t;){try{this.request("sleep",{ms:Math.min(t,500)})}catch(t){return void u("sleep error",t)}if(this.getSignal(!1))return}}},{key:"getStdin",value:function(){var t,e=this.request("read-stdin",{id:this.id,ms:3e3});return 200==e.status?n.from(null!==(t=e.responseText)&&void 0!==t?t:""):n.from("")}},{key:"getSignal",value:function(t){var e,r=this.request("read-signal",{clear:t,id:this.id});return null!==(e=parseInt(r.responseText))&&void 0!==e?e:0}},{key:"getSignalState",value:function(){var t=(new Date).valueOf();return t-this.lastSignalCheck<500?0:(this.lastSignalCheck=t,this.getSignal(!0))}}],r&&o(e.prototype,r),t}();function s(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3e3;i.warn("service worker not working, so burning CPU to avoid DOS'ing the server -- ",t);for(var r=(new Date).valueOf();(new Date).valueOf()-r<=e;);}e.default=l},2656:(t,e,r)=>{"use strict";var n=r(5925);Object.defineProperty(e,"__esModule",{value:!0});var i={getpid:function(){return n.pid},getppid:function(){var t,e;return null!==(e=null===(t=i.getpid)||void 0===t?void 0:t.call(i))&&void 0!==e?e:1}};e.default=i},1229:(t,e,r)=>{"use strict";var n=r(4229),i=r(2372).Buffer;function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function u(t){return u=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},u(t)}function l(t,e){return!e||"object"!==c(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function s(t,e){return s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},s(t,e)}var c=function(t){return t&&"undefined"!=typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};Object.defineProperty(e,"__esModule",{value:!0}),e.RecvFromWasmAbstractBase=void 0;var f=new TextDecoder,_=function(){function t(){o(this,t)}var e,r;return e=t,(r=[{key:"view",value:function(){return new DataView(this.memory.buffer)}},{key:"strlen",value:function(t){for(var e=new Uint8Array(this.memory.buffer),r=t;e[r];)r+=1;return r-t}},{key:"pointer",value:function(t){return this.view().getUint32(t,!0)}},{key:"u32",value:function(t){return this.view().getUint32(t,!0)}},{key:"i32",value:function(t){return this.view().getInt32(t,!0)}},{key:"pointer2",value:function(t){return new Uint32Array(this.memory.buffer)[t]}},{key:"string",value:function(t,e){if(null==e&&null==(e=this.strlen(t)))throw Error("bug");var r=this.memory.buffer.slice(t,t+e);return f.decode(r)}},{key:"buffer",value:function(t,e){return n.log(this.memory.buffer.slice(t,t+e)),i.from(this.memory.buffer.slice(t,t+e))}},{key:"arrayOfStrings",value:function(t){for(var e=[];;){var r=this.pointer(t);if(!r)break;e.push(this.string(r)),t+=4}return e}},{key:"arrayOfI32",value:function(t){var e=[];if(0==t)return e;for(;;){var r=this.pointer(t);if(!r)break;e.push(this.i32(r)),t+=4}return e}}])&&a(e.prototype,r),t}();e.RecvFromWasmAbstractBase=_;var I=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=u(e);if(r){var i=u(this).constructor;t=Reflect.construct(n,arguments,i)}else t=n.apply(this,arguments);return l(this,t)});function i(t){var e,r=t.memory,a=t.callFunction;return o(this,i),(e=n.call(this)).memory=r,e.callFunction=a,e}return i}(_);e.default=I},8378:(t,e,r)=>{"use strict";var n=r(4229);function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function a(t){return a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},a(t)}function u(t,e){return!e||"object"!==s(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function l(t,e){return l=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},l(t,e)}var s=function(t){return t&&"undefined"!=typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};Object.defineProperty(e,"__esModule",{value:!0}),e.SendToWasmAbstractBase=void 0;var c=new TextEncoder,f=function(){function t(){i(this,t)}var e,r;return e=t,(r=[{key:"malloc",value:function(t){var e=this.callFunction("c_malloc",t);if(!e)throw Error("Out of Memory");return e}},{key:"view",value:function(){return new DataView(this.memory.buffer)}},{key:"pointer",value:function(t,e){this.view().setUint32(t,e,!0)}},{key:"i32",value:function(t,e){this.view().setInt32(t,e,!0)}},{key:"f64",value:function(t,e){this.view().setFloat64(t,e,!0)}},{key:"f32",value:function(t,e){this.view().setFloat32(t,e,!0)}},{key:"u32",value:function(t,e){this.view().setUint32(t,e,!0)}},{key:"string",value:function(t,e){return this.encodedString(c.encode(t),e)}},{key:"encodedString",value:function(t,e){null!=e&&(e.len||n.warn("send-to-wasm: encodedString -- suspicious dest.len = 0!"),t=t.slice(0,e.len-1));var r,i=t.length+1,o=null!==(r=null==e?void 0:e.ptr)&&void 0!==r?r:this.malloc(i),a=new Int8Array(this.memory.buffer,o,i);return a.set(t),a[i-1]=0,o}},{key:"arrayOfStrings",value:function(t){for(var e=this.malloc(4*(t.length+1)),r=0;r<t.length;r++){var n=this.string(t[r]);this.pointer(e+4*r,n)}return this.pointer(e+4*t.length,0),e}},{key:"buffer",value:function(t){var e=this.malloc(t.byteLength),r=new Uint8Array(this.memory.buffer);return t.copy(r,e),e}}])&&o(e.prototype,r),t}();e.SendToWasmAbstractBase=f;var _=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&l(t,e)}(o,t);var e,r,n=(e=o,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=a(e);if(r){var i=a(this).constructor;t=Reflect.construct(n,arguments,i)}else t=n.apply(this,arguments);return u(this,t)});function o(t){var e,r=t.memory,a=t.callFunction;return i(this,o),(e=n.call(this)).memory=r,e.callFunction=a,e}return o}(f);e.default=_},330:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=(0,n(r(7587)).default)("python-wasm-trampoline");e.default=function(t,e){e._PyImport_InitFunc_TrampolineCall=function(e){var r=t.get(e)();return i("_PyImport_InitFunc_TrampolineCall - ptr=",e," r=",r),r},e._PyCFunctionWithKeywords_TrampolineCall=function(e,r,n,i){return t.get(e)(r,n,i)},e.descr_set_trampoline_call=function(e,r,n,i){return t.get(e)(r,n,i)},e.descr_get_trampoline_call=function(e,r,n){return t.get(e)(r,n)}}},7122:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){!function(){if("performance"in self||(self.performance={}),Date.now=Date.now||function(){return(new Date).getTime()},"now"in self.performance==0){var t=Date.now();performance.timing&&performance.timing.navigationStart&&(t=performance.timing.navigationStart),self.performance.now=function(){return Date.now()-t}}}();var e=Math.floor(.001*(Date.now()-performance.now())),r=.001*performance.now(),n=Math.floor(r)+e,i=Math.floor(r%1*1e9);return t&&(n-=t[0],(i-=t[1])<0&&(n--,i+=1e9)),[n,i]};r.bigint=function(t){var e=r(t);return 1e9*e[0]+e[1]},e.default=r},7771:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(8107),o=n(r(413)),a=n(r(7122)),u=r(5781),l={hrtime:a.default.bigint,exit:function(t){throw new u.WASIExitError(t)},kill:function(t){throw new u.WASIKillError(t)},randomFillSync:i.randomFillSync,isTTY:function(){return!0},path:o.default,fs:null};e.default=l},4686:(t,e)=>{"use strict";function r(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var n;Object.defineProperty(e,"__esModule",{value:!0}),e.WASI_ENOMSG=e.WASI_ENOMEM=e.WASI_ENOLINK=e.WASI_ENOLCK=e.WASI_ENOEXEC=e.WASI_ENOENT=e.WASI_ENODEV=e.WASI_ENOBUFS=e.WASI_ENFILE=e.WASI_ENETUNREACH=e.WASI_ENETRESET=e.WASI_ENETDOWN=e.WASI_ENAMETOOLONG=e.WASI_EMULTIHOP=e.WASI_EMSGSIZE=e.WASI_EMLINK=e.WASI_EMFILE=e.WASI_ELOOP=e.WASI_EISDIR=e.WASI_EISCONN=e.WASI_EIO=e.WASI_EINVAL=e.WASI_EINTR=e.WASI_EINPROGRESS=e.WASI_EILSEQ=e.WASI_EIDRM=e.WASI_EHOSTUNREACH=e.WASI_EFBIG=e.WASI_EFAULT=e.WASI_EEXIST=e.WASI_EDQUOT=e.WASI_EDOM=e.WASI_EDESTADDRREQ=e.WASI_EDEADLK=e.WASI_ECONNRESET=e.WASI_ECONNREFUSED=e.WASI_ECONNABORTED=e.WASI_ECHILD=e.WASI_ECANCELED=e.WASI_EBUSY=e.WASI_EBADMSG=e.WASI_EBADF=e.WASI_EALREADY=e.WASI_EAGAIN=e.WASI_EAFNOSUPPORT=e.WASI_EADDRNOTAVAIL=e.WASI_EADDRINUSE=e.WASI_EACCES=e.WASI_E2BIG=e.WASI_ESUCCESS=void 0,e.WASI_SIGVTALRM=e.WASI_SIGUSR2=e.WASI_SIGUSR1=e.WASI_SIGURG=e.WASI_SIGTTOU=e.WASI_SIGTTIN=e.WASI_SIGTSTP=e.WASI_SIGTRAP=e.WASI_SIGTERM=e.WASI_SIGSTOP=e.WASI_SIGSEGV=e.WASI_SIGQUIT=e.WASI_SIGPIPE=e.WASI_SIGKILL=e.WASI_SIGINT=e.WASI_SIGILL=e.WASI_SIGHUP=e.WASI_SIGFPE=e.WASI_SIGCONT=e.WASI_SIGCHLD=e.WASI_SIGBUS=e.WASI_SIGALRM=e.WASI_SIGABRT=e.WASI_ENOTCAPABLE=e.WASI_EXDEV=e.WASI_ETXTBSY=e.WASI_ETIMEDOUT=e.WASI_ESTALE=e.WASI_ESRCH=e.WASI_ESPIPE=e.WASI_EROFS=e.WASI_ERANGE=e.WASI_EPROTOTYPE=e.WASI_EPROTONOSUPPORT=e.WASI_EPROTO=e.WASI_EPIPE=e.WASI_EPERM=e.WASI_EOWNERDEAD=e.WASI_EOVERFLOW=e.WASI_ENXIO=e.WASI_ENOTTY=e.WASI_ENOTSUP=e.WASI_ENOTSOCK=e.WASI_ENOTRECOVERABLE=e.WASI_ENOTEMPTY=e.WASI_ENOTDIR=e.WASI_ENOTCONN=e.WASI_ENOSYS=e.WASI_ENOSPC=e.WASI_ENOPROTOOPT=void 0,e.RIGHTS_REGULAR_FILE_BASE=e.RIGHTS_CHARACTER_DEVICE_INHERITING=e.RIGHTS_CHARACTER_DEVICE_BASE=e.RIGHTS_BLOCK_DEVICE_INHERITING=e.RIGHTS_BLOCK_DEVICE_BASE=e.RIGHTS_ALL=e.WASI_RIGHT_SOCK_SHUTDOWN=e.WASI_RIGHT_POLL_FD_READWRITE=e.WASI_RIGHT_PATH_UNLINK_FILE=e.WASI_RIGHT_PATH_REMOVE_DIRECTORY=e.WASI_RIGHT_PATH_SYMLINK=e.WASI_RIGHT_FD_FILESTAT_SET_TIMES=e.WASI_RIGHT_FD_FILESTAT_SET_SIZE=e.WASI_RIGHT_FD_FILESTAT_GET=e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES=e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE=e.WASI_RIGHT_PATH_FILESTAT_GET=e.WASI_RIGHT_PATH_RENAME_TARGET=e.WASI_RIGHT_PATH_RENAME_SOURCE=e.WASI_RIGHT_PATH_READLINK=e.WASI_RIGHT_FD_READDIR=e.WASI_RIGHT_PATH_OPEN=e.WASI_RIGHT_PATH_LINK_TARGET=e.WASI_RIGHT_PATH_LINK_SOURCE=e.WASI_RIGHT_PATH_CREATE_FILE=e.WASI_RIGHT_PATH_CREATE_DIRECTORY=e.WASI_RIGHT_FD_ALLOCATE=e.WASI_RIGHT_FD_ADVISE=e.WASI_RIGHT_FD_WRITE=e.WASI_RIGHT_FD_TELL=e.WASI_RIGHT_FD_SYNC=e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS=e.WASI_RIGHT_FD_SEEK=e.WASI_RIGHT_FD_READ=e.WASI_RIGHT_FD_DATASYNC=e.WASI_FDFLAG_SYNC=e.WASI_FDFLAG_RSYNC=e.WASI_FDFLAG_NONBLOCK=e.WASI_FDFLAG_DSYNC=e.WASI_FDFLAG_APPEND=e.WASI_FILETYPE_SYMBOLIC_LINK=e.WASI_FILETYPE_SOCKET_STREAM=e.WASI_FILETYPE_SOCKET_DGRAM=e.WASI_FILETYPE_REGULAR_FILE=e.WASI_FILETYPE_DIRECTORY=e.WASI_FILETYPE_CHARACTER_DEVICE=e.WASI_FILETYPE_BLOCK_DEVICE=e.WASI_FILETYPE_UNKNOWN=e.WASI_SIGXFSZ=e.WASI_SIGXCPU=void 0,e.SIGNAL_MAP=e.ERROR_MAP=e.WASI_WHENCE_END=e.WASI_WHENCE_CUR=e.WASI_WHENCE_SET=e.WASI_STDERR_FILENO=e.WASI_STDOUT_FILENO=e.WASI_STDIN_FILENO=e.WASI_DIRCOOKIE_START=e.WASI_PREOPENTYPE_DIR=e.WASI_O_TRUNC=e.WASI_O_EXCL=e.WASI_O_DIRECTORY=e.WASI_O_CREAT=e.WASI_FILESTAT_SET_MTIM_NOW=e.WASI_FILESTAT_SET_MTIM=e.WASI_FILESTAT_SET_ATIM_NOW=e.WASI_FILESTAT_SET_ATIM=e.WASI_EVENTTYPE_FD_WRITE=e.WASI_EVENTTYPE_FD_READ=e.WASI_EVENTTYPE_CLOCK=e.WASI_CLOCK_THREAD_CPUTIME_ID=e.WASI_CLOCK_PROCESS_CPUTIME_ID=e.WASI_CLOCK_MONOTONIC=e.WASI_CLOCK_REALTIME=e.RIGHTS_TTY_INHERITING=e.RIGHTS_TTY_BASE=e.RIGHTS_SOCKET_INHERITING=e.RIGHTS_SOCKET_BASE=e.RIGHTS_DIRECTORY_INHERITING=e.RIGHTS_DIRECTORY_BASE=e.RIGHTS_REGULAR_FILE_INHERITING=void 0,e.WASI_ESUCCESS=0,e.WASI_E2BIG=1,e.WASI_EACCES=2,e.WASI_EADDRINUSE=3,e.WASI_EADDRNOTAVAIL=4,e.WASI_EAFNOSUPPORT=5,e.WASI_EAGAIN=6,e.WASI_EALREADY=7,e.WASI_EBADF=8,e.WASI_EBADMSG=9,e.WASI_EBUSY=10,e.WASI_ECANCELED=11,e.WASI_ECHILD=12,e.WASI_ECONNABORTED=13,e.WASI_ECONNREFUSED=14,e.WASI_ECONNRESET=15,e.WASI_EDEADLK=16,e.WASI_EDESTADDRREQ=17,e.WASI_EDOM=18,e.WASI_EDQUOT=19,e.WASI_EEXIST=20,e.WASI_EFAULT=21,e.WASI_EFBIG=22,e.WASI_EHOSTUNREACH=23,e.WASI_EIDRM=24,e.WASI_EILSEQ=25,e.WASI_EINPROGRESS=26,e.WASI_EINTR=27,e.WASI_EINVAL=28,e.WASI_EIO=29,e.WASI_EISCONN=30,e.WASI_EISDIR=31,e.WASI_ELOOP=32,e.WASI_EMFILE=33,e.WASI_EMLINK=34,e.WASI_EMSGSIZE=35,e.WASI_EMULTIHOP=36,e.WASI_ENAMETOOLONG=37,e.WASI_ENETDOWN=38,e.WASI_ENETRESET=39,e.WASI_ENETUNREACH=40,e.WASI_ENFILE=41,e.WASI_ENOBUFS=42,e.WASI_ENODEV=43,e.WASI_ENOENT=44,e.WASI_ENOEXEC=45,e.WASI_ENOLCK=46,e.WASI_ENOLINK=47,e.WASI_ENOMEM=48,e.WASI_ENOMSG=49,e.WASI_ENOPROTOOPT=50,e.WASI_ENOSPC=51,e.WASI_ENOSYS=52,e.WASI_ENOTCONN=53,e.WASI_ENOTDIR=54,e.WASI_ENOTEMPTY=55,e.WASI_ENOTRECOVERABLE=56,e.WASI_ENOTSOCK=57,e.WASI_ENOTSUP=58,e.WASI_ENOTTY=59,e.WASI_ENXIO=60,e.WASI_EOVERFLOW=61,e.WASI_EOWNERDEAD=62,e.WASI_EPERM=63,e.WASI_EPIPE=64,e.WASI_EPROTO=65,e.WASI_EPROTONOSUPPORT=66,e.WASI_EPROTOTYPE=67,e.WASI_ERANGE=68,e.WASI_EROFS=69,e.WASI_ESPIPE=70,e.WASI_ESRCH=71,e.WASI_ESTALE=72,e.WASI_ETIMEDOUT=73,e.WASI_ETXTBSY=74,e.WASI_EXDEV=75,e.WASI_ENOTCAPABLE=76,e.WASI_SIGABRT=0,e.WASI_SIGALRM=1,e.WASI_SIGBUS=2,e.WASI_SIGCHLD=3,e.WASI_SIGCONT=4,e.WASI_SIGFPE=5,e.WASI_SIGHUP=6,e.WASI_SIGILL=7,e.WASI_SIGINT=8,e.WASI_SIGKILL=9,e.WASI_SIGPIPE=10,e.WASI_SIGQUIT=11,e.WASI_SIGSEGV=12,e.WASI_SIGSTOP=13,e.WASI_SIGTERM=14,e.WASI_SIGTRAP=15,e.WASI_SIGTSTP=16,e.WASI_SIGTTIN=17,e.WASI_SIGTTOU=18,e.WASI_SIGURG=19,e.WASI_SIGUSR1=20,e.WASI_SIGUSR2=21,e.WASI_SIGVTALRM=22,e.WASI_SIGXCPU=23,e.WASI_SIGXFSZ=24,e.WASI_FILETYPE_UNKNOWN=0,e.WASI_FILETYPE_BLOCK_DEVICE=1,e.WASI_FILETYPE_CHARACTER_DEVICE=2,e.WASI_FILETYPE_DIRECTORY=3,e.WASI_FILETYPE_REGULAR_FILE=4,e.WASI_FILETYPE_SOCKET_DGRAM=5,e.WASI_FILETYPE_SOCKET_STREAM=6,e.WASI_FILETYPE_SYMBOLIC_LINK=7,e.WASI_FDFLAG_APPEND=1,e.WASI_FDFLAG_DSYNC=2,e.WASI_FDFLAG_NONBLOCK=4,e.WASI_FDFLAG_RSYNC=8,e.WASI_FDFLAG_SYNC=16,e.WASI_RIGHT_FD_DATASYNC=BigInt(1),e.WASI_RIGHT_FD_READ=BigInt(2),e.WASI_RIGHT_FD_SEEK=BigInt(4),e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS=BigInt(8),e.WASI_RIGHT_FD_SYNC=BigInt(16),e.WASI_RIGHT_FD_TELL=BigInt(32),e.WASI_RIGHT_FD_WRITE=BigInt(64),e.WASI_RIGHT_FD_ADVISE=BigInt(128),e.WASI_RIGHT_FD_ALLOCATE=BigInt(256),e.WASI_RIGHT_PATH_CREATE_DIRECTORY=BigInt(512),e.WASI_RIGHT_PATH_CREATE_FILE=BigInt(1024),e.WASI_RIGHT_PATH_LINK_SOURCE=BigInt(2048),e.WASI_RIGHT_PATH_LINK_TARGET=BigInt(4096),e.WASI_RIGHT_PATH_OPEN=BigInt(8192),e.WASI_RIGHT_FD_READDIR=BigInt(16384),e.WASI_RIGHT_PATH_READLINK=BigInt(32768),e.WASI_RIGHT_PATH_RENAME_SOURCE=BigInt(65536),e.WASI_RIGHT_PATH_RENAME_TARGET=BigInt(131072),e.WASI_RIGHT_PATH_FILESTAT_GET=BigInt(262144),e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE=BigInt(524288),e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES=BigInt(1048576),e.WASI_RIGHT_FD_FILESTAT_GET=BigInt(2097152),e.WASI_RIGHT_FD_FILESTAT_SET_SIZE=BigInt(4194304),e.WASI_RIGHT_FD_FILESTAT_SET_TIMES=BigInt(8388608),e.WASI_RIGHT_PATH_SYMLINK=BigInt(16777216),e.WASI_RIGHT_PATH_REMOVE_DIRECTORY=BigInt(33554432),e.WASI_RIGHT_PATH_UNLINK_FILE=BigInt(67108864),e.WASI_RIGHT_POLL_FD_READWRITE=BigInt(134217728),e.WASI_RIGHT_SOCK_SHUTDOWN=BigInt(268435456),e.RIGHTS_ALL=e.WASI_RIGHT_FD_DATASYNC|e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_SEEK|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_SYNC|e.WASI_RIGHT_FD_TELL|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_ADVISE|e.WASI_RIGHT_FD_ALLOCATE|e.WASI_RIGHT_PATH_CREATE_DIRECTORY|e.WASI_RIGHT_PATH_CREATE_FILE|e.WASI_RIGHT_PATH_LINK_SOURCE|e.WASI_RIGHT_PATH_LINK_TARGET|e.WASI_RIGHT_PATH_OPEN|e.WASI_RIGHT_FD_READDIR|e.WASI_RIGHT_PATH_READLINK|e.WASI_RIGHT_PATH_RENAME_SOURCE|e.WASI_RIGHT_PATH_RENAME_TARGET|e.WASI_RIGHT_PATH_FILESTAT_GET|e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE|e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_FD_FILESTAT_SET_TIMES|e.WASI_RIGHT_FD_FILESTAT_SET_SIZE|e.WASI_RIGHT_PATH_SYMLINK|e.WASI_RIGHT_PATH_UNLINK_FILE|e.WASI_RIGHT_PATH_REMOVE_DIRECTORY|e.WASI_RIGHT_POLL_FD_READWRITE|e.WASI_RIGHT_SOCK_SHUTDOWN,e.RIGHTS_BLOCK_DEVICE_BASE=e.RIGHTS_ALL,e.RIGHTS_BLOCK_DEVICE_INHERITING=e.RIGHTS_ALL,e.RIGHTS_CHARACTER_DEVICE_BASE=e.RIGHTS_ALL,e.RIGHTS_CHARACTER_DEVICE_INHERITING=e.RIGHTS_ALL,e.RIGHTS_REGULAR_FILE_BASE=e.WASI_RIGHT_FD_DATASYNC|e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_SEEK|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_SYNC|e.WASI_RIGHT_FD_TELL|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_ADVISE|e.WASI_RIGHT_FD_ALLOCATE|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_FD_FILESTAT_SET_SIZE|e.WASI_RIGHT_FD_FILESTAT_SET_TIMES|e.WASI_RIGHT_POLL_FD_READWRITE,e.RIGHTS_REGULAR_FILE_INHERITING=BigInt(0),e.RIGHTS_DIRECTORY_BASE=e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_SYNC|e.WASI_RIGHT_FD_ADVISE|e.WASI_RIGHT_PATH_CREATE_DIRECTORY|e.WASI_RIGHT_PATH_CREATE_FILE|e.WASI_RIGHT_PATH_LINK_SOURCE|e.WASI_RIGHT_PATH_LINK_TARGET|e.WASI_RIGHT_PATH_OPEN|e.WASI_RIGHT_FD_READDIR|e.WASI_RIGHT_PATH_READLINK|e.WASI_RIGHT_PATH_RENAME_SOURCE|e.WASI_RIGHT_PATH_RENAME_TARGET|e.WASI_RIGHT_PATH_FILESTAT_GET|e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE|e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_FD_FILESTAT_SET_TIMES|e.WASI_RIGHT_PATH_SYMLINK|e.WASI_RIGHT_PATH_UNLINK_FILE|e.WASI_RIGHT_PATH_REMOVE_DIRECTORY|e.WASI_RIGHT_POLL_FD_READWRITE,e.RIGHTS_DIRECTORY_INHERITING=e.RIGHTS_DIRECTORY_BASE|e.RIGHTS_REGULAR_FILE_BASE,e.RIGHTS_SOCKET_BASE=e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_POLL_FD_READWRITE|e.WASI_RIGHT_SOCK_SHUTDOWN,e.RIGHTS_SOCKET_INHERITING=e.RIGHTS_ALL,e.RIGHTS_TTY_BASE=e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_POLL_FD_READWRITE,e.RIGHTS_TTY_INHERITING=BigInt(0),e.WASI_CLOCK_REALTIME=0,e.WASI_CLOCK_MONOTONIC=1,e.WASI_CLOCK_PROCESS_CPUTIME_ID=2,e.WASI_CLOCK_THREAD_CPUTIME_ID=3,e.WASI_EVENTTYPE_CLOCK=0,e.WASI_EVENTTYPE_FD_READ=1,e.WASI_EVENTTYPE_FD_WRITE=2,e.WASI_FILESTAT_SET_ATIM=1,e.WASI_FILESTAT_SET_ATIM_NOW=2,e.WASI_FILESTAT_SET_MTIM=4,e.WASI_FILESTAT_SET_MTIM_NOW=8,e.WASI_O_CREAT=1,e.WASI_O_DIRECTORY=2,e.WASI_O_EXCL=4,e.WASI_O_TRUNC=8,e.WASI_PREOPENTYPE_DIR=0,e.WASI_DIRCOOKIE_START=0,e.WASI_STDIN_FILENO=0,e.WASI_STDOUT_FILENO=1,e.WASI_STDERR_FILENO=2,e.WASI_WHENCE_SET=0,e.WASI_WHENCE_CUR=1,e.WASI_WHENCE_END=2,e.ERROR_MAP={E2BIG:e.WASI_E2BIG,EACCES:e.WASI_EACCES,EADDRINUSE:e.WASI_EADDRINUSE,EADDRNOTAVAIL:e.WASI_EADDRNOTAVAIL,EAFNOSUPPORT:e.WASI_EAFNOSUPPORT,EALREADY:e.WASI_EALREADY,EAGAIN:e.WASI_EAGAIN,EBADF:e.WASI_EBADF,EBADMSG:e.WASI_EBADMSG,EBUSY:e.WASI_EBUSY,ECANCELED:e.WASI_ECANCELED,ECHILD:e.WASI_ECHILD,ECONNABORTED:e.WASI_ECONNABORTED,ECONNREFUSED:e.WASI_ECONNREFUSED,ECONNRESET:e.WASI_ECONNRESET,EDEADLOCK:e.WASI_EDEADLK,EDESTADDRREQ:e.WASI_EDESTADDRREQ,EDOM:e.WASI_EDOM,EDQUOT:e.WASI_EDQUOT,EEXIST:e.WASI_EEXIST,EFAULT:e.WASI_EFAULT,EFBIG:e.WASI_EFBIG,EHOSTDOWN:e.WASI_EHOSTUNREACH,EHOSTUNREACH:e.WASI_EHOSTUNREACH,EIDRM:e.WASI_EIDRM,EILSEQ:e.WASI_EILSEQ,EINPROGRESS:e.WASI_EINPROGRESS,EINTR:e.WASI_EINTR,EINVAL:e.WASI_EINVAL,EIO:e.WASI_EIO,EISCONN:e.WASI_EISCONN,EISDIR:e.WASI_EISDIR,ELOOP:e.WASI_ELOOP,EMFILE:e.WASI_EMFILE,EMLINK:e.WASI_EMLINK,EMSGSIZE:e.WASI_EMSGSIZE,EMULTIHOP:e.WASI_EMULTIHOP,ENAMETOOLONG:e.WASI_ENAMETOOLONG,ENETDOWN:e.WASI_ENETDOWN,ENETRESET:e.WASI_ENETRESET,ENETUNREACH:e.WASI_ENETUNREACH,ENFILE:e.WASI_ENFILE,ENOBUFS:e.WASI_ENOBUFS,ENODEV:e.WASI_ENODEV,ENOENT:e.WASI_ENOENT,ENOEXEC:e.WASI_ENOEXEC,ENOLCK:e.WASI_ENOLCK,ENOLINK:e.WASI_ENOLINK,ENOMEM:e.WASI_ENOMEM,ENOMSG:e.WASI_ENOMSG,ENOPROTOOPT:e.WASI_ENOPROTOOPT,ENOSPC:e.WASI_ENOSPC,ENOSYS:e.WASI_ENOSYS,ENOTCONN:e.WASI_ENOTCONN,ENOTDIR:e.WASI_ENOTDIR,ENOTEMPTY:e.WASI_ENOTEMPTY,ENOTRECOVERABLE:e.WASI_ENOTRECOVERABLE,ENOTSOCK:e.WASI_ENOTSOCK,ENOTTY:e.WASI_ENOTTY,ENXIO:e.WASI_ENXIO,EOVERFLOW:e.WASI_EOVERFLOW,EOWNERDEAD:e.WASI_EOWNERDEAD,EPERM:e.WASI_EPERM,EPIPE:e.WASI_EPIPE,EPROTO:e.WASI_EPROTO,EPROTONOSUPPORT:e.WASI_EPROTONOSUPPORT,EPROTOTYPE:e.WASI_EPROTOTYPE,ERANGE:e.WASI_ERANGE,EROFS:e.WASI_EROFS,ESPIPE:e.WASI_ESPIPE,ESRCH:e.WASI_ESRCH,ESTALE:e.WASI_ESTALE,ETIMEDOUT:e.WASI_ETIMEDOUT,ETXTBSY:e.WASI_ETXTBSY,EXDEV:e.WASI_EXDEV},e.SIGNAL_MAP=(r(n={},e.WASI_SIGHUP,"SIGHUP"),r(n,e.WASI_SIGINT,"SIGINT"),r(n,e.WASI_SIGQUIT,"SIGQUIT"),r(n,e.WASI_SIGILL,"SIGILL"),r(n,e.WASI_SIGTRAP,"SIGTRAP"),r(n,e.WASI_SIGABRT,"SIGABRT"),r(n,e.WASI_SIGBUS,"SIGBUS"),r(n,e.WASI_SIGFPE,"SIGFPE"),r(n,e.WASI_SIGKILL,"SIGKILL"),r(n,e.WASI_SIGUSR1,"SIGUSR1"),r(n,e.WASI_SIGSEGV,"SIGSEGV"),r(n,e.WASI_SIGUSR2,"SIGUSR2"),r(n,e.WASI_SIGPIPE,"SIGPIPE"),r(n,e.WASI_SIGALRM,"SIGALRM"),r(n,e.WASI_SIGTERM,"SIGTERM"),r(n,e.WASI_SIGCHLD,"SIGCHLD"),r(n,e.WASI_SIGCONT,"SIGCONT"),r(n,e.WASI_SIGSTOP,"SIGSTOP"),r(n,e.WASI_SIGTSTP,"SIGTSTP"),r(n,e.WASI_SIGTTIN,"SIGTTIN"),r(n,e.WASI_SIGTTOU,"SIGTTOU"),r(n,e.WASI_SIGURG,"SIGURG"),r(n,e.WASI_SIGXCPU,"SIGXCPU"),r(n,e.WASI_SIGXFSZ,"SIGXFSZ"),r(n,e.WASI_SIGVTALRM,"SIGVTALRM"),n)},1105:function(t,e,r){"use strict";var n=r(4229);function i(t,e,r,n,i,o,a){try{var u=t[o](a),l=u.value}catch(t){return void r(t)}u.done?e(l):Promise.resolve(l).then(n,i)}function o(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var a=t.apply(e,r);function u(t){i(a,n,o,u,l,"next",t)}function l(t){i(a,n,o,u,l,"throw",t)}u(void 0)}))}}function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function u(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),n.forEach((function(e){a(t,e,r[e])}))}return t}function l(t,e){return e=null!=e?e:{},Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):function(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);r.push.apply(r,n)}return r}(Object(e)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(e,r))})),t}var s=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.createFileSystem=void 0;var f=c(r(8724)),_=r(2655),I=r(3642);function S(t,e){if("zip"==t.type)return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"/",r=(0,_.createFsFromVolume)(new _.Volume);return(0,f.default)({data:t,fs:r,directory:e}),r}(t.data,t.mountpoint);if("zip-async"==t.type)return function(t){var e,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"/",i=(0,_.createFsFromVolume)(new _.Volume),a=(e=o((function(){var e,o;return s(this,(function(a){switch(a.label){case 0:return a.trys.push([0,2,,3]),[4,t()];case 1:return e=a.sent(),[3,3];case 2:throw o=a.sent(),n.warn("FAILED to load async filesystem for '".concat(r,"' - ").concat(o)),o;case 3:return(0,f.default)({data:e,fs:i,directory:r}),[2]}}))})),function(){return e.apply(this,arguments)}),u=a();return i.waitUntilLoaded=function(){return u},i}(t.getData,t.mountpoint);if("zipfile"==t.type)throw Error("you must convert zipfile -- read ".concat(t.zipfile," into memory"));if("zipurl"==t.type)throw Error("you must convert zipurl -- read ".concat(t.zipurl," into memory"));if("native"==t.type)return null==e?e:function(t){var e,r=function(e){var r=0;for(var n in _.fs.constants)n.startsWith("O_")&&e&_.fs.constants[n]&&(r|=t.constants[n]);return r},n=(e=o((function(e,n,i){return s(this,(function(o){switch(o.label){case 0:return[4,t.open(e,r(n),i)];case 1:return[2,o.sent()]}}))})),function(t,r,n){return e.apply(this,arguments)}),i=l(u({},t.promises),{open:function(){var e=o((function(e,r,n){return s(this,(function(i){switch(i.label){case 0:return[4,t.promises.open(e,r,n)];case 1:return[2,i.sent()]}}))}));return function(t,r,n){return e.apply(this,arguments)}}()});return l(u({},l(u({},t),{promises:i})),{open:n,openSync:function(e,n,i){return t.openSync(e,r(n),i)}})}(e);if("mem"==t.type)return E(t.contents);if("dev"==t.type)return function(){var t=_.Volume.fromJSON({"/dev/stdin":"","/dev/stdout":"","/dev/stderr":""});t.releasedFds=[0,1,2];var e=t.openSync("/dev/stderr","w"),r=t.openSync("/dev/stdout","w"),n=t.openSync("/dev/stdin","r");if(2!=e)throw Error("invalid handle for stderr: ".concat(e));if(1!=r)throw Error("invalid handle for stdout: ".concat(r));if(0!=n)throw Error("invalid handle for stdin: ".concat(n));return(0,_.createFsFromVolume)(t)}();throw Error("unknown spec type - ".concat(JSON.stringify(t)))}function E(t){var e=null!=t?_.Volume.fromJSON(t):new _.Volume;return(0,_.createFsFromVolume)(e)}e.createFileSystem=function(t,e){if(0==t.length)return E();var r;if(1==t.length)return null!==(r=S(t[0],e))&&void 0!==r?r:E();var n=new I.Union,i=[],a=!0,c=!1,f=void 0;try{for(var d,A=t[Symbol.iterator]();!(a=(d=A.next()).done);a=!0){var p=S(d.value,e);null!=p&&(n.use(p),null!=p.waitUntilLoaded&&i.push(p.waitUntilLoaded.bind(p)))}}catch(t){c=!0,f=t}finally{try{a||null==A.return||A.return()}finally{if(c)throw f}}var v,y=(v=o((function(){var t,e,r,n,o,a;return s(this,(function(u){switch(u.label){case 0:t=!0,e=!1,r=void 0,u.label=1;case 1:u.trys.push([1,6,7,8]),n=i[Symbol.iterator](),u.label=2;case 2:return(t=(o=n.next()).done)?[3,5]:[4,(0,o.value)()];case 3:u.sent(),u.label=4;case 4:return t=!0,[3,2];case 5:return[3,8];case 6:return a=u.sent(),e=!0,r=a,[3,8];case 7:try{t||null==n.return||n.return()}finally{if(e)throw r}return[7];case 8:return[2]}}))})),function(){return v.apply(this,arguments)});return l(u({},n),{constants:_.fs.constants,waitUntilLoaded:y})}},7480:function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(e,r);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,n,i)}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&n(e,t,r);return i(e,t),e},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.constants=e.createFileSystem=void 0;var u=a(r(7916));e.default=u.default;var l=r(1105);Object.defineProperty(e,"createFileSystem",{enumerable:!0,get:function(){return l.createFileSystem}});var s=o(r(4686));e.constants=s},5781:(t,e)=>{"use strict";function r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function o(t,e,r){return o=i()?Reflect.construct:function(t,e,r){var n=[null];n.push.apply(n,e);var i=new(Function.bind.apply(t,n));return r&&s(i,r.prototype),i},o.apply(null,arguments)}function a(t){return a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},a(t)}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}function l(t,e){return!e||"object"!==c(e)&&"function"!=typeof e?r(t):e}function s(t,e){return s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},s(t,e)}var c=function(t){return t&&"undefined"!=typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};function f(t){var e="function"==typeof Map?new Map:void 0;return f=function(t){if(null===t||(r=t,-1===Function.toString.call(r).indexOf("[native code]")))return t;var r;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return o(t,arguments,a(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s(n,t)},f(t)}function _(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=a(t);if(e){var i=a(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return l(this,r)}}Object.defineProperty(e,"__esModule",{value:!0}),e.WASIKillError=e.WASIExitError=e.WASIError=void 0;var I=function(t){u(i,t);var e=_(i);function i(t){var o;return n(this,i),(o=e.call(this)).errno=t,Object.setPrototypeOf(r(o),i.prototype),o}return i}(f(Error));e.WASIError=I;var S=function(t){u(i,t);var e=_(i);function i(t){var o;return n(this,i),(o=e.call(this,"WASI Exit error: ".concat(t))).code=t,Object.setPrototypeOf(r(o),i.prototype),o}return i}(f(Error));e.WASIExitError=S;var E=function(t){u(i,t);var e=_(i);function i(t){var o;return n(this,i),(o=e.call(this,"WASI Kill signal: ".concat(t))).signal=t,Object.setPrototypeOf(r(o),i.prototype),o}return i}(f(Error));e.WASIKillError=E},8724:(t,e,r)=>{"use strict";function n(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function i(t,e){return null!=e&&"undefined"!=typeof Symbol&&e[Symbol.hasInstance]?!!e[Symbol.hasInstance](t):t instanceof e}Object.defineProperty(e,"__esModule",{value:!0});var o=r(7554),a=r(845);e.default=function(t){var e=t.data,r=t.fs,u=t.directory;if(i(e,ArrayBuffer)&&(e=new Uint8Array(e)),!i(e,Uint8Array))throw Error("impossible");var l,s,c=(0,a.unzipSync)(e),f=!0,_=!1,I=void 0;try{for(var S,E=Object.entries(c)[Symbol.iterator]();!(f=(S=E.next()).done);f=!0){var d=(l=S.value,s=2,function(t){if(Array.isArray(t))return t}(l)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,o=[],a=!0,u=!1;try{for(r=r.call(t);!(a=(n=r.next()).done)&&(o.push(n.value),!e||o.length!==e);a=!0);}catch(t){u=!0,i=t}finally{try{a||null==r.return||r.return()}finally{if(u)throw i}}return o}}(l,s)||function(t,e){if(t){if("string"==typeof t)return n(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(r):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(t,e):void 0}}(l,s)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),A=d[0],p=d[1],v=(0,o.join)(u,A);r.mkdirSync((0,o.dirname)(v),{recursive:!0}),r.writeFileSync(v,p)}}catch(t){_=!0,I=t}finally{try{f||null==E.return||E.return()}finally{if(_)throw I}}}},7916:function(t,e,r){"use strict";var n=r(2372).Buffer,i=r(4229);function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function u(t,e){return null!=e&&"undefined"!=typeof Symbol&&e[Symbol.hasInstance]?!!e[Symbol.hasInstance](t):t instanceof e}function l(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,o=[],a=!0,u=!1;try{for(r=r.call(t);!(a=(n=r.next()).done)&&(o.push(n.value),!e||o.length!==e);a=!0);}catch(t){u=!0,i=t}finally{try{a||null==r.return||r.return()}finally{if(u)throw i}}return o}}(t,e)||c(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(t){return function(t){if(Array.isArray(t))return o(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||c(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(t,e){if(t){if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(r):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(t,e):void 0}}var f=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var _=f(r(2681)),I=(0,_.default)("wasi"),S=(0,_.default)("wasi:open"),E=r(5781),d=f(r(2095)),A=r(4686),p=A.WASI_RIGHT_FD_DATASYNC|A.WASI_RIGHT_FD_READ|A.WASI_RIGHT_FD_SYNC|A.WASI_RIGHT_FD_ADVISE|A.WASI_RIGHT_FD_FILESTAT_GET|A.WASI_RIGHT_POLL_FD_READWRITE,v=A.WASI_RIGHT_FD_DATASYNC|A.WASI_RIGHT_FD_WRITE|A.WASI_RIGHT_FD_SYNC|A.WASI_RIGHT_FD_ADVISE|A.WASI_RIGHT_FD_FILESTAT_GET|A.WASI_RIGHT_POLL_FD_READWRITE,y=v,T=function(t){var e=Math.trunc(t),r=BigInt(Math.round(1e6*(t-e)));return BigInt(e)*BigInt(1e6)+r},m=function(t){"number"==typeof t&&(t=Math.trunc(t));var e=BigInt(t);return Number(e/BigInt(1e6))},h=function(t){return function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];try{return t.apply(void 0,s(r))}catch(t){for(var i=t;null!=i.prev;)i=i.prev;if((null==i?void 0:i.code)&&"string"==typeof(null==i?void 0:i.code))return A.ERROR_MAP[i.code]||A.WASI_EINVAL;if(u(i,E.WASIError))return i.errno;throw i}}},g=function(t,e){var r=t.FD_MAP.get(e);if(!r)throw new E.WASIError(A.WASI_EBADF);if(void 0===r.filetype){var n=t.bindings.fs.fstatSync(r.real),i=W(t,e,n),o=i.filetype,a=i.rightsBase,u=i.rightsInheriting;r.filetype=o,r.rights||(r.rights={base:a,inheriting:u})}return r},W=function(t,e,r){switch(!0){case r.isBlockDevice():return{filetype:A.WASI_FILETYPE_BLOCK_DEVICE,rightsBase:A.RIGHTS_BLOCK_DEVICE_BASE,rightsInheriting:A.RIGHTS_BLOCK_DEVICE_INHERITING};case r.isCharacterDevice():var n=A.WASI_FILETYPE_CHARACTER_DEVICE;return void 0!==e&&t.bindings.isTTY(e)?{filetype:n,rightsBase:A.RIGHTS_TTY_BASE,rightsInheriting:A.RIGHTS_TTY_INHERITING}:{filetype:n,rightsBase:A.RIGHTS_CHARACTER_DEVICE_BASE,rightsInheriting:A.RIGHTS_CHARACTER_DEVICE_INHERITING};case r.isDirectory():return{filetype:A.WASI_FILETYPE_DIRECTORY,rightsBase:A.RIGHTS_DIRECTORY_BASE,rightsInheriting:A.RIGHTS_DIRECTORY_INHERITING};case r.isFIFO():return{filetype:A.WASI_FILETYPE_SOCKET_STREAM,rightsBase:A.RIGHTS_SOCKET_BASE,rightsInheriting:A.RIGHTS_SOCKET_INHERITING};case r.isFile():return{filetype:A.WASI_FILETYPE_REGULAR_FILE,rightsBase:A.RIGHTS_REGULAR_FILE_BASE,rightsInheriting:A.RIGHTS_REGULAR_FILE_INHERITING};case r.isSocket():return{filetype:A.WASI_FILETYPE_SOCKET_STREAM,rightsBase:A.RIGHTS_SOCKET_BASE,rightsInheriting:A.RIGHTS_SOCKET_INHERITING};case r.isSymbolicLink():return{filetype:A.WASI_FILETYPE_SYMBOLIC_LINK,rightsBase:BigInt(0),rightsInheriting:BigInt(0)};default:return{filetype:A.WASI_FILETYPE_UNKNOWN,rightsBase:BigInt(0),rightsInheriting:BigInt(0)}}},O=function(){function t(e){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.env={},this.sleep=e.sleep,this.getStdin=e.getStdin,this.sendStdout=e.sendStdout,this.sendStderr=e.sendStderr;var i={};e.preopens&&(i=e.preopens),e&&e.env&&(this.env=e.env);var o=[];e&&e.args&&(o=e.args);var a=e.bindings;this.memory=void 0,this.view=void 0,this.bindings=a,this.FD_MAP=new Map([[A.WASI_STDIN_FILENO,{real:0,filetype:A.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:p,inheriting:BigInt(0)},path:"/dev/stdin"}],[A.WASI_STDOUT_FILENO,{real:1,filetype:A.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:v,inheriting:BigInt(0)},path:"/dev/stdout"}],[A.WASI_STDERR_FILENO,{real:2,filetype:A.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:y,inheriting:BigInt(0)},path:"/dev/stderr"}]]);var u=this.bindings.fs,c=this.bindings.path,f=!0,_=!1,O=void 0;try{for(var b,R=Object.entries(i)[Symbol.iterator]();!(f=(b=R.next()).done);f=!0){var w=l(b.value,2),D=w[0],N=w[1],P=u.openSync(N,u.constants.O_RDONLY),L=this.getUnusedFileDescriptor();this.FD_MAP.set(L,{real:P,filetype:A.WASI_FILETYPE_DIRECTORY,rights:{base:A.RIGHTS_DIRECTORY_BASE,inheriting:A.RIGHTS_DIRECTORY_INHERITING},fakePath:D,path:N})}}catch(t){_=!0,O=t}finally{try{f||null==R.return||R.return()}finally{if(_)throw O}}var F=function(t,e){return r.refreshMemory(),Array.from({length:e},(function(e,n){var i=t+8*n,o=r.view.getUint32(i,!0),a=r.view.getUint32(i+4,!0),u=new Uint8Array(r.memory.buffer,o,a);return(0,d.default)(u)}))},C=function(t,e){var n=g(r,t);if(e!==BigInt(0)&&(n.rights.base&e)===BigInt(0))throw new E.WASIError(A.WASI_EPERM);return n},G=a.hrtime(),H=function(t){switch(t){case A.WASI_CLOCK_MONOTONIC:return a.hrtime();case A.WASI_CLOCK_REALTIME:return T(Date.now());case A.WASI_CLOCK_PROCESS_CPUTIME_ID:case A.WASI_CLOCK_THREAD_CPUTIME_ID:return a.hrtime()-G;default:return null}};this.wasiImport={args_get:function(t,e){r.refreshMemory();var i=t,a=e;return o.forEach((function(t){r.view.setUint32(i,a,!0),i+=4,a+=n.from(r.memory.buffer).write("".concat(t,"\0"),a)})),A.WASI_ESUCCESS},args_sizes_get:function(t,e){r.refreshMemory(),r.view.setUint32(t,o.length,!0);var i=o.reduce((function(t,e){return t+n.byteLength(e)+1}),0);return r.view.setUint32(e,i,!0),A.WASI_ESUCCESS},environ_get:function(t,e){r.refreshMemory();var i=t,o=e;return Object.entries(r.env).forEach((function(t){var e=l(t,2),a=e[0],u=e[1];r.view.setUint32(i,o,!0),i+=4,o+=n.from(r.memory.buffer).write("".concat(a,"=").concat(u,"\0"),o)})),A.WASI_ESUCCESS},environ_sizes_get:function(t,e){r.refreshMemory();var i=Object.entries(r.env).map((function(t){var e=l(t,2),r=e[0],n=e[1];return"".concat(r,"=").concat(n,"\0")})),o=i.reduce((function(t,e){return t+n.byteLength(e)}),0);return r.view.setUint32(t,i.length,!0),r.view.setUint32(e,o,!0),A.WASI_ESUCCESS},clock_res_get:function(t,e){var n;switch(t){case A.WASI_CLOCK_MONOTONIC:case A.WASI_CLOCK_PROCESS_CPUTIME_ID:case A.WASI_CLOCK_THREAD_CPUTIME_ID:n=BigInt(1);break;case A.WASI_CLOCK_REALTIME:n=BigInt(1e3)}if(!n)throw Error("invalid clockId");return r.view.setBigUint64(e,n),A.WASI_ESUCCESS},clock_time_get:function(t,e,n){r.refreshMemory();var i=H(t);return null===i?A.WASI_EINVAL:(r.view.setBigUint64(n,BigInt(i),!0),A.WASI_ESUCCESS)},fd_advise:h((function(t,e,r,n){return C(t,A.WASI_RIGHT_FD_ADVISE),A.WASI_ENOSYS})),fd_allocate:h((function(t,e,r){return C(t,A.WASI_RIGHT_FD_ALLOCATE),A.WASI_ENOSYS})),fd_close:h((function(t){var e=C(t,BigInt(0));return u.closeSync(e.real),r.FD_MAP.delete(t),A.WASI_ESUCCESS})),fd_datasync:h((function(t){var e=C(t,A.WASI_RIGHT_FD_DATASYNC);return u.fdatasyncSync(e.real),A.WASI_ESUCCESS})),fd_fdstat_get:h((function(t,e){var n=C(t,BigInt(0));if(r.refreshMemory(),null==n.filetype)throw Error("stats.filetype must be set");return r.view.setUint8(e,n.filetype),r.view.setUint16(e+2,0,!0),r.view.setUint16(e+4,0,!0),r.view.setBigUint64(e+8,BigInt(n.rights.base),!0),r.view.setBigUint64(e+8+8,BigInt(n.rights.inheriting),!0),A.WASI_ESUCCESS})),fd_fdstat_set_flags:h((function(t,e){return C(t,A.WASI_RIGHT_FD_FDSTAT_SET_FLAGS),A.WASI_ENOSYS})),fd_fdstat_set_rights:h((function(t,e,r){var n=C(t,BigInt(0));return(n.rights.base|e)>n.rights.base||(n.rights.inheriting|r)>n.rights.inheriting?A.WASI_EPERM:(n.rights.base=e,n.rights.inheriting=r,A.WASI_ESUCCESS)})),fd_filestat_get:h((function(t,e){var n=C(t,A.WASI_RIGHT_FD_FILESTAT_GET),i=u.fstatSync(n.real);if(r.refreshMemory(),r.view.setBigUint64(e,BigInt(i.dev),!0),e+=8,r.view.setBigUint64(e,BigInt(i.ino),!0),e+=8,null==n.filetype)throw Error("stats.filetype must be set");return r.view.setUint8(e,n.filetype),e+=8,r.view.setBigUint64(e,BigInt(i.nlink),!0),e+=8,r.view.setBigUint64(e,BigInt(i.size),!0),e+=8,r.view.setBigUint64(e,T(i.atimeMs),!0),e+=8,r.view.setBigUint64(e,T(i.mtimeMs),!0),e+=8,r.view.setBigUint64(e,T(i.ctimeMs),!0),A.WASI_ESUCCESS})),fd_filestat_set_size:h((function(t,e){var r=C(t,A.WASI_RIGHT_FD_FILESTAT_SET_SIZE);return u.ftruncateSync(r.real,Number(e)),A.WASI_ESUCCESS})),fd_filestat_set_times:h((function(t,e,r,n){var i=C(t,A.WASI_RIGHT_FD_FILESTAT_SET_TIMES),o=u.fstatSync(i.real),a=o.atime,l=o.mtime,s=m(H(A.WASI_CLOCK_REALTIME)),c=A.WASI_FILESTAT_SET_ATIM|A.WASI_FILESTAT_SET_ATIM_NOW;if((n&c)===c)return A.WASI_EINVAL;var f=A.WASI_FILESTAT_SET_MTIM|A.WASI_FILESTAT_SET_MTIM_NOW;return(n&f)===f?A.WASI_EINVAL:((n&A.WASI_FILESTAT_SET_ATIM)===A.WASI_FILESTAT_SET_ATIM?a=m(e):(n&A.WASI_FILESTAT_SET_ATIM_NOW)===A.WASI_FILESTAT_SET_ATIM_NOW&&(a=s),(n&A.WASI_FILESTAT_SET_MTIM)===A.WASI_FILESTAT_SET_MTIM?l=m(r):(n&A.WASI_FILESTAT_SET_MTIM_NOW)===A.WASI_FILESTAT_SET_MTIM_NOW&&(l=s),u.futimesSync(i.real,new Date(a),new Date(l)),A.WASI_ESUCCESS)})),fd_prestat_get:h((function(t,e){var i,o,a=C(t,BigInt(0));return r.refreshMemory(),r.view.setUint8(e,A.WASI_PREOPENTYPE_DIR),r.view.setUint32(e+4,n.byteLength(null!==(o=null!==(i=a.fakePath)&&void 0!==i?i:a.path)&&void 0!==o?o:""),!0),A.WASI_ESUCCESS})),fd_prestat_dir_name:h((function(t,e,i){var o,a,u=C(t,BigInt(0));return r.refreshMemory(),n.from(r.memory.buffer).write(null!==(a=null!==(o=u.fakePath)&&void 0!==o?o:u.path)&&void 0!==a?a:"",e,i,"utf8"),A.WASI_ESUCCESS})),fd_pwrite:h((function(t,e,n,i,o){var a=C(t,A.WASI_RIGHT_FD_WRITE|A.WASI_RIGHT_FD_SEEK),l=0;return F(e,n).forEach((function(t){for(var e=0;e<t.byteLength;)e+=u.writeSync(a.real,t,e,t.byteLength-e,Number(i)+l+e);l+=e})),r.view.setUint32(o,l,!0),A.WASI_ESUCCESS})),fd_write:h((function(t,e,n,i){var o=C(t,A.WASI_RIGHT_FD_WRITE),a=1==o.real,l=2==o.real,s=0;return F(e,n).forEach((function(t){if(0!=t.byteLength)if(a&&null!=r.sendStdout)r.sendStdout(t),s+=t.byteLength;else if(l&&null!=r.sendStderr)r.sendStderr(t),s+=t.byteLength;else{for(var e=0;e<t.byteLength;){var n=u.writeSync(o.real,t,e,t.byteLength-e,o.offset?Number(o.offset):null);o.offset&&(o.offset+=BigInt(n)),e+=n}s+=e}})),r.view.setUint32(i,s,!0),A.WASI_ESUCCESS})),fd_pread:h((function(t,e,n,i,o){var a=C(t,A.WASI_RIGHT_FD_READ|A.WASI_RIGHT_FD_SEEK),l=0,s=!0,c=!1,f=void 0;try{t:for(var _,I=F(e,n)[Symbol.iterator]();!(s=(_=I.next()).done);s=!0){for(var S=_.value,E=0;E<S.byteLength;){var d=S.byteLength-E,p=u.readSync(a.real,S,E,S.byteLength-E,Number(i)+l+E);if(E+=p,l+=p,0===p||p<d)break t}l+=E}}catch(t){c=!0,f=t}finally{try{s||null==I.return||I.return()}finally{if(c)throw f}}return r.view.setUint32(o,l,!0),A.WASI_ESUCCESS})),fd_read:h((function(t,e,n,i){var o=C(t,A.WASI_RIGHT_FD_READ),a=0===o.real,l=0,s=!0,c=!1,f=void 0;try{t:for(var _,I=F(e,n)[Symbol.iterator]();!(s=(_=I.next()).done);s=!0)for(var S=_.value,E=0;E<S.byteLength;){var d=S.byteLength-E,p=a||void 0===o.offset?null:Number(o.offset),v=0;if(a&&null!=r.getStdin?null!=r.stdinBuffer&&((v=r.stdinBuffer.copy(S))==r.stdinBuffer.length?r.stdinBuffer=void 0:r.stdinBuffer=r.stdinBuffer.slice(v)):v=u.readSync(o.real,S,E,d,p),o.filetype==A.WASI_FILETYPE_REGULAR_FILE&&(o.offset=(o.offset?o.offset:BigInt(0))+BigInt(v)),E+=v,l+=v,0===v||v<d)break t}}catch(t){c=!0,f=t}finally{try{s||null==I.return||I.return()}finally{if(c)throw f}}return r.view.setUint32(i,l,!0),A.WASI_ESUCCESS})),fd_readdir:h((function(t,e,i,o,a){var l=C(t,A.WASI_RIGHT_FD_READDIR);r.refreshMemory();for(var s=u.readdirSync(l.path,{withFileTypes:!0}),f=e,_=Number(o);_<s.length;_+=1){var I=s[_],S=n.byteLength(I.name);if(e-f>i)break;if(r.view.setBigUint64(e,BigInt(_+1),!0),(e+=8)-f>i)break;var E=u.lstatSync(c.resolve(l.path,I.name));if(r.view.setBigUint64(e,BigInt(E.ino),!0),(e+=8)-f>i)break;if(r.view.setUint32(e,S,!0),(e+=4)-f>i)break;var d=void 0;switch(!0){case E.isBlockDevice():d=A.WASI_FILETYPE_BLOCK_DEVICE;break;case E.isCharacterDevice():d=A.WASI_FILETYPE_CHARACTER_DEVICE;break;case E.isDirectory():d=A.WASI_FILETYPE_DIRECTORY;break;case E.isFIFO():d=A.WASI_FILETYPE_SOCKET_STREAM;break;case E.isFile():d=A.WASI_FILETYPE_REGULAR_FILE;break;case E.isSocket():d=A.WASI_FILETYPE_SOCKET_STREAM;break;case E.isSymbolicLink():d=A.WASI_FILETYPE_SYMBOLIC_LINK;break;default:d=A.WASI_FILETYPE_UNKNOWN}if(r.view.setUint8(e,d),e+=1,(e+=3)+S>=f+i)break;n.from(r.memory.buffer).write(I.name,e),e+=S}var p=e-f;return r.view.setUint32(a,Math.min(p,i),!0),A.WASI_ESUCCESS})),fd_renumber:h((function(t,e){return C(t,BigInt(0)),C(e,BigInt(0)),u.closeSync(r.FD_MAP.get(t).real),r.FD_MAP.set(t,r.FD_MAP.get(e)),r.FD_MAP.delete(e),A.WASI_ESUCCESS})),fd_seek:h((function(t,e,n,i){var o=C(t,A.WASI_RIGHT_FD_SEEK);switch(r.refreshMemory(),n){case A.WASI_WHENCE_CUR:o.offset=(o.offset?o.offset:BigInt(0))+BigInt(e);break;case A.WASI_WHENCE_END:var a=u.fstatSync(o.real).size;o.offset=BigInt(a)+BigInt(e);break;case A.WASI_WHENCE_SET:o.offset=BigInt(e)}if(null==o.offset)throw Error("stats.offset must be defined");return r.view.setBigUint64(i,o.offset,!0),A.WASI_ESUCCESS})),fd_tell:h((function(t,e){var n=C(t,A.WASI_RIGHT_FD_TELL);return r.refreshMemory(),n.offset||(n.offset=BigInt(0)),r.view.setBigUint64(e,n.offset,!0),A.WASI_ESUCCESS})),fd_sync:h((function(t){var e=C(t,A.WASI_RIGHT_FD_SYNC);return u.fsyncSync(e.real),A.WASI_ESUCCESS})),path_create_directory:h((function(t,e,i){var o=C(t,A.WASI_RIGHT_PATH_CREATE_DIRECTORY);if(!o.path)return A.WASI_EINVAL;r.refreshMemory();var a=n.from(r.memory.buffer,e,i).toString();return u.mkdirSync(c.resolve(o.path,a)),A.WASI_ESUCCESS})),path_filestat_get:h((function(t,e,i,o,a){var l=C(t,A.WASI_RIGHT_PATH_FILESTAT_GET);if(!l.path)return A.WASI_EINVAL;r.refreshMemory();var s,f=n.from(r.memory.buffer,i,o).toString();return s=e?u.statSync(c.resolve(l.path,f)):u.lstatSync(c.resolve(l.path,f)),r.view.setBigUint64(a,BigInt(s.dev),!0),a+=8,r.view.setBigUint64(a,BigInt(s.ino),!0),a+=8,r.view.setUint8(a,W(r,void 0,s).filetype),a+=8,r.view.setBigUint64(a,BigInt(s.nlink),!0),a+=8,r.view.setBigUint64(a,BigInt(s.size),!0),a+=8,r.view.setBigUint64(a,T(s.atimeMs),!0),a+=8,r.view.setBigUint64(a,T(s.mtimeMs),!0),a+=8,r.view.setBigUint64(a,T(s.ctimeMs),!0),A.WASI_ESUCCESS})),path_filestat_set_times:h((function(t,e,i,o,a,l,s){var f=C(t,A.WASI_RIGHT_PATH_FILESTAT_SET_TIMES);if(!f.path)return A.WASI_EINVAL;r.refreshMemory();var _=u.fstatSync(f.real),I=_.atime,S=_.mtime,E=m(H(A.WASI_CLOCK_REALTIME)),d=A.WASI_FILESTAT_SET_ATIM|A.WASI_FILESTAT_SET_ATIM_NOW;if((s&d)===d)return A.WASI_EINVAL;var p=A.WASI_FILESTAT_SET_MTIM|A.WASI_FILESTAT_SET_MTIM_NOW;if((s&p)===p)return A.WASI_EINVAL;(s&A.WASI_FILESTAT_SET_ATIM)===A.WASI_FILESTAT_SET_ATIM?I=m(a):(s&A.WASI_FILESTAT_SET_ATIM_NOW)===A.WASI_FILESTAT_SET_ATIM_NOW&&(I=E),(s&A.WASI_FILESTAT_SET_MTIM)===A.WASI_FILESTAT_SET_MTIM?S=m(l):(s&A.WASI_FILESTAT_SET_MTIM_NOW)===A.WASI_FILESTAT_SET_MTIM_NOW&&(S=E);var v=n.from(r.memory.buffer,i,o).toString();return u.utimesSync(c.resolve(f.path,v),new Date(I),new Date(S)),A.WASI_ESUCCESS})),path_link:h((function(t,e,i,o,a,l,s){var f=C(t,A.WASI_RIGHT_PATH_LINK_SOURCE),_=C(a,A.WASI_RIGHT_PATH_LINK_TARGET);if(!f.path||!_.path)return A.WASI_EINVAL;r.refreshMemory();var I=n.from(r.memory.buffer,i,o).toString(),S=n.from(r.memory.buffer,l,s).toString();return u.linkSync(c.resolve(f.path,I),c.resolve(_.path,S)),A.WASI_ESUCCESS})),path_open:h((function(t,e,i,o,a,l,s,f,_){var I=C(t,A.WASI_RIGHT_PATH_OPEN);l=BigInt(l),s=BigInt(s);var d,p=(l&(A.WASI_RIGHT_FD_READ|A.WASI_RIGHT_FD_READDIR))!==BigInt(0),v=(l&(A.WASI_RIGHT_FD_DATASYNC|A.WASI_RIGHT_FD_WRITE|A.WASI_RIGHT_FD_ALLOCATE|A.WASI_RIGHT_FD_FILESTAT_SET_SIZE))!==BigInt(0);v&&p?d=u.constants.O_RDWR:p?d=u.constants.O_RDONLY:v&&(d=u.constants.O_WRONLY);var y=l|A.WASI_RIGHT_PATH_OPEN,T=l|s;0!=(a&A.WASI_O_CREAT)&&(d|=u.constants.O_CREAT,y|=A.WASI_RIGHT_PATH_CREATE_FILE),0!=(a&A.WASI_O_DIRECTORY)&&(d|=u.constants.O_DIRECTORY),0!=(a&A.WASI_O_EXCL)&&(d|=u.constants.O_EXCL),0!=(a&A.WASI_O_TRUNC)&&(d|=u.constants.O_TRUNC,y|=A.WASI_RIGHT_PATH_FILESTAT_SET_SIZE),0!=(f&A.WASI_FDFLAG_APPEND)&&(d|=u.constants.O_APPEND),0!=(f&A.WASI_FDFLAG_DSYNC)&&(u.constants.O_DSYNC?d|=u.constants.O_DSYNC:d|=u.constants.O_SYNC,T|=A.WASI_RIGHT_FD_DATASYNC),0!=(f&A.WASI_FDFLAG_NONBLOCK)&&(d|=u.constants.O_NONBLOCK),0!=(f&A.WASI_FDFLAG_RSYNC)&&(u.constants.O_RSYNC?d|=u.constants.O_RSYNC:d|=u.constants.O_SYNC,T|=A.WASI_RIGHT_FD_SYNC),0!=(f&A.WASI_FDFLAG_SYNC)&&(d|=u.constants.O_SYNC,T|=A.WASI_RIGHT_FD_SYNC),v&&0==(d&(u.constants.O_APPEND|u.constants.O_TRUNC))&&(T|=A.WASI_RIGHT_FD_SEEK),r.refreshMemory();var m=n.from(r.memory.buffer,i,o).toString();if(S("path_open",m),m.startsWith("proc/"))throw new E.WASIError(A.WASI_EBADF);var h,W,O,b=c.resolve(I.path,m);if(c.relative(I.path,b).startsWith(".."))return A.WASI_ENOTCAPABLE;try{if(h=u.realpathSync(b),c.relative(I.path,h).startsWith(".."))return A.WASI_ENOTCAPABLE}catch(t){if("ENOENT"!==(null==t?void 0:t.code))throw t;h=b}try{W=u.statSync(h).isDirectory()}catch(t){}O=!v&&W?u.openSync(h,u.constants.O_RDONLY):u.openSync(h,d);var R=r.getUnusedFileDescriptor();return r.FD_MAP.set(R,{real:O,filetype:void 0,rights:{base:y,inheriting:T},path:h}),g(r,R),r.view.setUint32(_,R,!0),A.WASI_ESUCCESS})),path_readlink:h((function(t,e,i,o,a,l){var s=C(t,A.WASI_RIGHT_PATH_READLINK);if(!s.path)return A.WASI_EINVAL;r.refreshMemory();var f=n.from(r.memory.buffer,e,i).toString(),_=c.resolve(s.path,f),I=u.readlinkSync(_),S=n.from(r.memory.buffer).write(I,o,a);return r.view.setUint32(l,S,!0),A.WASI_ESUCCESS})),path_remove_directory:h((function(t,e,i){var o=C(t,A.WASI_RIGHT_PATH_REMOVE_DIRECTORY);if(!o.path)return A.WASI_EINVAL;r.refreshMemory();var a=n.from(r.memory.buffer,e,i).toString();return u.rmdirSync(c.resolve(o.path,a)),A.WASI_ESUCCESS})),path_rename:h((function(t,e,i,o,a,l){var s=C(t,A.WASI_RIGHT_PATH_RENAME_SOURCE),f=C(o,A.WASI_RIGHT_PATH_RENAME_TARGET);if(!s.path||!f.path)return A.WASI_EINVAL;r.refreshMemory();var _=n.from(r.memory.buffer,e,i).toString(),I=n.from(r.memory.buffer,a,l).toString();return u.renameSync(c.resolve(s.path,_),c.resolve(f.path,I)),A.WASI_ESUCCESS})),path_symlink:h((function(t,e,i,o,a){var l=C(i,A.WASI_RIGHT_PATH_SYMLINK);if(!l.path)return A.WASI_EINVAL;r.refreshMemory();var s=n.from(r.memory.buffer,t,e).toString(),f=n.from(r.memory.buffer,o,a).toString();return u.symlinkSync(s,c.resolve(l.path,f)),A.WASI_ESUCCESS})),path_unlink_file:h((function(t,e,i){var o=C(t,A.WASI_RIGHT_PATH_UNLINK_FILE);if(!o.path)return A.WASI_EINVAL;r.refreshMemory();var a=n.from(r.memory.buffer,e,i).toString();return u.unlinkSync(c.resolve(o.path,a)),A.WASI_ESUCCESS})),poll_oneoff:function(t,e,n,i){var o=0,u=BigInt(0),l=BigInt(a.hrtime());r.refreshMemory();for(var s=0;s<n;s+=1){var c=r.view.getBigUint64(t,!0);t+=8;var f=r.view.getUint8(t);switch(t+=1,f){case A.WASI_EVENTTYPE_CLOCK:t+=7;var _=r.view.getUint32(t,!0);t+=4,t+=4;var I=r.view.getBigUint64(t,!0);t+=8,t+=8;var S=r.view.getUint16(t,!0);t+=2,t+=6;var E=1===S,d=A.WASI_ESUCCESS,p=H(_);if(null==p)d=A.WASI_EINVAL;else{var v=(E?I:p+I)-p;v>u&&(u=v)}r.view.setBigUint64(e,c,!0),e+=8,r.view.setUint16(e,d,!0),e+=2,r.view.setUint8(e,A.WASI_EVENTTYPE_CLOCK),e+=1,e+=5,o+=1;break;case A.WASI_EVENTTYPE_FD_READ:case A.WASI_EVENTTYPE_FD_WRITE:t+=3,t+=4,r.view.setBigUint64(e,c,!0),e+=8,r.view.setUint16(e,A.WASI_ENOSYS,!0),e+=2,r.view.setUint8(e,f),e+=1,e+=5,o+=1,c==BigInt(0)&&A.WASI_EVENTTYPE_FD_READ==f&&null!=r.getStdin&&(r.stdinBuffer||(r.stdinBuffer=r.getStdin()));break;default:return A.WASI_EINVAL}}if(r.view.setUint32(i,o,!0),(u-=BigInt(a.hrtime())-l)>0)if(null!=r.sleep)r.sleep(m(u));else for(var y=BigInt(a.hrtime())+u;BigInt(a.hrtime())<y;);return A.WASI_ESUCCESS},proc_exit:function(t){return a.exit(t),A.WASI_ESUCCESS},proc_raise:function(t){return t in A.SIGNAL_MAP?(a.kill(A.SIGNAL_MAP[t]),A.WASI_ESUCCESS):A.WASI_EINVAL},random_get:function(t,e){return r.refreshMemory(),a.randomFillSync(new Uint8Array(r.memory.buffer),t,e),A.WASI_ESUCCESS},sched_yield:function(){return A.WASI_ESUCCESS},sock_recv:function(){return A.WASI_ENOSYS},sock_send:function(){return A.WASI_ENOSYS},sock_shutdown:function(){return A.WASI_ENOSYS}},I.enabled&&Object.keys(this.wasiImport).forEach((function(t){var e=r.wasiImport[t];r.wasiImport[t]=function(){for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];I(t,n);try{var o=e.apply(void 0,s(n));return I("result = ",o),o}catch(t){throw I("error: ",t),t}}}))}var e,r;return e=t,(r=[{key:"getUnusedFileDescriptor",value:function(){for(var t=3;this.FD_MAP.has(t);)t+=1;if(t>32768)throw Error("no available file descriptors");return t}},{key:"refreshMemory",value:function(){this.view&&0!==this.view.buffer.byteLength||(this.view=new DataView(this.memory.buffer))}},{key:"setMemory",value:function(t){this.memory=t}},{key:"start",value:function(t,e){var r=t.exports;if(null===r||"object"!=typeof r)throw new Error("instance.exports must be an Object. Received ".concat(r,"."));if(null==e&&!u(e=r.memory,WebAssembly.Memory))throw new Error("instance.exports.memory must be a WebAssembly.Memory. Recceived ".concat(e,"."));this.setMemory(e),r._start&&r._start()}},{key:"getImportNamespace",value:function(t){var e=null,r=!0,n=!1,i=void 0;try{for(var o,a=WebAssembly.Module.imports(t)[Symbol.iterator]();!(r=(o=a.next()).done);r=!0){var u=o.value;if("function"===u.kind&&u.module.startsWith("wasi_"))if(e){if(e!==u.module)throw new Error("Multiple namespaces detected.")}else e=u.module}}catch(t){n=!0,i=t}finally{try{r||null==a.return||a.return()}finally{if(n)throw i}}return e}},{key:"getImports",value:function(t){switch(this.getImportNamespace(t)){case"wasi_unstable":return{wasi_unstable:this.wasiImport};case"wasi_snapshot_preview1":return{wasi_snapshot_preview1:this.wasiImport};default:throw new Error("Can't detect a WASI namespace for the WebAssembly Module")}}},{key:"initWasiFdInfo",value:function(){if(null!=this.env.WASI_FD_INFO){var t=JSON.parse(this.env.WASI_FD_INFO);for(var e in t){i.log(e);var r=parseInt(e);if(!this.FD_MAP.has(r)){var n=t[e];try{this.bindings.fs.fstatSync(n)}catch(t){i.log("discarding ",{wasi_fd:e,real:n});continue}var o={real:n,filetype:A.WASI_FILETYPE_SOCKET_STREAM,rights:{base:p,inheriting:BigInt(0)}};this.FD_MAP.set(r,o)}}i.log("after initWasiFdInfo: ",this.FD_MAP),i.log("fdInfo = ",t)}else i.log("no WASI_FD_INFO")}}])&&a(e.prototype,r),t}();e.default=O},9862:()=>{},964:()=>{}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,