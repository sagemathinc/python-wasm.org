(()=>{var t,e,r={2963:function(t,e,r){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},n.apply(this,arguments)},i=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function a(t){try{s(n.next(t))}catch(t){o(t)}}function u(t){try{s(n.throw(t))}catch(t){o(t)}}function s(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,u)}s((n=n.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},a=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},u=this&&this.__spreadArray||function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var l=r(4503),_=s(r(7152)),c=s(r(7653)),f=s(r(1618)),I=(0,f.default)("dylink"),S=(0,f.default)("dylink:import"),E=1048576;e.default=function(t){var e=t.path,r=t.importObject,s=t.importWebAssembly,A=t.importWebAssemblySync,d=t.readFileSync,p=t.stub;return i(this,void 0,void 0,(function(){function t(t){I("symbolViaPointer",t);var e=H.exports["__WASM_EXPORT__".concat(t)];if(null!=e)return e()}function i(t){if(null!=H){var e=H.exports["__WASM_EXPORT__".concat(t)];if(null!=e){var r=e();if(I("functionViaPointer",t,r),null==O)throw Error("__indirect_function_table must be defined");return O.get(r)}}}function T(t,e){if(null==O)throw Error("__indirect_function_table must be defined");if(O.get(t))throw Error("setTable: attempt to overwrite existing function! ".concat(t));O.length<=t+50&&O.grow(50),O.set(t,e)}function v(t){var r,n,i;for(var o in C){var a=C[o],u=a.symToPtr,s=a.instance,l=null!==(r=u[t])&&void 0!==r?r:null===(i=(n=s.exports)["__WASM_EXPORT__".concat(t)])||void 0===i?void 0:i.call(n);if(null!=l){if(null==O)throw Error("__indirect_function_table must be defined");return I("functionFromOtherLibrary - got ",t," from ",e),O.get(l)}}}function h(t,e){var n;void 0===e&&(e="");var o=null===(n=null==r?void 0:r.env)||void 0===n?void 0:n[t];return null!=o?(I("getFunction ",t,"from env"),o):null!=(o=i(t))?(I("getFunction ",t,"from function pointer"),o):null!=(o=H.exports[t])?(I("getFunction ",t,"from mainInstance exports"),o):null!=(o=v(t))?(I("getFunction ",t,"from other library"),o):(e&&(0,f.default)("stub")(t,"undefined importing",e),F.env[t])}function y(t){return function(e,r){if(r in e)return Reflect.get(e,r);I("dlopenEnvHandler",r);var n=h(r,t);if(null!=n)return n;I("dlopenEnvHandler got null")}}function m(t,e){if(e in t)return Reflect.get(t,e);var r=t[e];if(!r){var n=new WebAssembly.Global({value:"i32",mutable:!0},0);b[e]=n,r=t[e]=n}return r}function g(t,e){if(e in t)return Reflect.get(t,e);var r=t[e];if(!r){var n=void 0,i=H.exports["__WASM_EXPORT__".concat(e)];null==i?(n=U,N[e]=n,U+=1):n=i(),I("GOTFuncHandler ",e,"--\x3e",n);var o=new WebAssembly.Global({value:"i32",mutable:!0},n);r=t[e]=o}return r}var W,R,O,w,b,N,D,L,G,C,F,P,H,M,U;return o(this,(function(o){switch(o.label){case 0:return null==r&&(r={}),null==(W=r.env)&&(W=r.env={}),null==(R=W.memory)&&(R=W.memory=new WebAssembly.Memory({initial:10})),null==(O=W.__indirect_function_table)&&(O=W.__indirect_function_table=new WebAssembly.Table({initial:1e3,element:"anyfunc"})),w={},b={},N={},D=new Proxy(w,{get:m}),L=new Proxy(w,{get:g}),G={},C={},W.dlopen=function(e,i){var o,s,c,f;if(null==R)throw Error("bug");var p=(0,l.recvString)(e,R);if(I("dlopen: path='%s'",p),null!=G[p])return G[p].handle;var v=new Uint8Array(d(p)),m=(0,_.default)(v);I("metadata",m);var g=Math.pow(2,null!==(o=m.memoryAlign)&&void 0!==o?o:0);g=Math.max(g,16);var W=h("malloc");if(null==W)throw Error("malloc from libc must be available in the  main instance");if(null==m.memorySize)throw Error("memorySize must be defined in the shared library");var w=W(m.memorySize+g);if(0==w)throw Error("malloc failed (you cannot use a stub for malloc)");var F=W(E);if(0==F)throw Error("malloc failed for stack");I("allocating %s bytes for shared library -- at ",m.memorySize+g,w);var P=m.memorySize?(0,l.alignMemory)(w,g):0,M=m.tableSize?U:0,B={memory:R,__indirect_function_table:O,__memory_base:P,__table_base:M,__stack_pointer:new WebAssembly.Global({value:"i32",mutable:!0},F+E)};I("env =",B);var x=n(n({},r),{env:new Proxy(B,{get:y(p)}),"GOT.mem":D,"GOT.func":L});if(U+=null!==(s=m.tableSize)&&void 0!==s?s:0,null==O)throw Error("__indirect_function_table must not be null");O.length<=U+50&&O.grow(50+U-O.length);var Y=0;S.enabled&&(Y=(new Date).valueOf(),S("importing ",p));var k=A(p,x);if(S.enabled&&S("imported ",p,", time =",(new Date).valueOf()-Y,"ms"),null==O)throw Error("bug");var K={};for(var V in k.exports)if(null==N[V]){var j=k.exports[V];null==K[V]&&"function"==typeof j&&(T(U,j),K[V]=U,U+=1)}for(var z in N){var X=null!==(c=k.exports[z])&&void 0!==c?c:H.exports[z];if(I("table[%s] = %s",N[z],z,X),null==X)throw Error("dlopen -- UNRESOLVED FUNCTION: ".concat(z));T(N[z],X),K[z]=N[z],delete N[z]}for(var z in b){var Z=b[z];delete b[z];var Q=null===(f=k.exports[z])||void 0===f?void 0:f.value;if(null==Q){var J=t(z);if(null==J)throw Error("dlopen -- UNRESOLVED SYMBOL: ".concat(z));Z.value=J}else Z.value=Q+P}null!=k.exports.__wasm_call_ctors&&(I("calling __wasm_call_ctors for dynamic library"),k.exports.__wasm_call_ctors()),null!=k.exports.__wasm_apply_data_relocs&&(I("calling __wasm_apply_data_relocs for dynamic library"),k.exports.__wasm_apply_data_relocs());var q=Math.max.apply(Math,u([0],a(Object.keys(C).map((function(t){return parseInt(t)}))),!1))+1,$={path:p,handle:q,instance:k,symToPtr:K};return G[p]=$,C[q]=$,q},W.dlsym=function(t,e){var r,n;if(null==R)throw Error("bug");var i=(0,l.recvString)(e,R);I("dlsym: handle=%s, symName='%s'",t,i);var o=C[t];if(null==o)throw Error("dlsym: invalid handle ".concat(t));var a=o.symToPtr[i];if(I("sym= ",i,", ptr = ",a),null!=a)return a;if(null!=(a=null===(n=(r=o.instance.exports)["__WASM_EXPORT__".concat(i)])||void 0===n?void 0:n.call(r)))return a;throw Error("dlsym: handle=".concat(t," - unknown symbol '").concat(i,"'"))},W.dlerror=function(){return 0},W.dlclose=function(t){return 0},F=p?n(n({},r),{env:(0,c.default)(r.env,i,p)}):r,P=0,S.enabled&&(P=(new Date).valueOf(),S("importing ",e)),null==s?[3,2]:[4,s(e,F)];case 1:return M=o.sent(),[3,3];case 2:M=A(e,F),o.label=3;case 3:return H=M,S.enabled&&S("imported ",e,", time =",(new Date).valueOf()-P,"ms"),null!=H.exports.__wasm_call_ctors&&H.exports.__wasm_call_ctors(),U=Math.max.apply(Math,u([0],a((0,l.nonzeroPositions)(O)),!1))+1,[2,H]}}))}))}},9168:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.MBtoPages=void 0;var i=n(r(2963));e.default=i.default;var o=r(4503);Object.defineProperty(e,"MBtoPages",{enumerable:!0,get:function(){return o.MBtoPages}})},7152:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e,n,i=0;function o(){for(var e=0,r=1;;){var n=t[i++];if(e+=(127&n)*r,r*=128,!(128&n))break}return e}function a(){var e=o();return function(t,e,n){for(var i=e+n,o=e;t[o]&&o<i;)o++;var a=t.slice(e,o);return r.decode(a)}(t,(i+=e)-e,e)}function u(t,e){if(t)throw new Error(e)}u(!(1836278016==new Uint32Array(new Uint8Array(t.subarray(0,24)).buffer)[0]),"need to see wasm magic number"),u(0!==t[8],"need the dylink section to be first"),i=9;var s=o();e=i+s,n=a();var l={neededDynlibs:[],tlsExports:new Set,weakImports:new Set};if(null==l.neededDynlibs)throw Error("bug: typescript");if(null==l.tlsExports)throw Error("bug: typescript");if(null==l.weakImports)throw Error("bug: typescript");if("dylink"==n){l.memorySize=o(),l.memoryAlign=o(),l.tableSize=o(),l.tableAlign=o();for(var _=o(),c=0;c<_;++c){var f=a();l.neededDynlibs.push(f)}}else for(u("dylink.0"!==n,"invalid format -- name must be dylink.0 or dylink");i<e;){var I=t[i++],S=o();if(1===I)l.memorySize=o(),l.memoryAlign=o(),l.tableSize=o(),l.tableAlign=o();else if(2===I)for(_=o(),c=0;c<_;++c)f=a(),l.neededDynlibs.push(f);else if(3===I)for(var E=o();E--;){var A=a();256&o()&&l.tlsExports.add(A)}else if(4===I)for(E=o();E--;)a(),A=a(),1==(3&o())&&l.weakImports.add(A);else i+=S}return l};var r=new TextDecoder},7653:function(t,e,r){"use strict";var n=r(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=i(r(1618)),a=(0,o.default)("stub"),u=(0,o.default)("stub:use"),s=(0,o.default)("stub:first");e.default=function(t,e,r){return new Proxy(t,{get:function(t,i){if(i in t)return Reflect.get(t,i);var o=e(i);return null!=o?(a("using function via pointer for ",i),o):("warn"==r&&n.warn("\n* WARNING: creating UNSAFE stub for ".concat(String(i),".  Please fix ASAP!")),u.enabled||s.enabled?function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return _(i,t),0}:function(){return 0})}})};var l=new Set([]);function _(t,e){if(u("WARNING: using stub",t,e),s.enabled){if(l.has(t))return;l.add(t)}s("WARNING: first use of stub",t,e)}},4503:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MBtoPages=e.alignMemory=e.strlen=e.recvString=e.nonzeroPositions=void 0,e.nonzeroPositions=function(t){for(var e=[],r=0;r<t.length;r++)null!=t.get(r)&&e.push(r);return e};var r=new TextDecoder;function n(t,e){for(var r=new Uint8Array(e.buffer),n=t;r[n];)n+=1;return n-t}e.recvString=function(t,e){var i=n(t,e),o=e.buffer.slice(t,t+i);return r.decode(o)},e.strlen=n,e.alignMemory=function(t,e){return Math.ceil(t/e)*e},e.MBtoPages=function(t){return 16*t}},9171:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initConstants=void 0;var r={};e.default=r,e.initConstants=function(t){for(var e=function(t,e){var r=t.callFunction,n=t.recv,i=r("getConstants");if(0==i)throw Error("unable to receive JSON object");return JSON.parse(n.string(i))}(t),n=e.names,i=e.values,o=0;o<n.length;o++)r[n[o]]=i[o]}},4121:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(r(9171));e.default=function(t){var e=i.default[t];return Error("Error ".concat(t,"  (errno=").concat(e,")."))}},8294:function(t,e,r){"use strict";var n=r(4155),i=this&&this.__assign||function(){return i=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},i.apply(this,arguments)},o=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},a=this&&this.__spreadArray||function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=u(r(987)),l=u(r(3349)),_=u(r(1017)),c=u(r(1930)),f=u(r(4509)),I=u(r(7793)),S=u(r(580)),E=u(r(406)),A=u(r(4603)),d=u(r(3498)),p=u(r(4325)),T=r(9171),v=u(r(9171)),h=u(r(2508)),y=(0,h.default)("posix:not-implemented"),m=(0,h.default)("posix:call"),g=(0,h.default)("posix:return");n.env.__STUPID_HACK__="",e.default=function(t){var e=i(i(i(i(i(i(i(i(i(i(i({},(0,s.default)(t)),(0,l.default)(t)),(0,_.default)(t)),(0,c.default)(t)),(0,f.default)(t)),(0,E.default)(t)),(0,S.default)(t)),(0,d.default)(t)),(0,A.default)(t)),(0,p.default)(t)),(0,I.default)(t)),r={},n={};if(null!=t.posix.constants)for(var u in t.posix.constants)n[t.posix.constants[u]]=u;function h(e){var r=n[e];if(null!=r){var i=v.default[r];if(null!=i)return void t.callFunction("setErrno",i)}y("Unable to map nativeErrno (please update code)",e)}var W=function(n){r[n]=function(){for(var r,i=[],u=0;u<arguments.length;u++)i[u]=arguments[u];try{m(n,i);var s=e[n].apply(e,a([],o(i),!1));return g(n,s),s}catch(e){return null!=e.code?h(parseInt(e.code)):"NotImplementedError"==e.name?t.callFunction("setErrno",v.default.ENOSYS):y("Posix library raised exception without error code",e),null!==(r=e.ret)&&void 0!==r?r:-1}}};for(var R in e)W(R);return r.init=function(){(0,T.initConstants)(t)},r}},987:function(t,e,r){"use strict";var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=r(9063),a=i(r(9171));function u(t,e){if(0==e)return e;if(e==t.constants.AF_INET)return a.default.AF_INET;if(e==t.constants.AF_INET6)return a.default.AF_INET6;throw Error("unsupported native address family: ".concat(e))}e.default=function(t){var e,r,i=t.memory,s=t.posix,l=t.callFunction,_=t.recv,c=t.send,f=t.free,I={},S=function(t){I[t]=function(){return(0,o.notImplemented)(t)}};try{for(var E=n(" getprotobyname getservbyname getservbyport getnameinfo getpeername".split(/\s+/)),A=E.next();!A.done;A=E.next())S(A.value)}catch(t){e={error:t}}finally{try{A&&!A.done&&(r=E.return)&&r.call(E)}finally{if(e)throw e.error}}function d(t,e,r){var n=c.malloc(2+e),o=new DataView(i.buffer);o.setUint16(n,t,!0);for(var a=0;a<e;a++)o.setUint8(n+2+a,r[a]);return n}function p(t,e){new DataView(i.buffer).setUint32(t,e,!0)}function T(t){var e=c.malloc(4*(t.length+1));if(0==e)throw Error("out of memory");for(var r=0;r<t.length;r++)p(e+4*r,c.string(t[r]));return p(e+4*t.length,0),e}function v(t){var e=u(s,t.h_addrtype);return l("sendHostent",c.string(t.h_name),T(t.h_aliases),e,t.h_length,T(t.h_addr_list),t.h_addr_list.length)}I.gethostbyname=function(t){try{null==s.gethostbyname&&(0,o.notImplemented)("gethostbyaddr",0);var e=_.string(t);return v(s.gethostbyname(e))}catch(t){throw t.ret=0,t}},I.gethostbyaddr=function(t,e,r){try{null==s.gethostbyaddr&&(0,o.notImplemented)("gethostbyaddr",0);var n=l("recvAddr",t,r);if(0==n)return 0;var i=_.string(n);return f(n),v(s.gethostbyaddr(i))}catch(t){throw t.ret=0,t}},I.getaddrinfo=function(t,e,r,n){if(null==s.getaddrinfo)return(0,o.notImplemented)("getaddrinfo"),-1;var f,I=_.string(t),S=_.string(e),E=function(t){var e=new DataView(i.buffer),r=e.getUint32(t,!0);t+=4;var n=function(t,e){if(0==e)return e;if(e==a.default.AF_INET)return t.constants.AF_INET;if(e==a.default.AF_INET6)return t.constants.AF_INET6;throw Error("unsupported WASM address family: ".concat(e))}(s,e.getUint32(t,!0));t+=4;var o=e.getUint32(t,!0);return t+=4,{flags:r,family:n,socktype:o,protocol:e.getUint32(t,!0)}}(r);try{f=s.getaddrinfo(I,S,E)}catch(t){if(t.code)return parseInt(t.code);throw t}for(var A=0,T=0,v=f.length-1;v>=0;){var h=f[v];h.ai_family=h.sa_family=u(s,h.ai_family);var y=d(h.sa_family,h.ai_addrlen,h.sa_data);if(!y)throw Error("error creating sockaddr");if(!(T=l("sendAddrinfo",h.ai_flags,h.ai_family,h.ai_socktype,h.ai_protocol,h.ai_addrlen,y,null!=h.ai_canonname?c.string(h.ai_canonname):0,A)))throw Error("error creating addrinfo structure");A=T,v-=1}if(!T)throw Error("error creating addrinfo structure");return p(n,T),0};var h={};I.gai_strerror=function(t){var e,r;if(null!=h[t])return h[t];var n=c.string(null!==(r=null===(e=s.gai_strerror)||void 0===e?void 0:e.call(s,t))&&void 0!==r?r:"Unknown error");return h[t]=n,n};var y={};I.hstrerror=function(t){var e,r;if(null!=y[t])return y[t];var n=c.string(null!==(r=null===(e=s.hstrerror)||void 0===e?void 0:e.call(s,t))&&void 0!==r?r:"Unknown error");return y[t]=n,n};var m=null;return I.__h_errno_location=function(){if(null==m&&(m=c.malloc(4),c.i32(m,0)),null==m)throw Error("bug");return m},I}},3349:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(9063),o=n(r(9171));e.default=function(t){var e=t.posix,r=t.recv,n=t.send,a=t.callFunction;return{if_indextoname:function(t,r){var a,u=e.if_indextoname;null==u&&(0,i.notImplemented)("if_indextoname");try{a=u(t)}catch(t){return 0}return n.string(a,{ptr:r,len:o.default.IFNAMSIZ}),r},if_nametoindex:function(t){var n=e.if_nametoindex;null==n&&(0,i.notImplemented)("if_nametoindex");var o=r.string(t);try{return n(o)}catch(t){return 0}},if_nameindex:function(){var t=e.if_nameindex;try{if(null==t){var r=a("createNameIndexArray",0);if(0==r)throw Error("out of memory");return r}var i=t(),o=a("createNameIndexArray",i.length);if(0==o)throw Error("out of memory");for(var u=0;u<i.length;u++)a("setNameIndexElement",o,u,i[u][0],n.string(i[u][1]));return o}catch(t){throw t.ret=0,t}},if_freenameindex:function(t){a("freeNameIndexArray",t)}}}},1017:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(9063);e.default=function(t){var e=t.callFunction,r=t.posix,i=t.recv,o=t.send;function a(t,r){e("set_statvfs",t,r.f_bsize,r.f_frsize,BigInt(r.f_blocks),BigInt(r.f_bfree),BigInt(r.f_bavail),BigInt(r.f_files),BigInt(r.f_ffree),BigInt(r.f_favail),r.f_fsid,r.f_flag,r.f_namemax)}var u=0;return{login_tty:function(t){return null==r.login_tty&&(0,n.notImplemented)("login_tty"),r.login_tty(t),0},statvfs:function(t,e){null==r.statvfs&&(0,n.notImplemented)("statvfs");var o=i.string(t);return a(e,r.statvfs(o)),0},fstatvfs:function(t,e){return null==r.fstatvfs&&(0,n.notImplemented)("statvfs"),a(e,r.fstatvfs(t)),0},ctermid:function(t){if(null==r.ctermid&&(0,n.notImplemented)("ctermid"),t){var e=r.ctermid();return o.string(e,{ptr:t,len:e.length+1}),t}if(u)return u;var i=r.ctermid();return u=o.string(i)},getpwnam_r:function(){(0,n.notImplemented)("getpwnam_r")},getpwuid:function(){(0,n.notImplemented)("getpwnam_r")},getpwuid_r:function(){(0,n.notImplemented)("getpwnam_r")},openpty:function(){(0,n.notImplemented)("openpty")}}}},1930:function(t,e,r){"use strict";var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0});var i=r(9063);e.default=function(t){var e,r,o={},a=function(t){o[t]=function(){return(0,i.notImplemented)(t)}};try{for(var u=n("sched_get_priority_max sched_get_priority_min sched_getparam sched_getscheduler sched_rr_get_interval sched_setparam sched_setscheduler".split(/\s+/)),s=u.next();!s.done;s=u.next())a(s.value)}catch(t){e={error:t}}finally{try{s&&!s.done&&(r=u.return)&&r.call(u)}finally{if(e)throw e.error}}return o}},4509:function(t,e,r){"use strict";var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.setSignalSet=e.getSignalSet=void 0;var o=i(r(9171)),a={};function u(t){return null==a[t]&&(a[t]=new Set),a[t]}e.getSignalSet=u,e.setSignalSet=function(t,e){a[t]=e};var s=new Set;e.default=function(t){var e=t.process,r={kill:function(t,r){return null==e.kill||e.kill(t,r),0},raise:function(t){var n;return r.kill(null!==(n=e.pid)&&void 0!==n?n:1,t)},killpg:function(t,r){return null==e.kill||e.kill(-t,r),0},sigemptyset:function(t){return u(t).clear(),0},sigfillset:function(t){for(var e=u(t),r=1;r<=31;r++)e.add(r);return 0},sigaddset:function(t,e){return u(t).add(e),0},sigdelset:function(t,e){return u(t).delete(e),0},sigismember:function(t,e){return u(t).has(e)?1:0},sigprocmask:function(t,e,r){var i,a,l,_,c,f;try{if(!e)return 0;var I=u(e);switch(t){case o.default.SIG_BLOCK:try{for(var S=n(I),E=S.next();!E.done;E=S.next()){var A=E.value;s.add(A)}}catch(t){i={error:t}}finally{try{E&&!E.done&&(a=S.return)&&a.call(S)}finally{if(i)throw i.error}}return 0;case o.default.SIG_UNBLOCK:try{for(var d=n(I),p=d.next();!p.done;p=d.next())A=p.value,s.delete(A)}catch(t){l={error:t}}finally{try{p&&!p.done&&(_=d.return)&&_.call(d)}finally{if(l)throw l.error}}return 0;case o.default.SIG_SETMASK:s.clear();try{for(var T=n(I),v=T.next();!v.done;v=T.next())A=v.value,s.add(A)}catch(t){c={error:t}}finally{try{v&&!v.done&&(f=T.return)&&f.call(T)}finally{if(c)throw c.error}}return 0;default:throw Error("sigprocmask - invalid how=".concat(t))}}finally{r&&function(t){var e,r,i=u(t);i.clear();try{for(var o=n(s),a=o.next();!a.done;a=o.next()){var l=a.value;i.add(l)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}}(r)}}};return r.pthread_sigmask=r.sigprocmask,r}},7793:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(9063),i=r(4509);e.default=function(t){var e=t.callFunction,r=t.posix,o=t.recv,a=t.send,u={},s={};function l(t,e){if(void 0===e&&(e=!1),null==s[t])return s[t]={};var r=s[t];if(null!=r)return e&&(null!=r.sigdefaultPtr&&(r.sigdefault=(0,i.getSignalSet)(r.sigdefaultPtr)),null!=r.sigmaskPtr&&(r.sigmask=(0,i.getSignalSet)(r.sigmaskPtr))),r;throw Error("bug")}return{posix_spawnattr_setschedparam:function(t,r){return l(t).schedparam={sched_priority:e("get_posix_spawnattr_schedparam_sched_priority",r)},0},posix_spawnattr_getschedparam:function(t,r){var n,i=null!==(n=l(t).schedparam)&&void 0!==n?n:0;return e("set_posix_spawnattr_schedparam_sched_priority",r,i),0},posix_spawnattr_setschedpolicy:function(t,e){return l(t).schedpolicy=e,0},posix_spawnattr_getschedpolicy:function(t,e){var r;return a.i32(e,null!==(r=l(t).schedpolicy)&&void 0!==r?r:0),0},posix_spawnattr_init:function(t){return s[t]={},0},posix_spawnattr_destroy:function(t){return delete s[t],0},posix_spawnattr_setflags:function(t,e){return l(t).flags=e,0},posix_spawnattr_getflags:function(t,e){var r;return a.i32(e,null!==(r=l(t).flags)&&void 0!==r?r:0),0},posix_spawnattr_setpgroup:function(t,e){return l(t).pgroup=e,0},posix_spawnattr_getpgroup:function(t,e){var r;return a.i32(e,null!==(r=l(t).pgroup)&&void 0!==r?r:0),0},posix_spawnattr_setsigmask:function(t,e){return l(t).sigmaskPtr=e,0},posix_spawnattr_getsigmask:function(t,e){var r=l(t).sigmaskPtr;return(0,i.setSignalSet)(e,(0,i.getSignalSet)(r)),0},posix_spawnattr_setsigdefault:function(t,e){return l(t).sigdefaultPtr=e,0},posix_spawnattr_getsigdefault:function(t,e){var r=l(t).sigdefaultPtr;return(0,i.setSignalSet)(e,(0,i.getSignalSet)(r)),0},posix_spawn:function(t,e,i,s,_,c){null==r.posix_spawn&&(0,n.notImplemented)("posix_spawn");var f=o.string(e),I=o.arrayOfStrings(_),S=o.arrayOfStrings(c),E=r.posix_spawn(f,u[i],l(s,!0),I,S);return a.i32(t,E),0},posix_spawnp:function(t,e,i,s,_,c){null==r.posix_spawnp&&(0,n.notImplemented)("posix_spawnp");var f=o.string(e),I=o.arrayOfStrings(_),S=o.arrayOfStrings(c),E=r.posix_spawnp(f,u[i],l(s,!0),I,S);return a.i32(t,E),0},posix_spawn_file_actions_init:function(t){return u[t]=[],0},posix_spawn_file_actions_destroy:function(t){return delete u[t],0},posix_spawn_file_actions_addclose:function(t,e){return null==u[t]&&(u[t]=[]),u[t].push(["addclose",e]),0},posix_spawn_file_actions_addopen:function(t,e,r,n,i){null==u[t]&&(u[t]=[]);var a=o.string(r);return u[t].push(["addopen",e,a,n,i]),0},posix_spawn_file_actions_adddup2:function(t,e,r){return null==u[t]&&(u[t]=[]),u[t].push(["adddup2",e,r]),0}}}},406:function(t,e,r){"use strict";var n=r(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=r(6470),a=i(r(9171)),u=i(r(4121));e.default=function(t){var e=t.fs,r=t.process,i=t.recv,s=t.wasi;return{chmod:function(t,r){var n=i.string(t);return e.chmodSync(n,r),0},_fchmod:function(t,r){var i=s.FD_MAP.get(t);return i?(e.fchmodSync(i.real,r),0):(n.warn("bad file descriptor, fchmod"),-1)},fchmodat:function(t,n,l,_){var c=function(t,e,n){var i,l,_;if(void 0===n&&(n=!1),(0,o.isAbsolute)("path"))return e;if(t==a.default.AT_FDCWD)_=null!==(l=null===(i=r.cwd)||void 0===i?void 0:i.call(r))&&void 0!==l?l:"/";else{var c=s.FD_MAP.get(t);if(!c)throw(0,u.default)("EBADF");_=c.path}if(0==e.length){if(!n)throw(0,u.default)("ENOENT");return _}return(0,o.join)(_,e)}(t,i.string(n));return e.chmodSync(c,l),0},lchmod:function(t,r){var n=i.string(t);return e.lchmodSync(n,r),0},umask:function(t){var e,n;return null!==(n=null===(e=r.umask)||void 0===e?void 0:e.call(r,t))&&void 0!==n?n:18}}}},580:(t,e,r)=>{"use strict";var n=r(5108);Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=t.child_process,r=t.os,i=t.recv,o=t.send;return{getloadavg:function(t,e){var n=r.loadavg;if(null==n)return-1;var i=n();return o.f64(t,i[0]),o.f64(t+8,i[1]),o.f64(t+16,i[2]),e},system:function(t){if(null==e.spawnSync)throw Error("system is not implemented yet");var r=i.string(t),o=e.spawnSync(r,{shell:!0}),a=o.stdout,u=o.stderr,s=o.status;return n.log(a.toString()),n.warn(u.toString()),s}}}},4603:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(6786);e.default=function(t){var e=t.child_process,r=t.memory,i=t.os;return{clock_settime:function(t,o){var a,u;if(null==e.spawnSync)throw Error("clock_settime is not supported on this platform");var s,l,_=new DataView(r.buffer).getUint32(o,!0),c="";switch(null===(a=i.platform)||void 0===a?void 0:a.call(i)){case"darwin":s="date",l=["-f","%s","".concat(_)];break;case"linux":s="date",l=["--set=@".concat(_)];break;case"win32":var f=new Date(1e3*_);s="date",l=[n("m/d/yyyy",f)],c="time",l=[n("HH:MM:ss",f)];break;default:throw Error("clock_settime not supported on platform  = ".concat(null===(u=i.platform)||void 0===u?void 0:u.call(i)))}var I=e.spawnSync(s,l),S=I.status,E=I.stderr;if(S)throw Error("clock_settime failed - ".concat(E));if(c){var A=e.spawnSync(c,[]),d=A.status,p=A.stderr;if(d)throw Error("clock_settime failed - ".concat(p))}return 0}}}},3498:function(t,e,r){"use strict";var n=r(5108),i=this&&this.__assign||function(){return i=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},i.apply(this,arguments)},o=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},a=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=r(9063),l=u(r(9171));e.default=function(t){var e=t.fs,r=t.os,u=t.process,_=t.recv,c=t.send,f=t.wasi,I=t.posix,S=t.memory,E=void 0;function A(t){var e=f.FD_MAP.get(t);if(null==e)throw Error("invalid file descriptor");return e.real}var d={chown:function(t,r,n){var i=_.string(t);return e.chownSync(i,r,n),0},lchown:function(t,r,n){var i=_.string(t);return e.lchownSync(i,r,n),0},_fchown:function(t,r,n){return e.fchownSync(A(t),r,n),0},getuid:function(){var t,e;return null!==(e=null===(t=u.getuid)||void 0===t?void 0:t.call(u))&&void 0!==e?e:0},getgid:function(){var t,e;return null!==(e=null===(t=u.getgid)||void 0===t?void 0:t.call(u))&&void 0!==e?e:0},_geteuid:function(){var t,e;return null!==(e=null===(t=u.geteuid)||void 0===t?void 0:t.call(u))&&void 0!==e?e:0},getegid:function(){var t,e;return null!==(e=null===(t=u.getegid)||void 0===t?void 0:t.call(u))&&void 0!==e?e:0},getgroups:function(t,e){var r,n=null===(r=u.getgroups)||void 0===r?void 0:r.call(u);if(null==n)return 0;if(0==t)return n.length;var i=Math.min(n.length,t);if(0==i)return 0;for(var o=new DataView(S.buffer),a=0;a<i;a++)o.setUint32(e+4*a,n[a],!0);return i},getpid:function(){var t;return null!==(t=u.pid)&&void 0!==t?t:1},getpgid:function(t){var e,r;return null!==(r=null===(e=I.getpgid)||void 0===e?void 0:e.call(I,t))&&void 0!==r?r:1},setpgid:function(t,e){return null==I.setpgid&&(0,s.notImplemented)("setpgid"),I.setpgid(t,e),0},getpgrp:function(){var t,e;return null!==(e=null===(t=I.getpgrp)||void 0===t?void 0:t.call(I))&&void 0!==e?e:1},nice:function(t){var e,n,i=null===(e=r.getPriority)||void 0===e?void 0:e.call(r);null!=i&&(null===(n=r.setPriority)||void 0===n||n.call(r,i+t))},getpriority:function(t,e){var i;return null==r.getPriority?0:0!=t?(n.warn("getpriority can only be implemented in node.js for *process id*"),0):null===(i=r.getPriority)||void 0===i?void 0:i.call(r,e)},setpriority:function(t,e,i){var o;return null==r.setPriority?0:0!=t?(n.warn("setpriority can only be implemented in node.js for *process id*"),-1):null===(o=r.setPriority)||void 0===o?void 0:o.call(r,e,i)},dup:function(t){null==I.dup&&(0,s.notImplemented)("dup");var e=f.FD_MAP.get(t),r=I.dup(e.real),n=f.getUnusedFileDescriptor();return f.FD_MAP.set(n,i(i({},e),{real:r})),n},dup2:function(t,e){var r;null==I.dup2&&(0,s.notImplemented)("dup2");var n=f.FD_MAP.get(t),o=f.FD_MAP.get(e),a=I.dup2(n.real,null!==(r=o.real)&&void 0!==r?r:e);return f.FD_MAP.set(e,i(i({},n),{real:a})),e},dup3:function(){null==I.dup3&&(0,s.notImplemented)("dup3")},sync:function(){var t,r;if(null!=e.fsyncSync)try{for(var n=o(f.FD_MAP),i=n.next();!i.done;i=n.next()){var u=a(i.value,2),s=(u[0],u[1].real);e.fsyncSync(s)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(t)throw t.error}}},setuid:function(){throw Error("setuid is not supported")},seteuid:function(t){return null==I.seteuid&&(0,s.notImplemented)("seteuid"),I.seteuid(t),0},setegid:function(t){return null==I.setegid&&(0,s.notImplemented)("setegid"),I.setegid(t),0},setgid:function(t){return null==u.setgid&&(0,s.notImplemented)("setgid"),u.setgid(t),0},setsid:function(t){return null==I.setsid&&(0,s.notImplemented)("setsid"),I.setsid(t)},getsid:function(){(0,s.notImplemented)("getsid")},setreuid:function(t){return null==I.setreuid&&(0,s.notImplemented)("setreuid"),I.setreuid(t),0},setregid:function(t){return null==I.setregid&&(0,s.notImplemented)("setregid"),I.setregid(t),0},getppid:function(){return null==I.getppid?d.getpid():I.getppid()},setgroups:function(){(0,s.notImplemented)("setgroups")},setpgrp:function(){(0,s.notImplemented)("setpgrp")},tcgetpgrp:function(){(0,s.notImplemented)("tcgetpgrp")},tcsetpgrp:function(){(0,s.notImplemented)("tcsetpgrp")},fork:function(){return null==I.fork&&(0,s.notImplemented)("fork"),I.fork()},fork1:function(){(0,s.notImplemented)("fork1")},forkpty:function(){(0,s.notImplemented)("forkpty")},getlogin:function(){var t,e,n;if(null!=E)return E;var i=null!==(n=null===(e=null===(t=r.userInfo)||void 0===t?void 0:t.call(r))||void 0===e?void 0:e.username)&&void 0!==n?n:"user";if(null==(E=c.string(i)))throw Error("bug");return E},gethostname:function(t,e){if(null==r.hostname)throw Error("gethostname not supported on this platform");var n=r.hostname();return c.string(n,{ptr:t,len:e}),0},sethostname:function(t,e){if(null==I.sethostname)throw Error("sethostname not supported on this platform");var r=_.string(t,e);return I.sethostname(r),0},ttyname_r:function(t,e,r){if(null==I.ttyname)throw Error("ttyname_r is not supported on this platform");return c.string(I.ttyname(t),{ptr:e,len:r}),0},alarm:function(t){if(null==I.alarm)throw Error("alarm is not supported on this platform");return I.alarm(t)},getresuid:function(t,e,r){null==I.getresuid&&(0,s.notImplemented)("getresuid");var n=I.getresuid(),i=n.ruid,o=n.euid,a=n.suid,u=new DataView(S.buffer);return u.setUint32(t,i,!0),u.setUint32(e,o,!0),u.setUint32(r,a,!0),0},getresgid:function(t,e,r){null==I.getresgid&&(0,s.notImplemented)("getresgid");var n=I.getresgid(),i=n.rgid,o=n.egid,a=n.sgid,u=new DataView(S.buffer);return u.setUint32(t,i,!0),u.setUint32(e,o,!0),u.setUint32(r,a,!0),0},setresuid:function(t,e,r){return null==I.setresuid&&(0,s.notImplemented)("setresuid"),I.setresuid(t,e,r),0},setresgid:function(t,e,r){return null==I.setresgid&&(0,s.notImplemented)("setresgid"),I.setresgid(t,e,r),0},execve:function(t,e,r){null==I._execve&&(0,s.notImplemented)("execve");var n=_.string(t),i=_.arrayOfStrings(e),o=_.arrayOfStrings(r);return I._execve(n,i,o),0},execv:function(t,e){null==I.execv&&(0,s.notImplemented)("execve");var r=_.string(t),n=_.arrayOfStrings(e);return I.execv(r,n),0},execlp:function(){(0,s.notImplemented)("execlp")},fexecve:function(t,e,r){null==I._fexecve&&(0,s.notImplemented)("fexecve");var n=_.arrayOfStrings(e),i=_.arrayOfStrings(r);return I._fexecve(A(t),n,i),0},pipe:function(t){null==I.pipe&&(0,s.notImplemented)("pipe");var e=I.pipe(),r=e.readfd,n=e.writefd,i=f.getUnusedFileDescriptor();f.FD_MAP.set(i,{real:r,rights:f.FD_MAP.get(0).rights});var o=f.getUnusedFileDescriptor();return f.FD_MAP.set(o,{real:n,rights:f.FD_MAP.get(1).rights}),c.i32(t,i),c.i32(t+4,o),0},pipe2:function(t,e){var r,i;null==I.pipe2&&(0,s.notImplemented)("pipe2");var o=0;e&l.default.O_NONBLOCK&&(o+=null!==(i=null===(r=I.constants)||void 0===r?void 0:r.O_NONBLOCK)&&void 0!==i?i:0);var a=I.pipe2(o),u=a.readfd,_=a.writefd;return n.warn("pipe2 -- TODO: we almost certainly need to abstract these through our WASI fd object!"),c.i32(t,u),c.i32(t+4,_),0},lockf:function(t,e,r){var n,i,a=I.lockf;null==a&&(0,s.notImplemented)("lockf");var u=void 0;try{for(var _=o(["F_ULOCK","F_LOCK","F_TLOCK","F_TEST"]),c=_.next();!c.done;c=_.next()){var f=c.value;if(e==l.default[f]){u=I.constants[f];break}}}catch(t){n={error:t}}finally{try{c&&!c.done&&(i=_.return)&&i.call(_)}finally{if(n)throw n.error}}if(null==u)throw Error("invalid cmd ".concat(e));return a(A(t),u,BigInt(r)),0},pause:function(){var t=I.pause;return null==t&&(0,s.notImplemented)("pause"),t()},initgroups:function(t,e){var r=u.initgroups;return null==r&&(0,s.notImplemented)("initgroups"),r(_.string(t),e),0},getgrouplist:function(t,e,r,n){var i,o=I.getgrouplist,a=_.string(t),u=_.i32(n);i=null==o?[e]:o(a,e);for(var s=Math.min(i.length,u),l=0;l<s;l++)c.u32(r+4*l,i[l]);return c.i32(n,i.length),s<i.length?-1:0}};return d}},9063:function(t,e){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.notImplemented=e.NotImplementedError=void 0;var i=function(t){function e(e,r){var n=t.call(this,"".concat(e," is not implemented yet"))||this;return n.name="NotImplementedError",null!=r&&(n.ret=r),n}return n(e,t),e}(Error);e.NotImplementedError=i,e.notImplemented=function(t,e){throw new i(t,e)}},4325:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(9063);e.default=function(t){var e=t.posix,r=t.send;return{wait:function(t){null==e.wait&&(0,n.notImplemented)("wait");var i=e.wait(),o=i.ret,a=i.wstatus;return r.i32(t,a),o},waitid:function(){return(0,n.notImplemented)("waitid"),-1},waitpid:function(t,i,o){null==e.waitpid&&(0,n.notImplemented)("waitpid");var a=e.waitpid(t,o),u=a.ret,s=a.wstatus;return r.i32(i,s),u}}}},4586:function(t,e,r){"use strict";var n=r(5108),i=this&&this.__assign||function(){return i=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},i.apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var o={createKey:function(t){return JSON.stringify(t)},ignoreSingleUndefined:!1};e.default=function(t,e){e=i(i({},o),e||{});var r={};return function(){for(var i=[],o=0;o<arguments.length;o++)i[o]=arguments[o];e.ignoreSingleUndefined&&1===i.length&&void 0===i[0]&&(n.warn("Ignoring single undefined arg (reuseInFlight)"),i=[]);var a=e.createKey(i);return r.hasOwnProperty(a)||(r[a]=t.apply(this,i).then((function(t){return delete r[a],t}),(function(t){throw delete r[a],t}))),r[a]}}},2989:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__assign||function(){return o=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},o.apply(this,arguments)},a=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function a(t){try{s(n.next(t))}catch(t){o(t)}}function u(t){try{s(n.throw(t))}catch(t){o(t)}}function s(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,u)}s((n=n.apply(t,e||[])).next())}))},u=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},s=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var _=r(3728),c=l(r(5516)),f=l(r(4420)),I=l(r(699)),S=l(r(2508)),E=r(7187),A=l(r(115)),d=l(r(8812)),p=l(r(1235)),T=(0,S.default)("wasm:worker");function v(t,e){var r;return void 0===e&&(e={}),a(this,void 0,void 0,(function(){function n(t,e){var r=new Uint8Array(p.readFileSync(t)),n=new WebAssembly.Module(r);return new WebAssembly.Instance(n,e)}var i,l,I,S,E,d,p,v,y,m=this;return u(this,(function(g){switch(g.label){case 0:T("wasmImportBrowser"),i=[],l=function(t){var e,r;return u(this,(function(n){switch(n.label){case 0:return"zipurl"!=t.type?[3,5]:(e=void 0,t.async?[3,3]:(r={type:"zip"},[4,fetch(t.zipurl)]));case 1:return[4,n.sent().arrayBuffer()];case 2:return r.data=n.sent(),r.mountpoint=t.mountpoint,e=r,[3,4];case 3:e={type:"zip-async",getData:function(){return a(m,void 0,void 0,(function(){return u(this,(function(e){switch(e.label){case 0:return[4,fetch(t.zipurl)];case 1:return[4,e.sent().arrayBuffer()];case 2:return[2,e.sent()]}}))}))},mountpoint:t.mountpoint},n.label=4;case 4:return i.push(e),[3,6];case 5:i.push(t),n.label=6;case 6:return[2]}}))},g.label=1;case 1:g.trys.push([1,6,7,8]),I=s(null!==(r=e.fs)&&void 0!==r?r:[]),S=I.next(),g.label=2;case 2:return S.done?[3,5]:(E=S.value,[5,l(E)]);case 3:g.sent(),g.label=4;case 4:return S=I.next(),[3,2];case 5:return[3,8];case 6:return d=g.sent(),v={error:d},[3,8];case 7:try{S&&!S.done&&(y=I.return)&&y.call(I)}finally{if(v)throw v.error}return[7];case 8:return p=(0,_.createFileSystem)(i),[4,(0,f.default)({source:t,bindings:o(o({},c.default),{fs:p,posix:A.default}),options:e,importWebAssembly:h,importWebAssemblySync:n,readFileSync:function(t){return p.readFileSync(t)},maxMemoryMB:1e3})];case 9:return[2,g.sent()]}}))}))}function h(t,e){return a(this,void 0,void 0,(function(){return u(this,(function(r){switch(r.label){case 0:return[4,WebAssembly.instantiateStreaming(fetch(t),e)];case 1:return[2,r.sent().instance]}}))}))}e.default=v,null==self.document&&function(){T("initializing worker");var t=new(function(t){function e(){var e=t.call(this)||this;return e.postMessage=self.postMessage.bind(self),self.onmessage=function(t){var r=t.data;e.emit("message",r)},e}return i(e,t),e}(E.EventEmitter));(0,I.default)({wasmImport:v,parent:t,captureOutput:!0,IOHandler:crossOriginIsolated?d.default:p.default})}()},4420:function(t,e,r){"use strict";var n=r(4155),i=this&&this.__assign||function(){return i=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},i.apply(this,arguments)},o=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(e,r);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,n,i)}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),u=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&o(e,t,r);return a(e,t),e},s=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function a(t){try{s(n.next(t))}catch(t){o(t)}}function u(t){try{s(n.throw(t))}catch(t){o(t)}}function s(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,u)}s((n=n.apply(t,e||[])).next())}))},l=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},_=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},c=this&&this.__spreadArray||function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))},f=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.strlen=void 0;var I=f(r(3728)),S=f(r(4586)),E=f(r(9117)),A=u(r(9168)),d=f(r(1772)),p=f(r(8294)),T=f(r(2894)),v=f(r(1869)),h=(0,f(r(2508)).default)("wasm-worker");e.strlen=function(t,e){for(var r=new Uint8Array(e.buffer),n=t;r[n];)n+=1;return n-t};var y={},m=(0,S.default)((function(t){var e,r,o,a=t.source,u=t.bindings,f=t.options,S=void 0===f?{}:f,m=t.importWebAssemblySync,g=t.importWebAssembly,W=t.readFileSync,R=t.maxMemoryMB;return s(this,void 0,void 0,(function(){function t(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];var n=b.getFunction(t);if(null==n)throw Error("error - ".concat(t," is not defined"));return n.apply(void 0,c([],_(e),!1))}var s,f,O,w,b,N,D,L,G,C,F;return l(this,(function(l){switch(l.label){case 0:if(h("doWasmImport",a),null!=y[a])return[2,y[a]];for(C in s=(new Date).valueOf(),f=new WebAssembly.Memory(i({initial:(0,A.MBtoPages)(10)},R?{maximum:(0,A.MBtoPages)(R)}:{})),O=new WebAssembly.Table({initial:1e4,element:"anyfunc"}),null==(w={env:i(i(i({},{reportError:function(t,e){var r=f.buffer.slice(t,t+e),n=new TextDecoder;throw Error(n.decode(r))}}),S.wasmEnv),{memory:f,__indirect_function_table:O})}).env.wasmGetSignalState&&(w.env.wasmGetSignalState=function(){return 0}),null==w.env.wasmSendString&&(w.env.wasmSendString=function(t,e){b.result=b.recv.string(t,e)}),null==w.env.wasmSetException&&(w.env.wasmSetException=function(){b.resultException=!0}),null==w.env.getrandom&&(w.env.getrandom=function(t,e,r){return u.randomFillSync(new Uint8Array(f.buffer),t,e),e}),null==w.env.main&&(w.env.main=function(){return 0}),null==w.env._Py_emscripten&&(w.env._Py_emscripten_runtime=function(){return 0}),(0,d.default)(O,w.env),N=u.fs,D={preopens:{"/":"/"},bindings:u,args:n.argv,env:S.env,sleep:S.sleep,getStdin:S.getStdin,sendStdout:S.sendStdout,sendStderr:S.sendStderr},L=new I.default(D),w.wasi_snapshot_preview1=L.wasiImport,G=(0,p.default)({fs:N,send:new T.default({memory:f,callFunction:t}),recv:new v.default({memory:f,callFunction:t}),wasi:L,process:n,os:null!==(e=u.os)&&void 0!==e?e:{},posix:null!==(r=u.posix)&&void 0!==r?r:{},child_process:null!==(o=u.child_process)&&void 0!==o?o:{},memory:f,callFunction:t,free:function(){for(var t,e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return(t=b.exports).c_free.apply(t,c([],_(e),!1))}}),G)null==w.env[C]&&(w.env[C]=G[C]);if(null==a)throw Error("source must be defined for now...");return[4,(0,A.default)({path:a,importWebAssemblySync:m,importWebAssembly:g,readFileSync:W,importObject:w,stub:!1})];case 1:return F=l.sent(),null!=L&&L.start(F,f),b=new E.default(F.exports,f,N,O),null==S.init?[3,3]:[4,S.init(b)];case 2:l.sent(),l.label=3;case 3:return G.init(),y[a]=b,S.time&&h.enabled&&h("imported ".concat(a," in ").concat((new Date).valueOf()-s,"ms")),b.table=O,b.wasi=L,b.posixEnv=G,[2,b]}}))}))}),{createKey:function(t){return t[0]}});e.default=m},699:function(t,e,r){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},n.apply(this,arguments)},i=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function a(t){try{s(n.next(t))}catch(t){o(t)}}function u(t){try{s(n.throw(t))}catch(t){o(t)}}function s(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,u)}s((n=n.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},a=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},u=this&&this.__spreadArray||function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var l=(0,s(r(2508)).default)("wasm:worker:init");e.default=function(t){var e=this,r=t.wasmImport,s=t.parent,_=t.captureOutput,c=t.IOHandler,f=void 0;s.on("message",(function(t){return i(e,void 0,void 0,(function(){var e,i,I,S;return o(this,(function(o){switch(o.label){case 0:switch(l("worker got message ",t),t.event){case"init":return[3,1];case"callWithString":return[3,5];case"call":return[3,6];case"waitUntilFsLoaded":return[3,7]}return[3,12];case 1:return o.trys.push([1,3,,4]),e=new c(t.options,(function(){s.postMessage({event:"service-worker-broken"})})),i=n(n({},t.options),{sleep:e.sleep.bind(e),getStdin:e.getStdin.bind(e),wasmEnv:{wasmGetSignalState:e.getSignalState.bind(e)}}),_&&(i.sendStdout=function(t){l("sendStdout",t),s.postMessage({event:"stdout",data:t})},i.sendStderr=function(t){l("sendStderr",t),s.postMessage({event:"stderr",data:t})}),[4,r(t.name,i)];case 2:return f=o.sent(),s.postMessage({event:"init",status:"ok"}),[3,4];case 3:return I=o.sent(),s.postMessage({event:"init",status:"error",error:I.toString()}),[3,4];case 4:return[2];case 5:if(null==f)throw Error("wasm must be initialized");try{s.postMessage({id:t.id,result:f.callWithString.apply(f,u([t.name,t.str],a(t.args),!1))})}catch(e){s.postMessage({id:t.id,error:e})}return[2];case 6:if(null==f)throw Error("wasm must be initialized");return s.postMessage({id:t.id,result:f.callWithString(t.name,"",[])}),[2];case 7:if(null==(null==f?void 0:f.fs))throw Error("wasm.fs must be initialized");o.label=8;case 8:return o.trys.push([8,10,,11]),[4,f.fs.waitUntilLoaded()];case 9:return o.sent(),s.postMessage({id:t.id,result:{}}),[3,11];case 10:return S=o.sent(),s.postMessage({id:t.id,error:S}),[3,11];case 11:case 12:return[2]}}))}))}))}},9117:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function a(t){try{s(n.next(t))}catch(t){o(t)}}function u(t){try{s(n.throw(t))}catch(t){o(t)}}function s(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,u)}s((n=n.apply(t,e||[])).next())}))},a=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},u=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},s=this&&this.__spreadArray||function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))},l=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},_=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var c=r(7187),f=_(r(2894)),I=_(r(1869)),S=new TextEncoder,E=8192,A=function(t){function e(e,r,n,i){var o=t.call(this)||this;o.result=void 0,o.resultException=!1,o.exports=e,o.memory=r,o.table=i,o.fs=n;var a={memory:o.memory,callFunction:function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];var n=o.getFunction(t);if(null==n)throw Error("error - ".concat(t," is not defined"));return n.apply(void 0,s([],u(e),!1))}};return o.send=new f.default(a),o.recv=new I.default(a),o}return i(e,t),e.prototype.terminal=function(t){return void 0===t&&(t=["command"]),o(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,this.callWithString("terminal",t)];case 1:return[2,e.sent()]}}))}))},e.prototype.writeToStdin=function(t){throw Error("not implemented")},e.prototype.callWithString=function(t,e){for(var r,n,i,o,a,_,c,f,I=[],S=2;S<arguments.length;S++)I[S-2]=arguments[S];this.result=void 0,this.resultException=!1;var A,d=this.exports[t];if(null==d)throw Error("no function ".concat(t," defined in wasm module"));if("string"==typeof e){if(e.length<E)return A=this.callWithSmallString(d,e),null!==(c=this.result)&&void 0!==c?c:A;var p=this.send.string(e);try{A=d.apply(void 0,s([p],u(I),!1))}finally{this.exports.c_free(p)}}else{var T=[];try{for(var v=l(e),h=v.next();!h.done;h=v.next()){var y=h.value;T.push(this.send.string(y))}}catch(t){r={error:t}}finally{try{h&&!h.done&&(n=v.return)&&n.call(v)}finally{if(r)throw r.error}}var m=T.length,g=(p=this.exports.c_malloc(4*m),new Int32Array(this.memory.buffer,p,m)),W=0;try{for(var R=l(T),O=R.next();!O.done;O=R.next()){var w=O.value;g[W]=w,W+=1}}catch(t){i={error:t}}finally{try{O&&!O.done&&(o=R.return)&&o.call(R)}finally{if(i)throw i.error}}try{A=d.apply(void 0,s([m,p],u(I),!1))}finally{this.exports.c_free(p);try{for(var b=l(T),N=b.next();!N.done;N=b.next())w=N.value,this.exports.c_free(w)}catch(t){a={error:t}}finally{try{N&&!N.done&&(_=b.return)&&_.call(b)}finally{if(a)throw a.error}}}}if(this.resultException)throw Error("RuntimeError");return null!==(f=this.result)&&void 0!==f?f:A},e.prototype.callWithSmallString=function(t,e){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];null==this.smallStringPtr&&(this.smallStringPtr=this.exports.c_malloc(E));var i=this.smallStringPtr;if(!i)throw Error("MemoryError -- out of memory");var o=e.length+1,a=new Int8Array(this.memory.buffer,i,o),l=S.encode(e);return a.set(l),a[o-1]=0,t.apply(void 0,s([i],u(r),!1))},e.prototype.getFunction=function(t){if(null!=this.table){var e=this.exports["__WASM_EXPORT__".concat(t)];if(null!=e)return this.table.get(e())}return this.exports[t]},e.prototype.waitUntilFsLoaded=function(){return o(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:if(null==this.fs)throw Error("fs must be defined");return[4,this.fs.waitUntilLoaded()];case 1:return[2,t.sent()]}}))}))},e.prototype.signal=function(t){throw Error("not implemented")},e}(c.EventEmitter);e.default=A},8812:function(t,e,r){"use strict";var n=r(8764).Buffer,i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=(0,i(r(2508)).default)("wasm:worker:io-using-atomics"),a=function(){function t(t){if(o("creating ioHandler"),null==t.stdinLengthBuffer)throw Error("must define stdinLengthBuffer");if(null==t.stdinBuffer)throw Error("must define stdinBuffer");if(null==t.signalBuffer)throw Error("must define signalBuffer");this.stdinBuffer=n.from(t.stdinBuffer),this.stdinLength=new Int32Array(t.stdinLengthBuffer),this.signalState=new Int32Array(t.signalBuffer),this.sleepArray=new Int32Array(new SharedArrayBuffer(4))}return t.prototype.sleep=function(t){for(o("sleep starting, milliseconds=",t);t>0;){var e=Math.min(t,500);if(Atomics.wait(this.sleepArray,0,0,e),t-=e,Atomics.load(this.signalState,0))return}},t.prototype.getStdin=function(){for(;0==this.stdinLength[0];)if(o("getStdin: waiting for some new stdin"),Atomics.wait(this.stdinLength,0,0,1e3),Atomics.load(this.signalState,0))return n.from("");var t=this.stdinLength[0];o("getStdin: have stdin, processing ",t," bytes");var e=n.alloc(t);return this.stdinBuffer.copy(e,0,0,t),Atomics.store(this.stdinLength,0,0),Atomics.notify(this.stdinLength,0),e},t.prototype.getSignalState=function(){var t=Atomics.load(this.signalState,0);return t?(o("signalState",this.signalState[0]),Atomics.store(this.signalState,0,0),t):0},t}();e.default=a},1235:function(t,e,r){"use strict";var n=r(8764).Buffer,i=r(5108),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=(0,o(r(2508)).default)("wasm:worker:io-using-atomics"),u=function(){function t(t,e){if(this.lastSignalCheck=0,a(t),this.id=t.id,this.serviceWorkerBroken=e,null==this.id)throw Error("".concat(this.id," must be a v4 uuid"))}return t.prototype.request=function(t,e){void 0===e&&(e={});var r=new XMLHttpRequest;r.open("POST","/python-wasm-sw/".concat(t),!1),r.setRequestHeader("cache-control","no-cache, no-store, max-age=0");try{r.send(JSON.stringify(e))}catch(t){this.serviceWorkerBroken(),s(t)}return 200!=r.status&&304!=r.status&&(this.serviceWorkerBroken(),s("invalid status=".concat(r.status))),r},t.prototype.sleep=function(t){a("sleep ",t);for(var e=(new Date).valueOf();(new Date).valueOf()-e<=t;){try{this.request("sleep",{ms:Math.min(t,500)})}catch(t){return void a("sleep error",t)}if(this.getSignal(!1))return}},t.prototype.getStdin=function(){var t;try{var e=this.request("read-stdin",{id:this.id});return n.from(null!==(t=e.responseText)&&void 0!==t?t:"")}catch(t){return n.from("".concat(t,"\n"))}},t.prototype.getSignal=function(t){var e,r=this.request("read-signal",{clear:t,id:this.id});return null!==(e=parseInt(r.responseText))&&void 0!==e?e:0},t.prototype.getSignalState=function(){var t=(new Date).valueOf();return t-this.lastSignalCheck<500?0:(this.lastSignalCheck=t,this.getSignal(!0))},t}();function s(t,e){void 0===e&&(e=3e3),i.warn("service worker not working, so burning CPU to avoid DOS'ing the server -- ",t);for(var r=(new Date).valueOf();(new Date).valueOf()-r<=e;);}e.default=u},115:(t,e,r)=>{"use strict";var n=r(4155);Object.defineProperty(e,"__esModule",{value:!0});var i={getpid:function(){return n.pid},getppid:function(){var t,e;return null!==(e=null===(t=i.getpid)||void 0===t?void 0:t.call(i))&&void 0!==e?e:1}};e.default=i},1869:function(t,e){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.RecvFromWasmAbstractBase=void 0;var i=new TextDecoder,o=function(){function t(){}return t.prototype.view=function(){return new DataView(this.memory.buffer)},t.prototype.strlen=function(t){for(var e=new Uint8Array(this.memory.buffer),r=t;e[r];)r+=1;return r-t},t.prototype.pointer=function(t){return this.view().getUint32(t,!0)},t.prototype.u32=function(t){return this.view().getUint32(t,!0)},t.prototype.i32=function(t){return this.view().getInt32(t,!0)},t.prototype.pointer2=function(t){return new Uint32Array(this.memory.buffer)[t]},t.prototype.string=function(t,e){if(null==e&&null==(e=this.strlen(t)))throw Error("bug");var r=this.memory.buffer.slice(t,t+e);return i.decode(r)},t.prototype.arrayOfStrings=function(t){for(var e=[];;){var r=this.pointer(t);if(!r)break;e.push(this.string(r)),t+=4}return e},t}();e.RecvFromWasmAbstractBase=o;var a=function(t){function e(e){var r=e.memory,n=e.callFunction,i=t.call(this)||this;return i.memory=r,i.callFunction=n,i}return n(e,t),e}(o);e.default=a},2894:function(t,e){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.SendToWasmAbstractBase=void 0;var i=new TextEncoder,o=function(){function t(){}return t.prototype.malloc=function(t){var e=this.callFunction("c_malloc",t);if(!e)throw Error("Out of Memory");return e},t.prototype.view=function(){return new DataView(this.memory.buffer)},t.prototype.pointer=function(t,e){this.view().setUint32(t,e,!0)},t.prototype.i32=function(t,e){this.view().setInt32(t,e,!0)},t.prototype.f64=function(t,e){this.view().setFloat64(t,e,!0)},t.prototype.f32=function(t,e){this.view().setFloat32(t,e,!0)},t.prototype.u32=function(t,e){this.view().setUint32(t,e,!0)},t.prototype.string=function(t,e){var r;null!=e&&(t=t.slice(0,e.len-1));var n=i.encode(t),o=n.length+1,a=null!==(r=null==e?void 0:e.ptr)&&void 0!==r?r:this.malloc(o),u=new Int8Array(this.memory.buffer,a,o);return u.set(n),u[o-1]=0,a},t.prototype.arrayOfStrings=function(t){for(var e=this.malloc(4*(t.length+1)),r=0;r<t.length;r++){var n=this.string(t[r]);this.pointer(e+4*r,n)}return this.pointer(e+4*t.length,0),e},t.prototype.buffer=function(t){var e=this.malloc(t.byteLength),r=new Uint8Array(this.memory.buffer);return t.copy(r,e),e},t}();e.SendToWasmAbstractBase=o;var a=function(t){function e(e){var r=e.memory,n=e.callFunction,i=t.call(this)||this;return i.memory=r,i.callFunction=n,i}return n(e,t),e}(o);e.default=a},1772:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=(0,n(r(2508)).default)("python-wasm-trampoline");e.default=function(t,e){e._PyImport_InitFunc_TrampolineCall=function(e){var r=t.get(e)();return i("_PyImport_InitFunc_TrampolineCall - ptr=",e," r=",r),r},e._PyCFunctionWithKeywords_TrampolineCall=function(e,r,n,i){return t.get(e)(r,n,i)},e.descr_set_trampoline_call=function(e,r,n,i){return t.get(e)(r,n,i)},e.descr_get_trampoline_call=function(e,r,n){return t.get(e)(r,n)}}},9696:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){!function(){if("performance"in self||(self.performance={}),Date.now=Date.now||function(){return(new Date).getTime()},"now"in self.performance==0){var t=Date.now();performance.timing&&performance.timing.navigationStart&&(t=performance.timing.navigationStart),self.performance.now=function(){return Date.now()-t}}}();var e=Math.floor(.001*(Date.now()-performance.now())),r=.001*performance.now(),n=Math.floor(r)+e,i=Math.floor(r%1*1e9);return t&&(n-=t[0],(i-=t[1])<0&&(n--,i+=1e9)),[n,i]};r.bigint=function(t){var e=r(t);return 1e9*e[0]+e[1]},e.default=r},5516:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(1632),o=n(r(9639)),a=n(r(9696)),u=r(2327),s={hrtime:a.default.bigint,exit:function(t){throw new u.WASIExitError(t)},kill:function(t){throw new u.WASIKillError(t)},randomFillSync:i.randomFillSync,isTTY:function(){return!0},path:o.default,fs:null};e.default=s},3622:(t,e)=>{"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),e.WASI_ENOMSG=e.WASI_ENOMEM=e.WASI_ENOLINK=e.WASI_ENOLCK=e.WASI_ENOEXEC=e.WASI_ENOENT=e.WASI_ENODEV=e.WASI_ENOBUFS=e.WASI_ENFILE=e.WASI_ENETUNREACH=e.WASI_ENETRESET=e.WASI_ENETDOWN=e.WASI_ENAMETOOLONG=e.WASI_EMULTIHOP=e.WASI_EMSGSIZE=e.WASI_EMLINK=e.WASI_EMFILE=e.WASI_ELOOP=e.WASI_EISDIR=e.WASI_EISCONN=e.WASI_EIO=e.WASI_EINVAL=e.WASI_EINTR=e.WASI_EINPROGRESS=e.WASI_EILSEQ=e.WASI_EIDRM=e.WASI_EHOSTUNREACH=e.WASI_EFBIG=e.WASI_EFAULT=e.WASI_EEXIST=e.WASI_EDQUOT=e.WASI_EDOM=e.WASI_EDESTADDRREQ=e.WASI_EDEADLK=e.WASI_ECONNRESET=e.WASI_ECONNREFUSED=e.WASI_ECONNABORTED=e.WASI_ECHILD=e.WASI_ECANCELED=e.WASI_EBUSY=e.WASI_EBADMSG=e.WASI_EBADF=e.WASI_EALREADY=e.WASI_EAGAIN=e.WASI_EAFNOSUPPORT=e.WASI_EADDRNOTAVAIL=e.WASI_EADDRINUSE=e.WASI_EACCES=e.WASI_E2BIG=e.WASI_ESUCCESS=void 0,e.WASI_SIGVTALRM=e.WASI_SIGUSR2=e.WASI_SIGUSR1=e.WASI_SIGURG=e.WASI_SIGTTOU=e.WASI_SIGTTIN=e.WASI_SIGTSTP=e.WASI_SIGTRAP=e.WASI_SIGTERM=e.WASI_SIGSTOP=e.WASI_SIGSEGV=e.WASI_SIGQUIT=e.WASI_SIGPIPE=e.WASI_SIGKILL=e.WASI_SIGINT=e.WASI_SIGILL=e.WASI_SIGHUP=e.WASI_SIGFPE=e.WASI_SIGCONT=e.WASI_SIGCHLD=e.WASI_SIGBUS=e.WASI_SIGALRM=e.WASI_SIGABRT=e.WASI_ENOTCAPABLE=e.WASI_EXDEV=e.WASI_ETXTBSY=e.WASI_ETIMEDOUT=e.WASI_ESTALE=e.WASI_ESRCH=e.WASI_ESPIPE=e.WASI_EROFS=e.WASI_ERANGE=e.WASI_EPROTOTYPE=e.WASI_EPROTONOSUPPORT=e.WASI_EPROTO=e.WASI_EPIPE=e.WASI_EPERM=e.WASI_EOWNERDEAD=e.WASI_EOVERFLOW=e.WASI_ENXIO=e.WASI_ENOTTY=e.WASI_ENOTSUP=e.WASI_ENOTSOCK=e.WASI_ENOTRECOVERABLE=e.WASI_ENOTEMPTY=e.WASI_ENOTDIR=e.WASI_ENOTCONN=e.WASI_ENOSYS=e.WASI_ENOSPC=e.WASI_ENOPROTOOPT=void 0,e.RIGHTS_REGULAR_FILE_BASE=e.RIGHTS_CHARACTER_DEVICE_INHERITING=e.RIGHTS_CHARACTER_DEVICE_BASE=e.RIGHTS_BLOCK_DEVICE_INHERITING=e.RIGHTS_BLOCK_DEVICE_BASE=e.RIGHTS_ALL=e.WASI_RIGHT_SOCK_SHUTDOWN=e.WASI_RIGHT_POLL_FD_READWRITE=e.WASI_RIGHT_PATH_UNLINK_FILE=e.WASI_RIGHT_PATH_REMOVE_DIRECTORY=e.WASI_RIGHT_PATH_SYMLINK=e.WASI_RIGHT_FD_FILESTAT_SET_TIMES=e.WASI_RIGHT_FD_FILESTAT_SET_SIZE=e.WASI_RIGHT_FD_FILESTAT_GET=e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES=e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE=e.WASI_RIGHT_PATH_FILESTAT_GET=e.WASI_RIGHT_PATH_RENAME_TARGET=e.WASI_RIGHT_PATH_RENAME_SOURCE=e.WASI_RIGHT_PATH_READLINK=e.WASI_RIGHT_FD_READDIR=e.WASI_RIGHT_PATH_OPEN=e.WASI_RIGHT_PATH_LINK_TARGET=e.WASI_RIGHT_PATH_LINK_SOURCE=e.WASI_RIGHT_PATH_CREATE_FILE=e.WASI_RIGHT_PATH_CREATE_DIRECTORY=e.WASI_RIGHT_FD_ALLOCATE=e.WASI_RIGHT_FD_ADVISE=e.WASI_RIGHT_FD_WRITE=e.WASI_RIGHT_FD_TELL=e.WASI_RIGHT_FD_SYNC=e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS=e.WASI_RIGHT_FD_SEEK=e.WASI_RIGHT_FD_READ=e.WASI_RIGHT_FD_DATASYNC=e.WASI_FDFLAG_SYNC=e.WASI_FDFLAG_RSYNC=e.WASI_FDFLAG_NONBLOCK=e.WASI_FDFLAG_DSYNC=e.WASI_FDFLAG_APPEND=e.WASI_FILETYPE_SYMBOLIC_LINK=e.WASI_FILETYPE_SOCKET_STREAM=e.WASI_FILETYPE_SOCKET_DGRAM=e.WASI_FILETYPE_REGULAR_FILE=e.WASI_FILETYPE_DIRECTORY=e.WASI_FILETYPE_CHARACTER_DEVICE=e.WASI_FILETYPE_BLOCK_DEVICE=e.WASI_FILETYPE_UNKNOWN=e.WASI_SIGXFSZ=e.WASI_SIGXCPU=void 0,e.SIGNAL_MAP=e.ERROR_MAP=e.WASI_WHENCE_END=e.WASI_WHENCE_CUR=e.WASI_WHENCE_SET=e.WASI_STDERR_FILENO=e.WASI_STDOUT_FILENO=e.WASI_STDIN_FILENO=e.WASI_DIRCOOKIE_START=e.WASI_PREOPENTYPE_DIR=e.WASI_O_TRUNC=e.WASI_O_EXCL=e.WASI_O_DIRECTORY=e.WASI_O_CREAT=e.WASI_FILESTAT_SET_MTIM_NOW=e.WASI_FILESTAT_SET_MTIM=e.WASI_FILESTAT_SET_ATIM_NOW=e.WASI_FILESTAT_SET_ATIM=e.WASI_EVENTTYPE_FD_WRITE=e.WASI_EVENTTYPE_FD_READ=e.WASI_EVENTTYPE_CLOCK=e.WASI_CLOCK_THREAD_CPUTIME_ID=e.WASI_CLOCK_PROCESS_CPUTIME_ID=e.WASI_CLOCK_MONOTONIC=e.WASI_CLOCK_REALTIME=e.RIGHTS_TTY_INHERITING=e.RIGHTS_TTY_BASE=e.RIGHTS_SOCKET_INHERITING=e.RIGHTS_SOCKET_BASE=e.RIGHTS_DIRECTORY_INHERITING=e.RIGHTS_DIRECTORY_BASE=e.RIGHTS_REGULAR_FILE_INHERITING=void 0,e.WASI_ESUCCESS=0,e.WASI_E2BIG=1,e.WASI_EACCES=2,e.WASI_EADDRINUSE=3,e.WASI_EADDRNOTAVAIL=4,e.WASI_EAFNOSUPPORT=5,e.WASI_EAGAIN=6,e.WASI_EALREADY=7,e.WASI_EBADF=8,e.WASI_EBADMSG=9,e.WASI_EBUSY=10,e.WASI_ECANCELED=11,e.WASI_ECHILD=12,e.WASI_ECONNABORTED=13,e.WASI_ECONNREFUSED=14,e.WASI_ECONNRESET=15,e.WASI_EDEADLK=16,e.WASI_EDESTADDRREQ=17,e.WASI_EDOM=18,e.WASI_EDQUOT=19,e.WASI_EEXIST=20,e.WASI_EFAULT=21,e.WASI_EFBIG=22,e.WASI_EHOSTUNREACH=23,e.WASI_EIDRM=24,e.WASI_EILSEQ=25,e.WASI_EINPROGRESS=26,e.WASI_EINTR=27,e.WASI_EINVAL=28,e.WASI_EIO=29,e.WASI_EISCONN=30,e.WASI_EISDIR=31,e.WASI_ELOOP=32,e.WASI_EMFILE=33,e.WASI_EMLINK=34,e.WASI_EMSGSIZE=35,e.WASI_EMULTIHOP=36,e.WASI_ENAMETOOLONG=37,e.WASI_ENETDOWN=38,e.WASI_ENETRESET=39,e.WASI_ENETUNREACH=40,e.WASI_ENFILE=41,e.WASI_ENOBUFS=42,e.WASI_ENODEV=43,e.WASI_ENOENT=44,e.WASI_ENOEXEC=45,e.WASI_ENOLCK=46,e.WASI_ENOLINK=47,e.WASI_ENOMEM=48,e.WASI_ENOMSG=49,e.WASI_ENOPROTOOPT=50,e.WASI_ENOSPC=51,e.WASI_ENOSYS=52,e.WASI_ENOTCONN=53,e.WASI_ENOTDIR=54,e.WASI_ENOTEMPTY=55,e.WASI_ENOTRECOVERABLE=56,e.WASI_ENOTSOCK=57,e.WASI_ENOTSUP=58,e.WASI_ENOTTY=59,e.WASI_ENXIO=60,e.WASI_EOVERFLOW=61,e.WASI_EOWNERDEAD=62,e.WASI_EPERM=63,e.WASI_EPIPE=64,e.WASI_EPROTO=65,e.WASI_EPROTONOSUPPORT=66,e.WASI_EPROTOTYPE=67,e.WASI_ERANGE=68,e.WASI_EROFS=69,e.WASI_ESPIPE=70,e.WASI_ESRCH=71,e.WASI_ESTALE=72,e.WASI_ETIMEDOUT=73,e.WASI_ETXTBSY=74,e.WASI_EXDEV=75,e.WASI_ENOTCAPABLE=76,e.WASI_SIGABRT=0,e.WASI_SIGALRM=1,e.WASI_SIGBUS=2,e.WASI_SIGCHLD=3,e.WASI_SIGCONT=4,e.WASI_SIGFPE=5,e.WASI_SIGHUP=6,e.WASI_SIGILL=7,e.WASI_SIGINT=8,e.WASI_SIGKILL=9,e.WASI_SIGPIPE=10,e.WASI_SIGQUIT=11,e.WASI_SIGSEGV=12,e.WASI_SIGSTOP=13,e.WASI_SIGTERM=14,e.WASI_SIGTRAP=15,e.WASI_SIGTSTP=16,e.WASI_SIGTTIN=17,e.WASI_SIGTTOU=18,e.WASI_SIGURG=19,e.WASI_SIGUSR1=20,e.WASI_SIGUSR2=21,e.WASI_SIGVTALRM=22,e.WASI_SIGXCPU=23,e.WASI_SIGXFSZ=24,e.WASI_FILETYPE_UNKNOWN=0,e.WASI_FILETYPE_BLOCK_DEVICE=1,e.WASI_FILETYPE_CHARACTER_DEVICE=2,e.WASI_FILETYPE_DIRECTORY=3,e.WASI_FILETYPE_REGULAR_FILE=4,e.WASI_FILETYPE_SOCKET_DGRAM=5,e.WASI_FILETYPE_SOCKET_STREAM=6,e.WASI_FILETYPE_SYMBOLIC_LINK=7,e.WASI_FDFLAG_APPEND=1,e.WASI_FDFLAG_DSYNC=2,e.WASI_FDFLAG_NONBLOCK=4,e.WASI_FDFLAG_RSYNC=8,e.WASI_FDFLAG_SYNC=16,e.WASI_RIGHT_FD_DATASYNC=BigInt(1),e.WASI_RIGHT_FD_READ=BigInt(2),e.WASI_RIGHT_FD_SEEK=BigInt(4),e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS=BigInt(8),e.WASI_RIGHT_FD_SYNC=BigInt(16),e.WASI_RIGHT_FD_TELL=BigInt(32),e.WASI_RIGHT_FD_WRITE=BigInt(64),e.WASI_RIGHT_FD_ADVISE=BigInt(128),e.WASI_RIGHT_FD_ALLOCATE=BigInt(256),e.WASI_RIGHT_PATH_CREATE_DIRECTORY=BigInt(512),e.WASI_RIGHT_PATH_CREATE_FILE=BigInt(1024),e.WASI_RIGHT_PATH_LINK_SOURCE=BigInt(2048),e.WASI_RIGHT_PATH_LINK_TARGET=BigInt(4096),e.WASI_RIGHT_PATH_OPEN=BigInt(8192),e.WASI_RIGHT_FD_READDIR=BigInt(16384),e.WASI_RIGHT_PATH_READLINK=BigInt(32768),e.WASI_RIGHT_PATH_RENAME_SOURCE=BigInt(65536),e.WASI_RIGHT_PATH_RENAME_TARGET=BigInt(131072),e.WASI_RIGHT_PATH_FILESTAT_GET=BigInt(262144),e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE=BigInt(524288),e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES=BigInt(1048576),e.WASI_RIGHT_FD_FILESTAT_GET=BigInt(2097152),e.WASI_RIGHT_FD_FILESTAT_SET_SIZE=BigInt(4194304),e.WASI_RIGHT_FD_FILESTAT_SET_TIMES=BigInt(8388608),e.WASI_RIGHT_PATH_SYMLINK=BigInt(16777216),e.WASI_RIGHT_PATH_REMOVE_DIRECTORY=BigInt(33554432),e.WASI_RIGHT_PATH_UNLINK_FILE=BigInt(67108864),e.WASI_RIGHT_POLL_FD_READWRITE=BigInt(134217728),e.WASI_RIGHT_SOCK_SHUTDOWN=BigInt(268435456),e.RIGHTS_ALL=e.WASI_RIGHT_FD_DATASYNC|e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_SEEK|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_SYNC|e.WASI_RIGHT_FD_TELL|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_ADVISE|e.WASI_RIGHT_FD_ALLOCATE|e.WASI_RIGHT_PATH_CREATE_DIRECTORY|e.WASI_RIGHT_PATH_CREATE_FILE|e.WASI_RIGHT_PATH_LINK_SOURCE|e.WASI_RIGHT_PATH_LINK_TARGET|e.WASI_RIGHT_PATH_OPEN|e.WASI_RIGHT_FD_READDIR|e.WASI_RIGHT_PATH_READLINK|e.WASI_RIGHT_PATH_RENAME_SOURCE|e.WASI_RIGHT_PATH_RENAME_TARGET|e.WASI_RIGHT_PATH_FILESTAT_GET|e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE|e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_FD_FILESTAT_SET_TIMES|e.WASI_RIGHT_FD_FILESTAT_SET_SIZE|e.WASI_RIGHT_PATH_SYMLINK|e.WASI_RIGHT_PATH_UNLINK_FILE|e.WASI_RIGHT_PATH_REMOVE_DIRECTORY|e.WASI_RIGHT_POLL_FD_READWRITE|e.WASI_RIGHT_SOCK_SHUTDOWN,e.RIGHTS_BLOCK_DEVICE_BASE=e.RIGHTS_ALL,e.RIGHTS_BLOCK_DEVICE_INHERITING=e.RIGHTS_ALL,e.RIGHTS_CHARACTER_DEVICE_BASE=e.RIGHTS_ALL,e.RIGHTS_CHARACTER_DEVICE_INHERITING=e.RIGHTS_ALL,e.RIGHTS_REGULAR_FILE_BASE=e.WASI_RIGHT_FD_DATASYNC|e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_SEEK|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_SYNC|e.WASI_RIGHT_FD_TELL|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_ADVISE|e.WASI_RIGHT_FD_ALLOCATE|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_FD_FILESTAT_SET_SIZE|e.WASI_RIGHT_FD_FILESTAT_SET_TIMES|e.WASI_RIGHT_POLL_FD_READWRITE,e.RIGHTS_REGULAR_FILE_INHERITING=BigInt(0),e.RIGHTS_DIRECTORY_BASE=e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_SYNC|e.WASI_RIGHT_FD_ADVISE|e.WASI_RIGHT_PATH_CREATE_DIRECTORY|e.WASI_RIGHT_PATH_CREATE_FILE|e.WASI_RIGHT_PATH_LINK_SOURCE|e.WASI_RIGHT_PATH_LINK_TARGET|e.WASI_RIGHT_PATH_OPEN|e.WASI_RIGHT_FD_READDIR|e.WASI_RIGHT_PATH_READLINK|e.WASI_RIGHT_PATH_RENAME_SOURCE|e.WASI_RIGHT_PATH_RENAME_TARGET|e.WASI_RIGHT_PATH_FILESTAT_GET|e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE|e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_FD_FILESTAT_SET_TIMES|e.WASI_RIGHT_PATH_SYMLINK|e.WASI_RIGHT_PATH_UNLINK_FILE|e.WASI_RIGHT_PATH_REMOVE_DIRECTORY|e.WASI_RIGHT_POLL_FD_READWRITE,e.RIGHTS_DIRECTORY_INHERITING=e.RIGHTS_DIRECTORY_BASE|e.RIGHTS_REGULAR_FILE_BASE,e.RIGHTS_SOCKET_BASE=e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_POLL_FD_READWRITE|e.WASI_RIGHT_SOCK_SHUTDOWN,e.RIGHTS_SOCKET_INHERITING=e.RIGHTS_ALL,e.RIGHTS_TTY_BASE=e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_POLL_FD_READWRITE,e.RIGHTS_TTY_INHERITING=BigInt(0),e.WASI_CLOCK_REALTIME=0,e.WASI_CLOCK_MONOTONIC=1,e.WASI_CLOCK_PROCESS_CPUTIME_ID=2,e.WASI_CLOCK_THREAD_CPUTIME_ID=3,e.WASI_EVENTTYPE_CLOCK=0,e.WASI_EVENTTYPE_FD_READ=1,e.WASI_EVENTTYPE_FD_WRITE=2,e.WASI_FILESTAT_SET_ATIM=1,e.WASI_FILESTAT_SET_ATIM_NOW=2,e.WASI_FILESTAT_SET_MTIM=4,e.WASI_FILESTAT_SET_MTIM_NOW=8,e.WASI_O_CREAT=1,e.WASI_O_DIRECTORY=2,e.WASI_O_EXCL=4,e.WASI_O_TRUNC=8,e.WASI_PREOPENTYPE_DIR=0,e.WASI_DIRCOOKIE_START=0,e.WASI_STDIN_FILENO=0,e.WASI_STDOUT_FILENO=1,e.WASI_STDERR_FILENO=2,e.WASI_WHENCE_SET=0,e.WASI_WHENCE_CUR=1,e.WASI_WHENCE_END=2,e.ERROR_MAP={E2BIG:e.WASI_E2BIG,EACCES:e.WASI_EACCES,EADDRINUSE:e.WASI_EADDRINUSE,EADDRNOTAVAIL:e.WASI_EADDRNOTAVAIL,EAFNOSUPPORT:e.WASI_EAFNOSUPPORT,EALREADY:e.WASI_EALREADY,EAGAIN:e.WASI_EAGAIN,EBADF:e.WASI_EBADF,EBADMSG:e.WASI_EBADMSG,EBUSY:e.WASI_EBUSY,ECANCELED:e.WASI_ECANCELED,ECHILD:e.WASI_ECHILD,ECONNABORTED:e.WASI_ECONNABORTED,ECONNREFUSED:e.WASI_ECONNREFUSED,ECONNRESET:e.WASI_ECONNRESET,EDEADLOCK:e.WASI_EDEADLK,EDESTADDRREQ:e.WASI_EDESTADDRREQ,EDOM:e.WASI_EDOM,EDQUOT:e.WASI_EDQUOT,EEXIST:e.WASI_EEXIST,EFAULT:e.WASI_EFAULT,EFBIG:e.WASI_EFBIG,EHOSTDOWN:e.WASI_EHOSTUNREACH,EHOSTUNREACH:e.WASI_EHOSTUNREACH,EIDRM:e.WASI_EIDRM,EILSEQ:e.WASI_EILSEQ,EINPROGRESS:e.WASI_EINPROGRESS,EINTR:e.WASI_EINTR,EINVAL:e.WASI_EINVAL,EIO:e.WASI_EIO,EISCONN:e.WASI_EISCONN,EISDIR:e.WASI_EISDIR,ELOOP:e.WASI_ELOOP,EMFILE:e.WASI_EMFILE,EMLINK:e.WASI_EMLINK,EMSGSIZE:e.WASI_EMSGSIZE,EMULTIHOP:e.WASI_EMULTIHOP,ENAMETOOLONG:e.WASI_ENAMETOOLONG,ENETDOWN:e.WASI_ENETDOWN,ENETRESET:e.WASI_ENETRESET,ENETUNREACH:e.WASI_ENETUNREACH,ENFILE:e.WASI_ENFILE,ENOBUFS:e.WASI_ENOBUFS,ENODEV:e.WASI_ENODEV,ENOENT:e.WASI_ENOENT,ENOEXEC:e.WASI_ENOEXEC,ENOLCK:e.WASI_ENOLCK,ENOLINK:e.WASI_ENOLINK,ENOMEM:e.WASI_ENOMEM,ENOMSG:e.WASI_ENOMSG,ENOPROTOOPT:e.WASI_ENOPROTOOPT,ENOSPC:e.WASI_ENOSPC,ENOSYS:e.WASI_ENOSYS,ENOTCONN:e.WASI_ENOTCONN,ENOTDIR:e.WASI_ENOTDIR,ENOTEMPTY:e.WASI_ENOTEMPTY,ENOTRECOVERABLE:e.WASI_ENOTRECOVERABLE,ENOTSOCK:e.WASI_ENOTSOCK,ENOTTY:e.WASI_ENOTTY,ENXIO:e.WASI_ENXIO,EOVERFLOW:e.WASI_EOVERFLOW,EOWNERDEAD:e.WASI_EOWNERDEAD,EPERM:e.WASI_EPERM,EPIPE:e.WASI_EPIPE,EPROTO:e.WASI_EPROTO,EPROTONOSUPPORT:e.WASI_EPROTONOSUPPORT,EPROTOTYPE:e.WASI_EPROTOTYPE,ERANGE:e.WASI_ERANGE,EROFS:e.WASI_EROFS,ESPIPE:e.WASI_ESPIPE,ESRCH:e.WASI_ESRCH,ESTALE:e.WASI_ESTALE,ETIMEDOUT:e.WASI_ETIMEDOUT,ETXTBSY:e.WASI_ETXTBSY,EXDEV:e.WASI_EXDEV},e.SIGNAL_MAP=((r={})[e.WASI_SIGHUP]="SIGHUP",r[e.WASI_SIGINT]="SIGINT",r[e.WASI_SIGQUIT]="SIGQUIT",r[e.WASI_SIGILL]="SIGILL",r[e.WASI_SIGTRAP]="SIGTRAP",r[e.WASI_SIGABRT]="SIGABRT",r[e.WASI_SIGBUS]="SIGBUS",r[e.WASI_SIGFPE]="SIGFPE",r[e.WASI_SIGKILL]="SIGKILL",r[e.WASI_SIGUSR1]="SIGUSR1",r[e.WASI_SIGSEGV]="SIGSEGV",r[e.WASI_SIGUSR2]="SIGUSR2",r[e.WASI_SIGPIPE]="SIGPIPE",r[e.WASI_SIGALRM]="SIGALRM",r[e.WASI_SIGTERM]="SIGTERM",r[e.WASI_SIGCHLD]="SIGCHLD",r[e.WASI_SIGCONT]="SIGCONT",r[e.WASI_SIGSTOP]="SIGSTOP",r[e.WASI_SIGTSTP]="SIGTSTP",r[e.WASI_SIGTTIN]="SIGTTIN",r[e.WASI_SIGTTOU]="SIGTTOU",r[e.WASI_SIGURG]="SIGURG",r[e.WASI_SIGXCPU]="SIGXCPU",r[e.WASI_SIGXFSZ]="SIGXFSZ",r[e.WASI_SIGVTALRM]="SIGVTALRM",r)},214:function(t,e,r){"use strict";var n=r(5108),i=this&&this.__assign||function(){return i=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},i.apply(this,arguments)},o=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function a(t){try{s(n.next(t))}catch(t){o(t)}}function u(t){try{s(n.throw(t))}catch(t){o(t)}}function s(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,u)}s((n=n.apply(t,e||[])).next())}))},a=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},u=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.createFileSystem=void 0;var l=s(r(6665)),_=r(9827),c=r(2839);function f(t,e){if("zip"==t.type)return function(t,e){void 0===e&&(e="/");var r=(0,_.createFsFromVolume)(new _.Volume);return(0,l.default)({data:t,fs:r,directory:e}),r}(t.data,t.mountpoint);if("zip-async"==t.type)return function(t,e){void 0===e&&(e="/");var r=(0,_.createFsFromVolume)(new _.Volume),i=o(this,void 0,void 0,(function(){var i,o;return a(this,(function(a){switch(a.label){case 0:return a.trys.push([0,2,,3]),[4,t()];case 1:return i=a.sent(),[3,3];case 2:throw o=a.sent(),n.warn("FAILED to load async filesystem for '".concat(e,"' - ").concat(o)),o;case 3:return(0,l.default)({data:i,fs:r,directory:e}),[2]}}))}));return r.waitUntilLoaded=function(){return i},r}(t.getData,t.mountpoint);if("zipfile"==t.type)throw Error("you must convert zipfile -- read ".concat(t.zipfile," into memory"));if("zipurl"==t.type)throw Error("you must convert zipurl -- read ".concat(t.zipurl," into memory"));if("native"==t.type)return null==e?e:function(t){var e=this;function r(e){var r=0;for(var n in _.fs.constants)n.startsWith("O_")&&e&_.fs.constants[n]&&(r|=t.constants[n]);return r}var n=i(i({},t.promises),{open:function(r,n,i){return o(e,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,t.promises.open(r,n,i)];case 1:return[2,e.sent()]}}))}))}});return i(i({},i(i({},t),{promises:n})),{open:function(n,i,u){return o(e,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,t.open(n,r(i),u)];case 1:return[2,e.sent()]}}))}))},openSync:function(e,n,i){return t.openSync(e,r(n),i)}})}(e);if("mem"==t.type)return I(t.contents);if("dev"==t.type)return function(){var t=_.Volume.fromJSON({"/dev/stdin":"","/dev/stdout":"","/dev/stderr":""});t.releasedFds=[0,1,2];var e=t.openSync("/dev/stderr","w"),r=t.openSync("/dev/stdout","w"),n=t.openSync("/dev/stdin","r");if(2!=e)throw Error("invalid handle for stderr: ".concat(e));if(1!=r)throw Error("invalid handle for stdout: ".concat(r));if(0!=n)throw Error("invalid handle for stdin: ".concat(n));return(0,_.createFsFromVolume)(t)}();throw Error("unknown spec type - ".concat(JSON.stringify(t)))}function I(t){var e=null!=t?_.Volume.fromJSON(t):new _.Volume;return(0,_.createFsFromVolume)(e)}e.createFileSystem=function(t,e){var r,n,s,l=this;if(0==t.length)return I();if(1==t.length)return null!==(s=f(t[0],e))&&void 0!==s?s:I();var S=new c.Union,E=[];try{for(var A=u(t),d=A.next();!d.done;d=A.next()){var p=f(d.value,e);null!=p&&(S.use(p),null!=p.waitUntilLoaded&&E.push(p.waitUntilLoaded.bind(p)))}}catch(t){r={error:t}}finally{try{d&&!d.done&&(n=A.return)&&n.call(A)}finally{if(r)throw r.error}}return i(i({},S),{constants:_.fs.constants,waitUntilLoaded:function(){return o(l,void 0,void 0,(function(){var t,e,r,n,i;return a(this,(function(o){switch(o.label){case 0:o.trys.push([0,5,6,7]),t=u(E),e=t.next(),o.label=1;case 1:return e.done?[3,4]:[4,(0,e.value)()];case 2:o.sent(),o.label=3;case 3:return e=t.next(),[3,1];case 4:return[3,7];case 5:return r=o.sent(),n={error:r},[3,7];case 6:try{e&&!e.done&&(i=t.return)&&i.call(t)}finally{if(n)throw n.error}return[7];case 7:return[2]}}))}))}})}},3728:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.createFileSystem=void 0;var i=n(r(9215));e.default=i.default;var o=r(214);Object.defineProperty(e,"createFileSystem",{enumerable:!0,get:function(){return o.createFileSystem}})},2327:function(t,e){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.WASIKillError=e.WASIExitError=e.WASIError=void 0;var i=function(t){function e(r){var n=t.call(this)||this;return n.errno=r,Object.setPrototypeOf(n,e.prototype),n}return n(e,t),e}(Error);e.WASIError=i;var o=function(t){function e(r){var n=t.call(this,"WASI Exit error: ".concat(r))||this;return n.code=r,Object.setPrototypeOf(n,e.prototype),n}return n(e,t),e}(Error);e.WASIExitError=o;var a=function(t){function e(r){var n=t.call(this,"WASI Kill signal: ".concat(r))||this;return n.signal=r,Object.setPrototypeOf(n,e.prototype),n}return n(e,t),e}(Error);e.WASIKillError=a},6665:function(t,e,r){"use strict";var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a};Object.defineProperty(e,"__esModule",{value:!0});var o=r(6470),a=r(1811);e.default=function(t){var e,r,u=t.data,s=t.fs,l=t.directory;if(u instanceof ArrayBuffer&&(u=new Uint8Array(u)),!(u instanceof Uint8Array))throw Error("impossible");var _=(0,a.unzipSync)(u);try{for(var c=n(Object.entries(_)),f=c.next();!f.done;f=c.next()){var I=i(f.value,2),S=I[0],E=I[1],A=(0,o.join)(l,S);s.mkdirSync((0,o.dirname)(A),{recursive:!0}),s.writeFileSync(A,E)}}catch(t){e={error:t}}finally{try{f&&!f.done&&(r=c.return)&&r.call(c)}finally{if(e)throw e.error}}}},9215:function(t,e,r){"use strict";var n=r(8764).Buffer,i=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},o=this&&this.__spreadArray||function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))},a=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=u(r(5912)),l=(0,s.default)("wasi"),_=(0,s.default)("wasi:open"),c=r(2327),f=u(r(905)),I=r(3622),S=I.WASI_RIGHT_FD_DATASYNC|I.WASI_RIGHT_FD_READ|I.WASI_RIGHT_FD_SYNC|I.WASI_RIGHT_FD_ADVISE|I.WASI_RIGHT_FD_FILESTAT_GET|I.WASI_RIGHT_POLL_FD_READWRITE,E=I.WASI_RIGHT_FD_DATASYNC|I.WASI_RIGHT_FD_WRITE|I.WASI_RIGHT_FD_SYNC|I.WASI_RIGHT_FD_ADVISE|I.WASI_RIGHT_FD_FILESTAT_GET|I.WASI_RIGHT_POLL_FD_READWRITE,A=E,d=function(t){var e=Math.trunc(t),r=BigInt(Math.round(1e6*(t-e)));return BigInt(e)*BigInt(1e6)+r},p=function(t){"number"==typeof t&&(t=Math.trunc(t));var e=BigInt(t);return Number(e/BigInt(1e6))},T=function(t){return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];try{return t.apply(void 0,o([],i(e),!1))}catch(t){var n=t;if((null==n?void 0:n.code)&&"string"==typeof(null==n?void 0:n.code))return I.ERROR_MAP[n.code]||I.WASI_EINVAL;if(n instanceof c.WASIError)return n.errno;throw n}}},v=function(t,e){var r=t.FD_MAP.get(e);if(!r)throw new c.WASIError(I.WASI_EBADF);if(void 0===r.filetype){var n=t.bindings.fs.fstatSync(r.real),i=h(t,e,n),o=i.filetype,a=i.rightsBase,u=i.rightsInheriting;r.filetype=o,r.rights||(r.rights={base:a,inheriting:u})}return r},h=function(t,e,r){switch(!0){case r.isBlockDevice():return{filetype:I.WASI_FILETYPE_BLOCK_DEVICE,rightsBase:I.RIGHTS_BLOCK_DEVICE_BASE,rightsInheriting:I.RIGHTS_BLOCK_DEVICE_INHERITING};case r.isCharacterDevice():var n=I.WASI_FILETYPE_CHARACTER_DEVICE;return void 0!==e&&t.bindings.isTTY(e)?{filetype:n,rightsBase:I.RIGHTS_TTY_BASE,rightsInheriting:I.RIGHTS_TTY_INHERITING}:{filetype:n,rightsBase:I.RIGHTS_CHARACTER_DEVICE_BASE,rightsInheriting:I.RIGHTS_CHARACTER_DEVICE_INHERITING};case r.isDirectory():return{filetype:I.WASI_FILETYPE_DIRECTORY,rightsBase:I.RIGHTS_DIRECTORY_BASE,rightsInheriting:I.RIGHTS_DIRECTORY_INHERITING};case r.isFIFO():return{filetype:I.WASI_FILETYPE_SOCKET_STREAM,rightsBase:I.RIGHTS_SOCKET_BASE,rightsInheriting:I.RIGHTS_SOCKET_INHERITING};case r.isFile():return{filetype:I.WASI_FILETYPE_REGULAR_FILE,rightsBase:I.RIGHTS_REGULAR_FILE_BASE,rightsInheriting:I.RIGHTS_REGULAR_FILE_INHERITING};case r.isSocket():return{filetype:I.WASI_FILETYPE_SOCKET_STREAM,rightsBase:I.RIGHTS_SOCKET_BASE,rightsInheriting:I.RIGHTS_SOCKET_INHERITING};case r.isSymbolicLink():return{filetype:I.WASI_FILETYPE_SYMBOLIC_LINK,rightsBase:BigInt(0),rightsInheriting:BigInt(0)};default:return{filetype:I.WASI_FILETYPE_UNKNOWN,rightsBase:BigInt(0),rightsInheriting:BigInt(0)}}},y=function(){function t(t){var e,r,u=this;this.sleep=t.sleep,this.getStdin=t.getStdin,this.sendStdout=t.sendStdout,this.sendStderr=t.sendStderr;var s={};t.preopens&&(s=t.preopens);var y={};t&&t.env&&(y=t.env);var m=[];t&&t.args&&(m=t.args);var g=t.bindings;this.memory=void 0,this.view=void 0,this.bindings=g,this.FD_MAP=new Map([[I.WASI_STDIN_FILENO,{real:0,filetype:I.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:S,inheriting:BigInt(0)},path:"/dev/stdin"}],[I.WASI_STDOUT_FILENO,{real:1,filetype:I.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:E,inheriting:BigInt(0)},path:"/dev/stdout"}],[I.WASI_STDERR_FILENO,{real:2,filetype:I.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:A,inheriting:BigInt(0)},path:"/dev/stderr"}]]);var W=this.bindings.fs,R=this.bindings.path;try{for(var O=a(Object.entries(s)),w=O.next();!w.done;w=O.next()){var b=i(w.value,2),N=b[0],D=b[1],L=W.openSync(D,W.constants.O_RDONLY),G=this.getUnusedFileDescriptor();this.FD_MAP.set(G,{real:L,filetype:I.WASI_FILETYPE_DIRECTORY,rights:{base:I.RIGHTS_DIRECTORY_BASE,inheriting:I.RIGHTS_DIRECTORY_INHERITING},fakePath:N,path:D})}}catch(t){e={error:t}}finally{try{w&&!w.done&&(r=O.return)&&r.call(O)}finally{if(e)throw e.error}}var C=function(t,e){return u.refreshMemory(),Array.from({length:e},(function(e,r){var n=t+8*r,i=u.view.getUint32(n,!0),o=u.view.getUint32(n+4,!0),a=new Uint8Array(u.memory.buffer,i,o);return(0,f.default)(a)}))},F=function(t,e){var r=v(u,t);if(e!==BigInt(0)&&(r.rights.base&e)===BigInt(0))throw new c.WASIError(I.WASI_EPERM);return r},P=g.hrtime(),H=function(t){switch(t){case I.WASI_CLOCK_MONOTONIC:return g.hrtime();case I.WASI_CLOCK_REALTIME:return d(Date.now());case I.WASI_CLOCK_PROCESS_CPUTIME_ID:case I.WASI_CLOCK_THREAD_CPUTIME_ID:return g.hrtime()-P;default:return null}};this.wasiImport={args_get:function(t,e){u.refreshMemory();var r=t,i=e;return m.forEach((function(t){u.view.setUint32(r,i,!0),r+=4,i+=n.from(u.memory.buffer).write("".concat(t,"\0"),i)})),I.WASI_ESUCCESS},args_sizes_get:function(t,e){u.refreshMemory(),u.view.setUint32(t,m.length,!0);var r=m.reduce((function(t,e){return t+n.byteLength(e)+1}),0);return u.view.setUint32(e,r,!0),I.WASI_ESUCCESS},environ_get:function(t,e){u.refreshMemory();var r=t,o=e;return Object.entries(y).forEach((function(t){var e=i(t,2),a=e[0],s=e[1];u.view.setUint32(r,o,!0),r+=4,o+=n.from(u.memory.buffer).write("".concat(a,"=").concat(s,"\0"),o)})),I.WASI_ESUCCESS},environ_sizes_get:function(t,e){u.refreshMemory();var r=Object.entries(y).map((function(t){var e=i(t,2),r=e[0],n=e[1];return"".concat(r,"=").concat(n,"\0")})),o=r.reduce((function(t,e){return t+n.byteLength(e)}),0);return u.view.setUint32(t,r.length,!0),u.view.setUint32(e,o,!0),I.WASI_ESUCCESS},clock_res_get:function(t,e){var r;switch(t){case I.WASI_CLOCK_MONOTONIC:case I.WASI_CLOCK_PROCESS_CPUTIME_ID:case I.WASI_CLOCK_THREAD_CPUTIME_ID:r=BigInt(1);break;case I.WASI_CLOCK_REALTIME:r=BigInt(1e3)}if(!r)throw Error("invalid clockId");return u.view.setBigUint64(e,r),I.WASI_ESUCCESS},clock_time_get:function(t,e,r){u.refreshMemory();var n=H(t);return null===n?I.WASI_EINVAL:(u.view.setBigUint64(r,BigInt(n),!0),I.WASI_ESUCCESS)},fd_advise:T((function(t,e,r,n){return F(t,I.WASI_RIGHT_FD_ADVISE),I.WASI_ENOSYS})),fd_allocate:T((function(t,e,r){return F(t,I.WASI_RIGHT_FD_ALLOCATE),I.WASI_ENOSYS})),fd_close:T((function(t){var e=F(t,BigInt(0));return W.closeSync(e.real),u.FD_MAP.delete(t),I.WASI_ESUCCESS})),fd_datasync:T((function(t){var e=F(t,I.WASI_RIGHT_FD_DATASYNC);return W.fdatasyncSync(e.real),I.WASI_ESUCCESS})),fd_fdstat_get:T((function(t,e){var r=F(t,BigInt(0));if(u.refreshMemory(),null==r.filetype)throw Error("stats.filetype must be set");return u.view.setUint8(e,r.filetype),u.view.setUint16(e+2,0,!0),u.view.setUint16(e+4,0,!0),u.view.setBigUint64(e+8,BigInt(r.rights.base),!0),u.view.setBigUint64(e+8+8,BigInt(r.rights.inheriting),!0),I.WASI_ESUCCESS})),fd_fdstat_set_flags:T((function(t,e){return F(t,I.WASI_RIGHT_FD_FDSTAT_SET_FLAGS),I.WASI_ENOSYS})),fd_fdstat_set_rights:T((function(t,e,r){var n=F(t,BigInt(0));return(n.rights.base|e)>n.rights.base||(n.rights.inheriting|r)>n.rights.inheriting?I.WASI_EPERM:(n.rights.base=e,n.rights.inheriting=r,I.WASI_ESUCCESS)})),fd_filestat_get:T((function(t,e){var r=F(t,I.WASI_RIGHT_FD_FILESTAT_GET),n=W.fstatSync(r.real);if(u.refreshMemory(),u.view.setBigUint64(e,BigInt(n.dev),!0),e+=8,u.view.setBigUint64(e,BigInt(n.ino),!0),e+=8,null==r.filetype)throw Error("stats.filetype must be set");return u.view.setUint8(e,r.filetype),e+=8,u.view.setBigUint64(e,BigInt(n.nlink),!0),e+=8,u.view.setBigUint64(e,BigInt(n.size),!0),e+=8,u.view.setBigUint64(e,d(n.atimeMs),!0),e+=8,u.view.setBigUint64(e,d(n.mtimeMs),!0),e+=8,u.view.setBigUint64(e,d(n.ctimeMs),!0),I.WASI_ESUCCESS})),fd_filestat_set_size:T((function(t,e){var r=F(t,I.WASI_RIGHT_FD_FILESTAT_SET_SIZE);return W.ftruncateSync(r.real,Number(e)),I.WASI_ESUCCESS})),fd_filestat_set_times:T((function(t,e,r,n){var i=F(t,I.WASI_RIGHT_FD_FILESTAT_SET_TIMES),o=W.fstatSync(i.real),a=o.atime,u=o.mtime,s=p(H(I.WASI_CLOCK_REALTIME)),l=I.WASI_FILESTAT_SET_ATIM|I.WASI_FILESTAT_SET_ATIM_NOW;if((n&l)===l)return I.WASI_EINVAL;var _=I.WASI_FILESTAT_SET_MTIM|I.WASI_FILESTAT_SET_MTIM_NOW;return(n&_)===_?I.WASI_EINVAL:((n&I.WASI_FILESTAT_SET_ATIM)===I.WASI_FILESTAT_SET_ATIM?a=p(e):(n&I.WASI_FILESTAT_SET_ATIM_NOW)===I.WASI_FILESTAT_SET_ATIM_NOW&&(a=s),(n&I.WASI_FILESTAT_SET_MTIM)===I.WASI_FILESTAT_SET_MTIM?u=p(r):(n&I.WASI_FILESTAT_SET_MTIM_NOW)===I.WASI_FILESTAT_SET_MTIM_NOW&&(u=s),W.futimesSync(i.real,new Date(a),new Date(u)),I.WASI_ESUCCESS)})),fd_prestat_get:T((function(t,e){var r,i=F(t,BigInt(0));return i.path?(u.refreshMemory(),u.view.setUint8(e,I.WASI_PREOPENTYPE_DIR),u.view.setUint32(e+4,n.byteLength(null!==(r=i.fakePath)&&void 0!==r?r:i.path),!0),I.WASI_ESUCCESS):I.WASI_EINVAL})),fd_prestat_dir_name:T((function(t,e,r){var i,o=F(t,BigInt(0));return o.path?(u.refreshMemory(),n.from(u.memory.buffer).write(null!==(i=o.fakePath)&&void 0!==i?i:o.path,e,r,"utf8"),I.WASI_ESUCCESS):I.WASI_EINVAL})),fd_pwrite:T((function(t,e,r,n,i){var o=F(t,I.WASI_RIGHT_FD_WRITE|I.WASI_RIGHT_FD_SEEK),a=0;return C(e,r).forEach((function(t){for(var e=0;e<t.byteLength;)e+=W.writeSync(o.real,t,e,t.byteLength-e,Number(n)+a+e);a+=e})),u.view.setUint32(i,a,!0),I.WASI_ESUCCESS})),fd_write:T((function(t,e,r,n){var i=F(t,I.WASI_RIGHT_FD_WRITE),o=1==i.real,a=2==i.real,s=0;return C(e,r).forEach((function(t){if(0!=t.byteLength)if(o&&null!=u.sendStdout)u.sendStdout(t),s+=t.byteLength;else if(a&&null!=u.sendStderr)u.sendStderr(t),s+=t.byteLength;else{for(var e=0;e<t.byteLength;){var r=W.writeSync(i.real,t,e,t.byteLength-e,i.offset?Number(i.offset):null);i.offset&&(i.offset+=BigInt(r)),e+=r}s+=e}})),u.view.setUint32(n,s,!0),I.WASI_ESUCCESS})),fd_pread:T((function(t,e,r,n,i){var o,s,l=F(t,I.WASI_RIGHT_FD_READ|I.WASI_RIGHT_FD_SEEK),_=0;try{t:for(var c=a(C(e,r)),f=c.next();!f.done;f=c.next()){for(var S=f.value,E=0;E<S.byteLength;){var A=S.byteLength-E,d=W.readSync(l.real,S,E,S.byteLength-E,Number(n)+_+E);if(E+=d,_+=d,0===d||d<A)break t}_+=E}}catch(t){o={error:t}}finally{try{f&&!f.done&&(s=c.return)&&s.call(c)}finally{if(o)throw o.error}}return u.view.setUint32(i,_,!0),I.WASI_ESUCCESS})),fd_read:T((function(t,e,r,n){var i,o,s=F(t,I.WASI_RIGHT_FD_READ),l=0===s.real,_=0;try{t:for(var c=a(C(e,r)),f=c.next();!f.done;f=c.next())for(var S=f.value,E=0;E<S.byteLength;){var A=S.byteLength-E,d=l||void 0===s.offset?null:Number(s.offset),p=0;if(l&&null!=u.getStdin?null!=u.stdinBuffer&&((p=u.stdinBuffer.copy(S))==u.stdinBuffer.length?u.stdinBuffer=void 0:u.stdinBuffer=u.stdinBuffer.slice(p)):p=W.readSync(s.real,S,E,A,d),s.filetype==I.WASI_FILETYPE_REGULAR_FILE&&(s.offset=(s.offset?s.offset:BigInt(0))+BigInt(p)),E+=p,_+=p,0===p||p<A)break t}}catch(t){i={error:t}}finally{try{f&&!f.done&&(o=c.return)&&o.call(c)}finally{if(i)throw i.error}}return u.view.setUint32(n,_,!0),I.WASI_ESUCCESS})),fd_readdir:T((function(t,e,r,i,o){var a=F(t,I.WASI_RIGHT_FD_READDIR);u.refreshMemory();for(var s=W.readdirSync(a.path,{withFileTypes:!0}),l=e,_=Number(i);_<s.length;_+=1){var c=s[_],f=n.byteLength(c.name);if(e-l>r)break;if(u.view.setBigUint64(e,BigInt(_+1),!0),(e+=8)-l>r)break;var S=W.lstatSync(R.resolve(a.path,c.name));if(u.view.setBigUint64(e,BigInt(S.ino),!0),(e+=8)-l>r)break;if(u.view.setUint32(e,f,!0),(e+=4)-l>r)break;var E=void 0;switch(!0){case S.isBlockDevice():E=I.WASI_FILETYPE_BLOCK_DEVICE;break;case S.isCharacterDevice():E=I.WASI_FILETYPE_CHARACTER_DEVICE;break;case S.isDirectory():E=I.WASI_FILETYPE_DIRECTORY;break;case S.isFIFO():E=I.WASI_FILETYPE_SOCKET_STREAM;break;case S.isFile():E=I.WASI_FILETYPE_REGULAR_FILE;break;case S.isSocket():E=I.WASI_FILETYPE_SOCKET_STREAM;break;case S.isSymbolicLink():E=I.WASI_FILETYPE_SYMBOLIC_LINK;break;default:E=I.WASI_FILETYPE_UNKNOWN}if(u.view.setUint8(e,E),e+=1,(e+=3)+f>=l+r)break;n.from(u.memory.buffer).write(c.name,e),e+=f}var A=e-l;return u.view.setUint32(o,Math.min(A,r),!0),I.WASI_ESUCCESS})),fd_renumber:T((function(t,e){return F(t,BigInt(0)),F(e,BigInt(0)),W.closeSync(u.FD_MAP.get(t).real),u.FD_MAP.set(t,u.FD_MAP.get(e)),u.FD_MAP.delete(e),I.WASI_ESUCCESS})),fd_seek:T((function(t,e,r,n){var i=F(t,I.WASI_RIGHT_FD_SEEK);switch(u.refreshMemory(),r){case I.WASI_WHENCE_CUR:i.offset=(i.offset?i.offset:BigInt(0))+BigInt(e);break;case I.WASI_WHENCE_END:var o=W.fstatSync(i.real).size;i.offset=BigInt(o)+BigInt(e);break;case I.WASI_WHENCE_SET:i.offset=BigInt(e)}if(null==i.offset)throw Error("stats.offset must be defined");return u.view.setBigUint64(n,i.offset,!0),I.WASI_ESUCCESS})),fd_tell:T((function(t,e){var r=F(t,I.WASI_RIGHT_FD_TELL);return u.refreshMemory(),r.offset||(r.offset=BigInt(0)),u.view.setBigUint64(e,r.offset,!0),I.WASI_ESUCCESS})),fd_sync:T((function(t){var e=F(t,I.WASI_RIGHT_FD_SYNC);return W.fsyncSync(e.real),I.WASI_ESUCCESS})),path_create_directory:T((function(t,e,r){var i=F(t,I.WASI_RIGHT_PATH_CREATE_DIRECTORY);if(!i.path)return I.WASI_EINVAL;u.refreshMemory();var o=n.from(u.memory.buffer,e,r).toString();return W.mkdirSync(R.resolve(i.path,o)),I.WASI_ESUCCESS})),path_filestat_get:T((function(t,e,r,i,o){var a=F(t,I.WASI_RIGHT_PATH_FILESTAT_GET);if(!a.path)return I.WASI_EINVAL;u.refreshMemory();var s,l=n.from(u.memory.buffer,r,i).toString();return s=e?W.statSync(R.resolve(a.path,l)):W.lstatSync(R.resolve(a.path,l)),u.view.setBigUint64(o,BigInt(s.dev),!0),o+=8,u.view.setBigUint64(o,BigInt(s.ino),!0),o+=8,u.view.setUint8(o,h(u,void 0,s).filetype),o+=8,u.view.setBigUint64(o,BigInt(s.nlink),!0),o+=8,u.view.setBigUint64(o,BigInt(s.size),!0),o+=8,u.view.setBigUint64(o,d(s.atimeMs),!0),o+=8,u.view.setBigUint64(o,d(s.mtimeMs),!0),o+=8,u.view.setBigUint64(o,d(s.ctimeMs),!0),I.WASI_ESUCCESS})),path_filestat_set_times:T((function(t,e,r,i,o,a,s){var l=F(t,I.WASI_RIGHT_PATH_FILESTAT_SET_TIMES);if(!l.path)return I.WASI_EINVAL;u.refreshMemory();var _=W.fstatSync(l.real),c=_.atime,f=_.mtime,S=p(H(I.WASI_CLOCK_REALTIME)),E=I.WASI_FILESTAT_SET_ATIM|I.WASI_FILESTAT_SET_ATIM_NOW;if((s&E)===E)return I.WASI_EINVAL;var A=I.WASI_FILESTAT_SET_MTIM|I.WASI_FILESTAT_SET_MTIM_NOW;if((s&A)===A)return I.WASI_EINVAL;(s&I.WASI_FILESTAT_SET_ATIM)===I.WASI_FILESTAT_SET_ATIM?c=p(o):(s&I.WASI_FILESTAT_SET_ATIM_NOW)===I.WASI_FILESTAT_SET_ATIM_NOW&&(c=S),(s&I.WASI_FILESTAT_SET_MTIM)===I.WASI_FILESTAT_SET_MTIM?f=p(a):(s&I.WASI_FILESTAT_SET_MTIM_NOW)===I.WASI_FILESTAT_SET_MTIM_NOW&&(f=S);var d=n.from(u.memory.buffer,r,i).toString();return W.utimesSync(R.resolve(l.path,d),new Date(c),new Date(f)),I.WASI_ESUCCESS})),path_link:T((function(t,e,r,i,o,a,s){var l=F(t,I.WASI_RIGHT_PATH_LINK_SOURCE),_=F(o,I.WASI_RIGHT_PATH_LINK_TARGET);if(!l.path||!_.path)return I.WASI_EINVAL;u.refreshMemory();var c=n.from(u.memory.buffer,r,i).toString(),f=n.from(u.memory.buffer,a,s).toString();return W.linkSync(R.resolve(l.path,c),R.resolve(_.path,f)),I.WASI_ESUCCESS})),path_open:T((function(t,e,r,i,o,a,s,l,c){var f=F(t,I.WASI_RIGHT_PATH_OPEN);a=BigInt(a),s=BigInt(s);var S,E=(a&(I.WASI_RIGHT_FD_READ|I.WASI_RIGHT_FD_READDIR))!==BigInt(0),A=(a&(I.WASI_RIGHT_FD_DATASYNC|I.WASI_RIGHT_FD_WRITE|I.WASI_RIGHT_FD_ALLOCATE|I.WASI_RIGHT_FD_FILESTAT_SET_SIZE))!==BigInt(0);A&&E?S=W.constants.O_RDWR:E?S=W.constants.O_RDONLY:A&&(S=W.constants.O_WRONLY);var d=a|I.WASI_RIGHT_PATH_OPEN,p=a|s;0!=(o&I.WASI_O_CREAT)&&(S|=W.constants.O_CREAT,d|=I.WASI_RIGHT_PATH_CREATE_FILE),0!=(o&I.WASI_O_DIRECTORY)&&(S|=W.constants.O_DIRECTORY),0!=(o&I.WASI_O_EXCL)&&(S|=W.constants.O_EXCL),0!=(o&I.WASI_O_TRUNC)&&(S|=W.constants.O_TRUNC,d|=I.WASI_RIGHT_PATH_FILESTAT_SET_SIZE),0!=(l&I.WASI_FDFLAG_APPEND)&&(S|=W.constants.O_APPEND),0!=(l&I.WASI_FDFLAG_DSYNC)&&(W.constants.O_DSYNC?S|=W.constants.O_DSYNC:S|=W.constants.O_SYNC,p|=I.WASI_RIGHT_FD_DATASYNC),0!=(l&I.WASI_FDFLAG_NONBLOCK)&&(S|=W.constants.O_NONBLOCK),0!=(l&I.WASI_FDFLAG_RSYNC)&&(W.constants.O_RSYNC?S|=W.constants.O_RSYNC:S|=W.constants.O_SYNC,p|=I.WASI_RIGHT_FD_SYNC),0!=(l&I.WASI_FDFLAG_SYNC)&&(S|=W.constants.O_SYNC,p|=I.WASI_RIGHT_FD_SYNC),A&&0==(S&(W.constants.O_APPEND|W.constants.O_TRUNC))&&(p|=I.WASI_RIGHT_FD_SEEK),u.refreshMemory();var T=n.from(u.memory.buffer,r,i).toString();_("path_open",T);var h,y,m,g=R.resolve(f.path,T);if(R.relative(f.path,g).startsWith(".."))return I.WASI_ENOTCAPABLE;try{if(h=W.realpathSync(g),R.relative(f.path,h).startsWith(".."))return I.WASI_ENOTCAPABLE}catch(t){if("ENOENT"!==(null==t?void 0:t.code))throw t;h=g}try{y=W.statSync(h).isDirectory()}catch(t){}m=!A&&y?W.openSync(h,W.constants.O_RDONLY):W.openSync(h,S);var O=u.getUnusedFileDescriptor();return u.FD_MAP.set(O,{real:m,filetype:void 0,rights:{base:d,inheriting:p},path:h}),v(u,O),u.view.setUint32(c,O,!0),I.WASI_ESUCCESS})),path_readlink:T((function(t,e,r,i,o,a){var s=F(t,I.WASI_RIGHT_PATH_READLINK);if(!s.path)return I.WASI_EINVAL;u.refreshMemory();var l=n.from(u.memory.buffer,e,r).toString(),_=R.resolve(s.path,l),c=W.readlinkSync(_),f=n.from(u.memory.buffer).write(c,i,o);return u.view.setUint32(a,f,!0),I.WASI_ESUCCESS})),path_remove_directory:T((function(t,e,r){var i=F(t,I.WASI_RIGHT_PATH_REMOVE_DIRECTORY);if(!i.path)return I.WASI_EINVAL;u.refreshMemory();var o=n.from(u.memory.buffer,e,r).toString();return W.rmdirSync(R.resolve(i.path,o)),I.WASI_ESUCCESS})),path_rename:T((function(t,e,r,i,o,a){var s=F(t,I.WASI_RIGHT_PATH_RENAME_SOURCE),l=F(i,I.WASI_RIGHT_PATH_RENAME_TARGET);if(!s.path||!l.path)return I.WASI_EINVAL;u.refreshMemory();var _=n.from(u.memory.buffer,e,r).toString(),c=n.from(u.memory.buffer,o,a).toString();return W.renameSync(R.resolve(s.path,_),R.resolve(l.path,c)),I.WASI_ESUCCESS})),path_symlink:T((function(t,e,r,i,o){var a=F(r,I.WASI_RIGHT_PATH_SYMLINK);if(!a.path)return I.WASI_EINVAL;u.refreshMemory();var s=n.from(u.memory.buffer,t,e).toString(),l=n.from(u.memory.buffer,i,o).toString();return W.symlinkSync(s,R.resolve(a.path,l)),I.WASI_ESUCCESS})),path_unlink_file:T((function(t,e,r){var i=F(t,I.WASI_RIGHT_PATH_UNLINK_FILE);if(!i.path)return I.WASI_EINVAL;u.refreshMemory();var o=n.from(u.memory.buffer,e,r).toString();return W.unlinkSync(R.resolve(i.path,o)),I.WASI_ESUCCESS})),poll_oneoff:function(t,e,r,n){var i=0,o=BigInt(0),a=BigInt(g.hrtime());u.refreshMemory();for(var s=0;s<r;s+=1){var l=u.view.getBigUint64(t,!0);t+=8;var _=u.view.getUint8(t);switch(t+=1,_){case I.WASI_EVENTTYPE_CLOCK:t+=7;var c=u.view.getUint32(t,!0);t+=4,t+=4;var f=u.view.getBigUint64(t,!0);t+=8,t+=8;var S=u.view.getUint16(t,!0);t+=2,t+=6;var E=1===S,A=I.WASI_ESUCCESS,d=H(c);if(null==d)A=I.WASI_EINVAL;else{var T=(v=E?f:d+f)-d;T>o&&(o=T)}u.view.setBigUint64(e,l,!0),e+=8,u.view.setUint16(e,A,!0),e+=2,u.view.setUint8(e,I.WASI_EVENTTYPE_CLOCK),e+=1,e+=5,i+=1;break;case I.WASI_EVENTTYPE_FD_READ:case I.WASI_EVENTTYPE_FD_WRITE:t+=3,t+=4,u.view.setBigUint64(e,l,!0),e+=8,u.view.setUint16(e,I.WASI_ENOSYS,!0),e+=2,u.view.setUint8(e,_),e+=1,e+=5,i+=1,l==BigInt(0)&&I.WASI_EVENTTYPE_FD_READ==_&&null!=u.getStdin&&(u.stdinBuffer||(u.stdinBuffer=u.getStdin()));break;default:return I.WASI_EINVAL}}if(u.view.setUint32(n,i,!0),(o-=BigInt(g.hrtime())-a)>0)if(null!=u.sleep)u.sleep(p(o));else for(var v=BigInt(g.hrtime())+o;BigInt(g.hrtime())<v;);return I.WASI_ESUCCESS},proc_exit:function(t){return g.exit(t),I.WASI_ESUCCESS},proc_raise:function(t){return t in I.SIGNAL_MAP?(g.kill(I.SIGNAL_MAP[t]),I.WASI_ESUCCESS):I.WASI_EINVAL},random_get:function(t,e){return u.refreshMemory(),g.randomFillSync(new Uint8Array(u.memory.buffer),t,e),e},sched_yield:function(){return I.WASI_ESUCCESS},sock_recv:function(){return I.WASI_ENOSYS},sock_send:function(){return I.WASI_ENOSYS},sock_shutdown:function(){return I.WASI_ENOSYS}},l.enabled&&Object.keys(this.wasiImport).forEach((function(t){var e=u.wasiImport[t];u.wasiImport[t]=function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];l(t,r);try{var a=e.apply(void 0,o([],i(r),!1));return l("result = ",a),a}catch(t){throw l("error: ",t),t}}}))}return t.prototype.getUnusedFileDescriptor=function(){var t=o([],i(this.FD_MAP.keys()),!1).sort();return 0==t.length?1:t[t.length-1]+1},t.prototype.refreshMemory=function(){this.view&&0!==this.view.buffer.byteLength||(this.view=new DataView(this.memory.buffer))},t.prototype.setMemory=function(t){this.memory=t},t.prototype.start=function(t,e){var r=t.exports;if(null===r||"object"!=typeof r)throw new Error("instance.exports must be an Object. Received ".concat(r,"."));if(null==e&&!((e=r.memory)instanceof WebAssembly.Memory))throw new Error("instance.exports.memory must be a WebAssembly.Memory. Recceived ".concat(e,"."));this.setMemory(e),r._start&&r._start()},t.prototype.getImportNamespace=function(t){var e,r,n=null;try{for(var i=a(WebAssembly.Module.imports(t)),o=i.next();!o.done;o=i.next()){var u=o.value;if("function"===u.kind&&u.module.startsWith("wasi_"))if(n){if(n!==u.module)throw new Error("Multiple namespaces detected.")}else n=u.module}}catch(t){e={error:t}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(e)throw e.error}}return n},t.prototype.getImports=function(t){switch(this.getImportNamespace(t)){case"wasi_unstable":return{wasi_unstable:this.wasiImport};case"wasi_snapshot_preview1":return{wasi_snapshot_preview1:this.wasiImport};default:throw new Error("Can't detect a WASI namespace for the WebAssembly Module")}},t}();e.default=y},9862:()=>{},964:()=>{}},n={};function i(t){var e=n[t];if(void 0!==e)return e.exports;var o=n[t]={id:t,loaded:!1,exports:{}};return r[t].call(o.exports,o,o.exports,i),o.loaded=!0,o.exports}i.m=r,i.x=()=>{var t=i.O(void 0,[756],(()=>i(2989)));return i.O(t)},t=[],i.O=(e,r,n,o)=>{if(!r){var a=1/0;for(_=0;_<t.length;_++){for(var[r,n,o]=t[_],u=!0,s=0;s<r.length;s++)(!1&o||a>=o)&&Object.keys(i.O).every((t=>i.O[t](r[s])))?r.splice(s--,1):(u=!1,o<a&&(a=o));if(u){t.splice(_--,1);var l=n();void 0!==l&&(e=l)}}return e}o=o||0;for(var _=t.length;_>0&&t[_-1][2]>o;_--)t[_]=t[_-1];t[_]=[r,n,o]},i.f={},i.e=t=>Promise.all(Object.keys(i.f).reduce(((e,r)=>(i.f[r](t,e),e)),[])),i.u=t=>"a9d92d1e93772556b748.js",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),(()=>{var t={922:1};i.f.i=(e,r)=>{t[e]||importScripts(i.p+i.u(e))};var e=self.webpackChunk_wapython_website=self.webpackChunk_wapython_website||[],r=e.push.bind(e);e.push=e=>{var[n,o,a]=e;for(var u in o)i.o(o,u)&&(i.m[u]=o[u]);for(a&&a(i);n.length;)t[n.pop()]=1;r(e)}})(),e=i.x,i.x=()=>i.e(756).then(e),i.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,