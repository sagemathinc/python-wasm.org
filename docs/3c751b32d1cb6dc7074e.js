"use strict";(self.webpackChunk_wapython_website=self.webpackChunk_wapython_website||[]).push([[353,215],{9522:function(e,t,n){function r(e,t,n,r,o,i,a){try{var u=e[i](a),c=u.value}catch(e){return void n(e)}u.done?t(c):Promise.resolve(c).then(r,o)}function o(e){return function(){var t=this,n=arguments;return new Promise((function(o,i){var a=e.apply(t,n);function u(e){r(a,o,i,u,c,"next",e)}function c(e){r(a,o,i,u,c,"throw",e)}u(void 0)}))}}var i=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.init=void 0;var u=a(n(3634)),c=a(n(5215)),s=n(4297),l=a(n(1933)),f=a(n(2515)),p=a(n(1826)),d=a(n(8881));function h(){return b.apply(this,arguments)}function b(){return b=o((function(){var e,t,n,r,o=arguments;return i(this,(function(i){switch(i.label){case 0:return e=o.length>0&&void 0!==o[0]?o[0]:{},t=e.noWorker,n=e.noReadline,r=[{type:"zipurl",zipurl:n?p.default:d.default,mountpoint:"/usr/lib/python3.11"},{type:"dev"},{type:"zipurl",zipurl:f.default,mountpoint:"/usr/lib/python3.11",async:!0}],[4,(0,s._init)({programName:"/usr/bin/zython",python_wasm:l.default,wasmImport:t?c.default:u.default,fs:r,env:{PYTHONHOME:"/usr",TERMCAP:"/usr/lib/python3.11/termcap",TERM:"xterm-256color"}})];case 1:return i.sent(),y.wasm=s.wasm,[2]}}))})),b.apply(this,arguments)}t.init=h;var y={repr:s.repr,exec:s.exec,wasm:s.wasm,init:h};t.default=y},4297:function(e,t,n){var r=n(5925);function o(e,t,n,r,o,i,a){try{var u=e[i](a),c=u.value}catch(e){return void n(e)}u.done?t(c):Promise.resolve(c).then(r,o)}function i(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var a=e.apply(t,n);function u(e){o(a,r,i,u,c,"next",e)}function c(e){o(a,r,i,u,c,"throw",e)}u(void 0)}))}}var a=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};function u(){return(u=i((function(e){return a(this,(function(n){switch(n.label){case 0:if(null==t.wasm)throw Error("call init");return[4,t.wasm.callWithString("exec",e)];case 1:return n.sent(),[2]}}))}))).apply(this,arguments)}function c(){return(c=i((function(e){return a(this,(function(n){switch(n.label){case 0:if(null==t.wasm)throw Error("call init");return[4,t.wasm.callWithString("eval",e)];case 1:return[2,n.sent()]}}))}))).apply(this,arguments)}function s(){return s=i((function(){var e,n=arguments;return a(this,(function(r){switch(r.label){case 0:if(e=n.length>0&&void 0!==n[0]?n[0]:["python"],null==t.wasm)throw Error("call init");return[4,t.wasm.terminal(e)];case 1:return[2,r.sent()]}}))})),s.apply(this,arguments)}function l(){return(l=i((function(e){var n,o,i,u,c;return a(this,(function(a){switch(a.label){case 0:return n=e.python_wasm,o=e.programName,i=e.wasmImport,u=e.fs,c=e.env,null!=t.wasm?[2]:[4,i(n,{env:c,fs:u})];case 1:return t.wasm=a.sent(),[4,t.wasm.callWithString("chdir",r.cwd())];case 2:return a.sent(),o?[4,t.wasm.callWithString("initProgramName",o)]:[3,4];case 3:a.sent(),a.label=4;case 4:return[4,t.wasm.callWithString("python_init","")];case 5:return a.sent(),[4,t.wasm.waitUntilFsLoaded()];case 6:return a.sent(),[2]}}))}))).apply(this,arguments)}Object.defineProperty(t,"__esModule",{value:!0}),t._init=t.terminal=t.repr=t.exec=t.wasm=void 0,t.wasm=void 0,t.exec=function(e){return u.apply(this,arguments)},t.repr=function(e){return c.apply(this,arguments)},t.terminal=function(){return s.apply(this,arguments)},t._init=function(e){return l.apply(this,arguments)}},8966:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SIGINT=void 0,t.SIGINT=2},3634:function(e,t,n){function r(e,t,n,r,o,i,a){try{var u=e[i](a),c=u.value}catch(e){return void n(e)}u.done?t(c):Promise.resolve(c).then(r,o)}function o(e){return function(){var t=this,n=arguments;return new Promise((function(o,i){var a=e.apply(t,n);function u(e){r(a,o,i,u,c,"next",e)}function c(e){r(a,o,i,u,c,"throw",e)}u(void 0)}))}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e){return u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},u(e)}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}function s(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e,t){return l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},l(e,t)}var f=function(e){return e&&"undefined"!=typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=u(e);if(t){var o=u(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return s(this,n)}}var d=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},h=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),b=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),y=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&h(t,e,n);return b(t,e),t},v=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WasmInstance=void 0;var w=n(1771),m=n(3124),g=v(n(3580)),k=y(n(2495)),_=function(e){c(n,e);var t=p(n);function n(e){var r;return i(this,n),(r=t.call(this)).setMaxListeners(100),r.postMessage=e.postMessage.bind(e),r.terminate=e.terminate.bind(e),e.onmessage=function(e){var t=e.data;"service-worker-broken"!=t.event?r.emit("message",t):(0,k.fixServiceWorker)()},r}return n}(m.EventEmitter),O=function(e){c(u,e);var t,r,o=p(u);function u(){return i(this,u),o.apply(this,arguments)}return t=u,(r=[{key:"initWorker",value:function(){var e=new Worker(new URL(n.p+n.u(215),n.b));return new _(e)}}])&&a(t.prototype,r),u}(w.WasmInstanceAbstractBaseClass);function S(){return S=o((function(e){var t,n,r=arguments;return d(this,(function(o){return t=r.length>1&&void 0!==r[1]?r[1]:{},n=crossOriginIsolated?g.default:k.default,[2,new O(e,t,n)]}))})),S.apply(this,arguments)}t.WasmInstance=O,t.default=function(e){return S.apply(this,arguments)}},1771:function(e,t,n){var r=n(2372).Buffer;function o(e,t,n,r,o,i,a){try{var u=e[i](a),c=u.value}catch(e){return void n(e)}u.done?t(c):Promise.resolve(c).then(r,o)}function i(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var a=e.apply(t,n);function u(e){o(a,r,i,u,c,"next",e)}function c(e){o(a,r,i,u,c,"throw",e)}u(void 0)}))}}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e){return c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},c(e)}function s(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e,t){return l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},l(e,t)}var f=function(e){return e&&"undefined"!=typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};var p=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},d=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WasmInstanceAbstractBaseClass=void 0;var h=n(7083),b=n(3124),y=d(n(6224)),v=n(8378),w=n(1229),m=n(8966),g=(0,d(n(7587)).default)("wasm-main"),k=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(b,e);var t,n,o,f,d=(o=b,f=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=c(o);if(f){var n=c(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return s(this,e)});function b(e,t,n){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,b),(r=d.call(this)).callId=0,g("constructor",t),r.wasmSource=e,r.options=t,r.init=(0,y.default)(r.init),r.send=new v.SendToWasmAbstractBase,r.recv=new w.RecvFromWasmAbstractBase,r.ioProvider=new n,r}return t=b,n=[{key:"signal",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:m.SIGINT;this.ioProvider.signal(e)}},{key:"initWorker",value:function(){return function(e){throw Error("".concat("initWorker"," -- must be defined in derived class"))}(),null}},{key:"writeToStdin",value:function(e){g("writeToStdin",e),this.ioProvider.writeToStdin(r.from(e)),e.toString().includes("")&&(this.signal(m.SIGINT),this.ioProvider.writeToStdin(r.from("\n")))}},{key:"init",value:function(){var e=this;return i((function(){var t;return p(this,(function(n){switch(n.label){case 0:if(e.worker)return[2];if(e.worker=e.initWorker(),!e.worker)throw Error("init - bug");return t=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){u(e,t,n[t])}))}return e}({},e.ioProvider.getExtraOptions(),e.options),g("options = ",t),e.worker.postMessage({event:"init",name:e.wasmSource,options:t}),e.worker.on("exit",(function(){return e.terminate()})),e.worker.on("message",(function(t){if(null!=t)if(g("main thread got message",t),null==t.id)switch(t.event){case"init":return void e.emit("init",t);case"stdout":e.emit("stdout",t.data);break;case"stderr":e.emit("stderr",t.data)}else e.emit("id",t)})),[4,(0,h.callback)((function(t){return e.once("init",(function(e){t(e.error)}))}))];case 1:return n.sent(),[2]}}))}))()}},{key:"terminate",value:function(){if(null!=this.worker){var e=this.worker;delete this.worker,e.emit("exit"),e.terminate(),e.removeAllListeners()}}},{key:"callWithString",value:function(e,t){for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var a=this;return i((function(){return p(this,(function(n){switch(n.label){case 0:return[4,a.init()];case 1:if(n.sent(),!a.worker)throw Error("callWithString - bug; name=".concat(e,", str=").concat(JSON.stringify(t)));return a.callId+=1,a.worker.postMessage({id:a.callId,event:"callWithString",name:e,str:t,args:r}),[4,a.waitForResponse(a.callId)];case 2:return[2,n.sent()]}}))}))()}},{key:"waitUntilFsLoaded",value:function(){var e=this;return i((function(){return p(this,(function(t){switch(t.label){case 0:if(!e.worker)throw Error("waitUntilFsLoaded - bug; worker must be defined");return e.callId+=1,e.worker.postMessage({id:e.callId,event:"waitUntilFsLoaded"}),[4,e.waitForResponse(e.callId)];case 1:return t.sent(),[2]}}))}))()}},{key:"waitForResponse",value:function(e){var t=this;return i((function(){return p(this,(function(n){switch(n.label){case 0:return[4,(0,h.callback)((function(n){var r,o=function(){t.removeListener("id",i),t.removeListener("sigint",a)},i=function(t){o(),t.id==e&&(t.error?n(t.error):n(void 0,t))};t.on("id",i);var a=function(){o(),n("KeyboardInterrupt")};t.once("sigint",a),null===(r=t.worker)||void 0===r||r.on("exit",(function(){o(),n("exit")}))}))];case 1:return[2,n.sent().result]}}))}))()}},{key:"configureTerminal",value:function(){}},{key:"terminal",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["command"],t=this;return i((function(){var n;return p(this,(function(r){switch(r.label){case 0:return[4,t.init()];case 1:if(r.sent(),null==t.worker)throw Error("terminal: bug");t.configureTerminal(),n=0,r.label=2;case 2:return r.trys.push([2,4,,5]),[4,t.callWithString("terminal",e)];case 3:return n=r.sent(),t.terminate(),[3,5];case 4:return r.sent(),[3,5];case 5:return[2,n]}}))}))()}},{key:"getFunction",value:function(e){throw Error("not implemented")}},{key:"getcwd",value:function(){throw Error("not implemented")}}],n&&a(t.prototype,n),b}(b.EventEmitter);t.WasmInstanceAbstractBaseClass=k},3580:function(e,t,n){var r=n(2372).Buffer;function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(8966),u=(0,i(n(7587)).default)("wasm:io-provider"),c=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u("IOProviderUsingAtomics");var t=new SharedArrayBuffer(4);this.stdinLength=new Int32Array(t);var n=new SharedArrayBuffer(4);this.signalInt32Array=new Int32Array(n);var o=new SharedArrayBuffer(1e4);this.stdinUint8Array=r.from(o),this.buffers={stdinBuffer:o,stdinLengthBuffer:t,signalBuffer:n}}var t,n;return t=e,n=[{key:"writeToStdin",value:function(e){u("writeToStdin",e),e.copy(this.stdinUint8Array,this.stdinLength[0]),u("setting writeToStdin input buffer size to ",e.length+this.stdinLength[0]),Atomics.store(this.stdinLength,0,e.length+this.stdinLength[0]),Atomics.notify(this.stdinLength,0)}},{key:"getExtraOptions",value:function(){return this.buffers}},{key:"signal",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:a.SIGINT;u("signal",e),Atomics.store(this.signalInt32Array,0,e),Atomics.notify(this.signalInt32Array,0)}}],n&&o(t.prototype,n),e}();t.default=c},2495:function(e,t,n){var r=n(4229);function o(e,t,n,r,o,i,a){try{var u=e[i](a),c=u.value}catch(e){return void n(e)}u.done?t(c):Promise.resolve(c).then(r,o)}function i(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var a=e.apply(t,n);function u(e){o(a,r,i,u,c,"next",e)}function c(e){o(a,r,i,u,c,"throw",e)}u(void 0)}))}}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var u=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.fixServiceWorker=void 0;var s=n(8966),l=c(n(7587)),f=n(3123),p=(0,l.default)("wasm:io-provider"),d=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.id=(0,f.v4)(),p("IOProviderUsingXMLHttpRequest","id = ",this.id),function(){y.apply(this,arguments)}()}var t,n;return t=e,n=[{key:"getExtraOptions",value:function(){return{id:this.id}}},{key:"send",value:function(e,t){return i((function(){var n,o;return u(this,(function(i){switch(i.label){case 0:n="/python-wasm-sw/".concat(e),i.label=1;case 1:return i.trys.push([1,3,,4]),[4,fetch(n,{method:"POST",body:JSON.stringify(t)})];case 2:return i.sent(),[3,4];case 3:return o=i.sent(),r.warn("failed to send to service worker",{url:n,body:t},o),[3,4];case 4:return[2]}}))}))()}},{key:"signal",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s.SIGINT;p("signal",e),this.send("write-signal",{sig:e,id:this.id})}},{key:"writeToStdin",value:function(e){p("writeToStdin",e),this.send("write-stdin",{data:e.toString(),id:this.id})}}],n&&a(t.prototype,n),e}();function h(){var e=new URL(n(2010),n.b).href;return r.log("service worker url = ",e),e}function b(){return!!navigator.serviceWorker||(r.warn("WARNING: service worker is not available, so nothing is going to work"),!1)}function y(){return(y=i((function(){var e,t,n;return u(this,(function(o){switch(o.label){case 0:return b()?(t=h(),[4,navigator.serviceWorker.register(t)]):[2];case 1:return n=o.sent(),"activated"!=(null===(e=n.active)||void 0===e?void 0:e.state)?(r.warn("Reloading page to activate service worker..."),localStorage["python-wasm-service-worker-broken"]?setTimeout((function(){location.reload()}),3e3):(localStorage["python-wasm-service-worker-broken"]=!0,location.reload())):delete localStorage["python-wasm-service-worker-broken"],[2]}}))}))).apply(this,arguments)}function v(){return(v=i((function(){var e,t;return u(this,(function(n){switch(n.label){case 0:if(!b())return[2];r.warn("The service work seems to be disabled.  Fixing it..."),e=h(),n.label=1;case 1:return n.trys.push([1,4,,5]),[4,navigator.serviceWorker.register(e)];case 2:return[4,n.sent().unregister()];case 3:return n.sent(),[3,5];case 4:return t=n.sent(),r.warn(t),[3,5];case 5:return location.reload(),[2]}}))}))).apply(this,arguments)}t.default=d,t.fixServiceWorker=function(){return v.apply(this,arguments)}},5215:function(e,t,n){function r(e,t,n,r,o,i,a){try{var u=e[i](a),c=u.value}catch(e){return void n(e)}u.done?t(c):Promise.resolve(c).then(r,o)}function o(e){return function(){var t=this,n=arguments;return new Promise((function(o,i){var a=e.apply(t,n);function u(e){r(a,o,i,u,c,"next",e)}function c(e){r(a,o,i,u,c,"throw",e)}u(void 0)}))}}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e){return a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},a(e)}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){i(e,t,n[t])}))}return e}function c(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function s(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e,t){return l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},l(e,t)}var f=function(e){return e&&"undefined"!=typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};var p=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},d=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},h=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var b=n(7480),y=h(n(7771)),v=h(n(2336)),w=h(n(6435)),m=h(n(7587)),g=n(3124),k=h(n(2656)),_=h(n(521)),O=h(n(9198)),S=(0,m.default)("wasm:worker");function P(e){return x.apply(this,arguments)}function x(){return x=o((function(e){var t,n,r,i,a,s,l,f,h,w,m,g=arguments;function _(e,t){var n=new Uint8Array(m.readFileSync(e)),r=new WebAssembly.Module(n);return new WebAssembly.Instance(r,t)}return p(this,(function(O){switch(O.label){case 0:t=g.length>1&&void 0!==g[1]?g[1]:{},S("wasmImportBrowser"),n=[],i=!0,a=!1,s=void 0,O.label=1;case 1:O.trys.push([1,6,7,8]),l=function(){var e,t,r;return p(this,(function(i){switch(i.label){case 0:return"zipurl"!=(e=h.value).type?[3,5]:(t=void 0,e.async?[3,3]:(r={type:"zip"},[4,fetch(e.zipurl)]));case 1:return[4,i.sent().arrayBuffer()];case 2:return r.data=i.sent(),r.mountpoint=e.mountpoint,t=r,[3,4];case 3:t={type:"zip-async",getData:o((function(){return p(this,(function(t){switch(t.label){case 0:return[4,fetch(e.zipurl)];case 1:return[4,t.sent().arrayBuffer()];case 2:return[2,t.sent()]}}))})),mountpoint:e.mountpoint},i.label=4;case 4:return n.push(t),[3,6];case 5:n.push(e),i.label=6;case 6:return[2]}}))},f=(null!==(r=t.fs)&&void 0!==r?r:[])[Symbol.iterator](),O.label=2;case 2:return(i=(h=f.next()).done)?[3,5]:[5,d(l())];case 3:O.sent(),O.label=4;case 4:return i=!0,[3,2];case 5:return[3,8];case 6:return w=O.sent(),a=!0,s=w,[3,8];case 7:try{i||null==f.return||f.return()}finally{if(a)throw s}return[7];case 8:return m=(0,b.createFileSystem)(n),[4,(0,v.default)({source:e,bindings:c(u({},y.default),{fs:m,posix:k.default}),options:t,importWebAssembly:j,importWebAssemblySync:_,readFileSync:function(e){return m.readFileSync(e)},maxMemoryMB:1e3})];case 9:return[2,O.sent()]}}))})),x.apply(this,arguments)}function j(e,t){return E.apply(this,arguments)}function E(){return(E=o((function(e,t){return p(this,(function(n){switch(n.label){case 0:return[4,WebAssembly.instantiateStreaming(fetch(e),t)];case 1:return[2,n.sent().instance]}}))}))).apply(this,arguments)}t.default=P,null==self.document&&function(){S("initializing worker");var e=new(function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(o,e);var t,n,r=(t=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=a(t);if(n){var o=a(this).constructor;e=Reflect.construct(r,arguments,o)}else e=r.apply(this,arguments);return s(this,e)});function o(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),(e=r.call(this)).postMessage=self.postMessage.bind(self),self.onmessage=function(t){var n=t.data;e.emit("message",n)},e}return o}(g.EventEmitter));(0,w.default)({wasmImport:P,parent:e,captureOutput:!0,IOHandler:crossOriginIsolated?_.default:O.default})}()},3353:(e,t,n)=>{n.r(t),n.d(t,{terminal:()=>u}),n(7502);var r=n(135);const o={"solarized-dark":{comment:"Solarized dark",colors:["#eee8d5","#dc322f","#859900","#b58900","#268bd2","#d33682","#2aa198","#073642","#fdf6e3","#cb4b16","#93a1a1","#839496","#657b83","#6c71c4","#586e75","#002b36","#eee8d5","#002b36"]},"solarized-light":{comment:"Solarized light",colors:["#073642","#dc322f","#859900","#b58900","#268bd2","#d33682","#2aa198","#eee8d5","#002b36","#cb4b16","#586e75","#657b83","#839496","#6c71c4","#93a1a1","#fdf6e3","#073642","#fdf6e3"]},"low-contrast":{comment:"Low contrast dark",colors:["#222222","#9e5641","#6c7e55","#caaf2b","#7fb8d8","#956d9d","#4c8ea1","#808080","#454545","#cc896d","#c4df90","#ffe080","#b8ddea","#c18fcb","#6bc1d0","#cdcdcd","#cdcdcd","#343434"]},"raven-dark":{comment:"Raven dark",colors:["#3f3e3b","#b36b65","#4f8c61","#8d7e45","#6181b8","#a46d9d","#0e8e9a","#b6b7bb","#7f7f83","#efa29b","#86c596","#c7b679","#9ab9f3","#dfa4d7","#5ec7d4","#feffff","#a6a7aa","#32312e"]},default:{comment:"Default black on white",colors:["#2e3436","#cc0000","#4e9a06","#c4a000","#3465a4","#75507b","#06989a","#d3d7cf","#555753","#ef2929","#8ae234","#fce94f","#729fcf","#ad7fa8","#34e2e2","#eeeeec","#000000","#ffffff"]},mono:{comment:"Monochrome dark",colors:["#000000","#434343","#6b6b6b","#969696","#4a4a4a","#707070","#a9a9a9","#ffffff","#222222","#434343","#a5a5a5","#e5e5e5","#4d4d4d","#747474","#c4c4c4","#dedede","#b0b0b0","#282828"]},tango:{comment:"Tango light",colors:["#2e3436","#cc0000","#4e9a06","#c4a000","#3465a4","#75507b","#06989a","#d3d7cf","#555753","#ef2929","#8ae234","#fce94f","#729fcf","#ad7fa8","#34e2e2","#eeeeec","#000000","#ffffff"]},infred:{comment:"Infinite red dark",colors:["#6c6c6c","#e9897c","#b6e77d","#ecebbe","#a9cdeb","#ea96eb","#c9caec","#f2f2f2","#747474","#f99286","#c3f786","#fcfbcc","#b6defb","#fba1fb","#d7d9fc","#e2e2e2","#f2f2f2","#101010"]},"raven-light":{comment:"Raven light",colors:["#e7dfd5","#f46864","#00ae58","#ac9510","#389bff","#dc6dd2","#00b0cc","#5b636b","#8f98a1","#b42b33","#007525","#726000","#0066cb","#a03398","#007793","#00020e","#69717a","#faf0e6"]}};var i=n(9522),a=n.n(i);async function u(e){const t=new r.Terminal({convertEol:!0});t.open(e),await a().init(),e.children[0].style.padding="15px",t.resize(80,40),function(e,t){let n=o["solarized-light"];if(null==n&&(n=o.default,null==n))return;const r=n.colors;if(null==r)return;const i={background:r[17],foreground:r[16],cursor:r[16],cursorAccent:r[17],selection:"rgba(128, 128, 160, 0.25)",black:r[0],red:r[1],green:r[2],yellow:r[3],blue:r[4],magenta:r[5],cyan:r[6],white:r[7],brightBlack:r[8],brightRed:r[9],brightGreen:r[10],brightYellow:r[11],brightBlue:r[12],brightMagenta:r[13],brightCyan:r[14],brightWhite:r[15]};e.setOption("theme",i)}(t),t.onData((e=>{a().wasm.writeToStdin(e)})),a().wasm.on("stdout",(e=>{t.write(e)})),a().wasm.on("stderr",(e=>{t.write(e)})),await a().wasm.terminal()}},1826:(e,t,n)=>{e.exports=n.p+"2f5d19372b03a9964012.zip"},8881:(e,t,n)=>{e.exports=n.p+"70c4fc61b320c43ce6f3.zip"},2515:(e,t,n)=>{e.exports=n.p+"a665db2f2a89d1ce5d6b.zip"},1933:(e,t,n)=>{e.exports=n.p+"5b6947a4b231cfa09def.wasm"},2010:(e,t,n)=>{e.exports=n.p+"e37b80c52dd2f83dc890.js"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,