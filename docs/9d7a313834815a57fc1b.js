(()=>{"use strict";var e,t,r={5215:function(e,t,r){function n(e,t,r,n,o,i,u){try{var c=e[i](u),a=c.value}catch(e){return void r(e)}c.done?t(a):Promise.resolve(a).then(n,o)}function o(e){return function(){var t=this,r=arguments;return new Promise((function(o,i){var u=e.apply(t,r);function c(e){n(u,o,i,c,a,"next",e)}function a(e){n(u,o,i,c,a,"throw",e)}c(void 0)}))}}function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function u(e){return u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},u(e)}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),n.forEach((function(t){i(e,t,r[t])}))}return e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r.push.apply(r,n)}return r}(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})),e}function s(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e,t){return l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},l(e,t)}var f=function(e){return e&&"undefined"!=typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};var p=this&&this.__generator||function(e,t){var r,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;u;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},y=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},b=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var h=r(7480),d=b(r(7771)),v=b(r(2336)),m=b(r(6435)),w=b(r(7587)),O=r(3124),g=b(r(2656)),j=b(r(521)),P=b(r(9198)),S=(0,w.default)("wasm:worker");function _(e){return x.apply(this,arguments)}function x(){return x=o((function(e){var t,r,n,i,u,s,l,f,b,m,w,O=arguments;function j(e,t){var r=new Uint8Array(w.readFileSync(e)),n=new WebAssembly.Module(r);return new WebAssembly.Instance(n,t)}return p(this,(function(P){switch(P.label){case 0:t=O.length>1&&void 0!==O[1]?O[1]:{},S("wasmImportBrowser"),r=[],i=!0,u=!1,s=void 0,P.label=1;case 1:P.trys.push([1,6,7,8]),l=function(){var e,t,n;return p(this,(function(i){switch(i.label){case 0:return"zipurl"!=(e=b.value).type?[3,5]:(t=void 0,e.async?[3,3]:(n={type:"zip"},[4,fetch(e.zipurl)]));case 1:return[4,i.sent().arrayBuffer()];case 2:return n.data=i.sent(),n.mountpoint=e.mountpoint,t=n,[3,4];case 3:t={type:"zip-async",getData:o((function(){return p(this,(function(t){switch(t.label){case 0:return[4,fetch(e.zipurl)];case 1:return[4,t.sent().arrayBuffer()];case 2:return[2,t.sent()]}}))})),mountpoint:e.mountpoint},i.label=4;case 4:return r.push(t),[3,6];case 5:r.push(e),i.label=6;case 6:return[2]}}))},f=(null!==(n=t.fs)&&void 0!==n?n:[])[Symbol.iterator](),P.label=2;case 2:return(i=(b=f.next()).done)?[3,5]:[5,y(l())];case 3:P.sent(),P.label=4;case 4:return i=!0,[3,2];case 5:return[3,8];case 6:return m=P.sent(),u=!0,s=m,[3,8];case 7:try{i||null==f.return||f.return()}finally{if(u)throw s}return[7];case 8:return w=(0,h.createFileSystem)(r),[4,(0,v.default)({source:e,bindings:a(c({},d.default),{fs:w,posix:g.default}),options:t,importWebAssembly:k,importWebAssemblySync:j,readFileSync:function(e){return w.readFileSync(e)},maxMemoryMB:1e3})];case 9:return[2,P.sent()]}}))})),x.apply(this,arguments)}function k(e,t){return E.apply(this,arguments)}function E(){return(E=o((function(e,t){return p(this,(function(r){switch(r.label){case 0:return[4,WebAssembly.instantiateStreaming(fetch(e),t)];case 1:return[2,r.sent().instance]}}))}))).apply(this,arguments)}t.default=_,null==self.document&&function(){S("initializing worker");var e=new(function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(o,e);var t,r,n=(t=o,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=u(t);if(r){var o=u(this).constructor;e=Reflect.construct(n,arguments,o)}else e=n.apply(this,arguments);return s(this,e)});function o(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),(e=n.call(this)).postMessage=self.postMessage.bind(self),self.onmessage=function(t){var r=t.data;e.emit("message",r)},e}return o}(O.EventEmitter));(0,m.default)({wasmImport:_,parent:e,captureOutput:!0,IOHandler:crossOriginIsolated?j.default:P.default})}()}},n={};function o(e){var t=n[e];if(void 0!==t)return t.exports;var i=n[e]={id:e,loaded:!1,exports:{}};return r[e].call(i.exports,i,i.exports,o),i.loaded=!0,i.exports}o.m=r,o.x=()=>{var e=o.O(void 0,[38,682],(()=>o(5215)));return o.O(e)},e=[],o.O=(t,r,n,i)=>{if(!r){var u=1/0;for(l=0;l<e.length;l++){for(var[r,n,i]=e[l],c=!0,a=0;a<r.length;a++)(!1&i||u>=i)&&Object.keys(o.O).every((e=>o.O[e](r[a])))?r.splice(a--,1):(c=!1,i<u&&(u=i));if(c){e.splice(l--,1);var s=n();void 0!==s&&(t=s)}}return t}i=i||0;for(var l=e.length;l>0&&e[l-1][2]>i;l--)e[l]=e[l-1];e[l]=[r,n,i]},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((t,r)=>(o.f[r](e,t),t)),[])),o.u=e=>({38:"5e3870ad6f6860c3d67a",682:"8d4300ec1c97bf1689b9"}[e]+".js"),o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e={215:1};o.f.i=(t,r)=>{e[t]||importScripts(o.p+o.u(t))};var t=self.webpackChunk_wapython_website=self.webpackChunk_wapython_website||[],r=t.push.bind(t);t.push=t=>{var[n,i,u]=t;for(var c in i)o.o(i,c)&&(o.m[c]=i[c]);for(u&&u(o);n.length;)e[n.pop()]=1;r(t)}})(),t=o.x,o.x=()=>Promise.all([o.e(38),o.e(682)]).then(t),o.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,