(()=>{var t,e,r={2963:function(t,e,r){"use strict";var n=r(5108),i=this&&this.__assign||function(){return i=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},i.apply(this,arguments)},o=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function a(t){try{u(n.next(t))}catch(t){o(t)}}function l(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,l)}u((n=n.apply(t,e||[])).next())}))},a=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},l=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},u=this&&this.__spreadArray||function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var _=r(4503),c=s(r(7152)),f=s(r(7653)),I=s(r(1618)),S=(0,I.default)("dylink"),E=(0,I.default)("dylink:import"),d=1048576;e.default=function(t){var e=t.path,r=t.importObject,s=t.importWebAssembly,I=t.importWebAssemblySync,A=t.readFileSync,p=t.stub,v=t.allowMainExports;return o(this,void 0,void 0,(function(){function t(t){S("symbolViaPointer",t);var e=M.exports["__WASM_EXPORT__".concat(t)];if(null!=e)return e()}function o(t){if(null!=M){var e=M.exports["__WASM_EXPORT__".concat(t)];if(null!=e){var r=e();if(S("functionViaPointer",t,r),null==w)throw Error("__indirect_function_table must be defined");return w.get(r)}}}function T(t,e){if(null==w)throw Error("__indirect_function_table must be defined");if(w.get(t))throw Error("setTable: attempt to overwrite existing function! ".concat(t));w.length<=t+50&&w.grow(50),w.set(t,e)}function h(t){var r,n,i;for(var o in C){var a=C[o],l=a.symToPtr,u=a.instance,s=null!==(r=l[t])&&void 0!==r?r:null===(i=(n=u.exports)["__WASM_EXPORT__".concat(t)])||void 0===i?void 0:i.call(n);if(null!=s){if(null==w)throw Error("__indirect_function_table must be defined");return S("functionFromOtherLibrary - got ",t," from ",e),w.get(s)}}}function y(t,e){var i;void 0===e&&(e="");var a=null===(i=null==r?void 0:r.env)||void 0===i?void 0:i[t];if(null!=a)return S("getFunction ",t,"from env"),a;if(null!=(a=o(t)))return S("getFunction ",t,"from function pointer"),a;if(null!=(a=h(t)))return S("getFunction ",t,"from other library"),a;if(v&&null!=(a=M.exports[t]))return S("getFunction ",t,"from mainInstance exports (potentially dangerous!)"),a;if((null==e?void 0:e.includes("numpy"))&&t.startsWith("_Z"))return function(){n.log("WARNING: calling dangerous stub for ",t)};if(e)throw Error("".concat(t," -- undefined when importing ").concat(e));return P.env[t]}function m(t){return function(e,r){if(r in e)return Reflect.get(e,r);S("dlopenEnvHandler",r);var n=y(r,t);if(null!=n)return n;S("dlopenEnvHandler got null")}}function g(t,e){if(e in t)return Reflect.get(t,e);var r=t[e];if(!r){var n=new WebAssembly.Global({value:"i32",mutable:!0},0);N[e]=n,r=t[e]=n}return r}function W(t,e){if(e in t)return Reflect.get(t,e);var r=t[e];if(!r){var n=void 0,i=M.exports["__WASM_EXPORT__".concat(e)];null==i?(n=B,D[e]=n,B+=1):n=i(),S("GOTFuncHandler ",e,"--\x3e",n);var o=new WebAssembly.Global({value:"i32",mutable:!0},n);r=t[e]=o}return r}var O,R,w,b,N,D,F,L,G,C,P,H,M,U,B;return a(this,(function(n){switch(n.label){case 0:return null==r&&(r={}),null==(O=r.env)&&(O=r.env={}),null==(R=O.memory)&&(R=O.memory=new WebAssembly.Memory({initial:10})),null==(w=O.__indirect_function_table)&&(w=O.__indirect_function_table=new WebAssembly.Table({initial:1e3,element:"anyfunc"})),b={},N={},D={},F=new Proxy(b,{get:g}),L=new Proxy(b,{get:W}),G={},C={},O.dlopen=function(e,n){var o,a,s,f;if(null==R)throw Error("bug");var p=(0,_.recvString)(e,R);if(S("dlopen: path='%s'",p),null!=G[p])return G[p].handle;var v=new Uint8Array(A(p)),h=(0,c.default)(v);S("metadata",h);var g=Math.pow(2,null!==(o=h.memoryAlign)&&void 0!==o?o:0);g=Math.max(g,16);var W=y("malloc");if(null==W)throw Error("malloc from libc must be available in the  main instance");if(null==h.memorySize)throw Error("memorySize must be defined in the shared library");var O=W(h.memorySize+g);if(0==O)throw Error("malloc failed (you cannot use a stub for malloc)");var b=W(d);if(0==b)throw Error("malloc failed for stack");S("allocating %s bytes for shared library -- at ",h.memorySize+g,O);var P=h.memorySize?(0,_.alignMemory)(O,g):0,H=h.tableSize?B:0,U={memory:R,__indirect_function_table:w,__memory_base:P,__table_base:H,__stack_pointer:new WebAssembly.Global({value:"i32",mutable:!0},b+d)};S("env =",U);var x=i(i({},r),{env:new Proxy(U,{get:m(p)}),"GOT.mem":F,"GOT.func":L});if(B+=null!==(a=h.tableSize)&&void 0!==a?a:0,null==w)throw Error("__indirect_function_table must not be null");w.length<=B+50&&w.grow(50+B-w.length);var k=0;E.enabled&&(k=(new Date).valueOf(),E("importing ",p));var Y=I(p,x);if(E.enabled&&E("imported ",p,", time =",(new Date).valueOf()-k,"ms"),null==w)throw Error("bug");var K={};for(var j in Y.exports)if(null==D[j]){var V=Y.exports[j];null==K[j]&&"function"==typeof V&&(T(B,V),K[j]=B,B+=1)}for(var X in D){var z=null!==(s=Y.exports[X])&&void 0!==s?s:M.exports[X];if(S("table[%s] = %s",D[X],X,z),null==z)throw Error("dlopen -- UNRESOLVED FUNCTION: ".concat(X));T(D[X],z),K[X]=D[X],delete D[X]}for(var X in N){var Z=N[X];delete N[X];var Q=null===(f=Y.exports[X])||void 0===f?void 0:f.value;if(null==Q){var J=t(X);if(null==J)throw Error("dlopen -- UNRESOLVED SYMBOL: ".concat(X));Z.value=J}else Z.value=Q+P}null!=Y.exports.__wasm_call_ctors&&(S("calling __wasm_call_ctors for dynamic library"),Y.exports.__wasm_call_ctors()),null!=Y.exports.__wasm_apply_data_relocs&&(S("calling __wasm_apply_data_relocs for dynamic library"),Y.exports.__wasm_apply_data_relocs());var q=Math.max.apply(Math,u([0],l(Object.keys(C).map((function(t){return parseInt(t)}))),!1))+1,$={path:p,handle:q,instance:Y,symToPtr:K};return G[p]=$,C[q]=$,q},O.dlsym=function(t,e){var r,n;if(null==R)throw Error("bug");var i=(0,_.recvString)(e,R);S("dlsym: handle=%s, symName='%s'",t,i);var o=C[t];if(null==o)throw Error("dlsym: invalid handle ".concat(t));var a=o.symToPtr[i];if(S("sym= ",i,", ptr = ",a),null!=a)return a;if(null!=(a=null===(n=(r=o.instance.exports)["__WASM_EXPORT__".concat(i)])||void 0===n?void 0:n.call(r)))return a;throw Error("dlsym: handle=".concat(t," - unknown symbol '").concat(i,"'"))},O.dlerror=function(){return 0},O.dladdr=function(){return S("dladdr: STUB"),0},O.dlclose=function(t){return 0},P=p?i(i({},r),{env:(0,f.default)(r.env,o,p)}):r,H=0,E.enabled&&(H=(new Date).valueOf(),E("importing ",e)),null==s?[3,2]:[4,s(e,P)];case 1:return U=n.sent(),[3,3];case 2:U=I(e,P),n.label=3;case 3:return M=U,E.enabled&&E("imported ",e,", time =",(new Date).valueOf()-H,"ms"),null!=M.exports.__wasm_call_ctors&&M.exports.__wasm_call_ctors(),B=Math.max.apply(Math,u([0],l((0,_.nonzeroPositions)(w)),!1))+1,[2,M]}}))}))}},9168:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.MBtoPages=void 0;var i=n(r(2963));e.default=i.default;var o=r(4503);Object.defineProperty(e,"MBtoPages",{enumerable:!0,get:function(){return o.MBtoPages}})},7152:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e,n,i=0;function o(){for(var e=0,r=1;;){var n=t[i++];if(e+=(127&n)*r,r*=128,!(128&n))break}return e}function a(){var e=o();return function(t,e,n){for(var i=e+n,o=e;t[o]&&o<i;)o++;var a=t.slice(e,o);return r.decode(a)}(t,(i+=e)-e,e)}function l(t,e){if(t)throw new Error(e)}l(!(1836278016==new Uint32Array(new Uint8Array(t.subarray(0,24)).buffer)[0]),"need to see wasm magic number"),l(0!==t[8],"need the dylink section to be first"),i=9;var u=o();e=i+u,n=a();var s={neededDynlibs:[],tlsExports:new Set,weakImports:new Set};if(null==s.neededDynlibs)throw Error("bug: typescript");if(null==s.tlsExports)throw Error("bug: typescript");if(null==s.weakImports)throw Error("bug: typescript");if("dylink"==n){s.memorySize=o(),s.memoryAlign=o(),s.tableSize=o(),s.tableAlign=o();for(var _=o(),c=0;c<_;++c){var f=a();s.neededDynlibs.push(f)}}else for(l("dylink.0"!==n,"invalid format -- name must be dylink.0 or dylink");i<e;){var I=t[i++],S=o();if(1===I)s.memorySize=o(),s.memoryAlign=o(),s.tableSize=o(),s.tableAlign=o();else if(2===I)for(_=o(),c=0;c<_;++c)f=a(),s.neededDynlibs.push(f);else if(3===I)for(var E=o();E--;){var d=a();256&o()&&s.tlsExports.add(d)}else if(4===I)for(E=o();E--;)a(),d=a(),1==(3&o())&&s.weakImports.add(d);else i+=S}return s};var r=new TextDecoder},7653:function(t,e,r){"use strict";var n=r(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=i(r(1618)),a=(0,o.default)("stub"),l=(0,o.default)("stub:use"),u=(0,o.default)("stub:first");e.default=function(t,e,r){return new Proxy(t,{get:function(t,i){if(i in t)return Reflect.get(t,i);var o=e(i);return null!=o?(a("using function via pointer for ",i),o):("warn"==r&&n.warn("\n* WARNING: creating UNSAFE stub for ".concat(String(i),".  Please fix ASAP!")),l.enabled||u.enabled?function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return _(i,t),0}:function(){return 0})}})};var s=new Set([]);function _(t,e){if(l("WARNING: using stub",t,e),u.enabled){if(s.has(t))return;s.add(t)}u("WARNING: first use of stub",t,e)}},4503:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MBtoPages=e.alignMemory=e.strlen=e.recvString=e.nonzeroPositions=void 0,e.nonzeroPositions=function(t){for(var e=[],r=0;r<t.length;r++)null!=t.get(r)&&e.push(r);return e};var r=new TextDecoder;function n(t,e){for(var r=new Uint8Array(e.buffer),n=t;r[n];)n+=1;return n-t}e.recvString=function(t,e){var i=n(t,e),o=e.buffer.slice(t,t+i);return r.decode(o)},e.strlen=n,e.alignMemory=function(t,e){return Math.ceil(t/e)*e},e.MBtoPages=function(t){return 16*t}},9171:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initConstants=void 0;var r={};e.default=r,e.initConstants=function(t){for(var e=function(t,e){var r=t.callFunction,n=t.recv,i=r("getConstants");if(0==i)throw Error("unable to receive JSON object");return JSON.parse(n.string(i))}(t),n=e.names,i=e.values,o=0;o<n.length;o++)r[n[o]]=i[o]}},4121:function(t,e,r){"use strict";var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.nativeToWasm=void 0;var o=i(r(9171));e.default=function(t){var e=o.default[t],r=Error("Error ".concat(t,"  (errno=").concat(e,")."));return r.wasiErrno=e,r},e.nativeToWasm=function(t){var e,r,i,a={};try{for(var l=n(["E2BIG","EACCES","EBADF","EBUSY","ECHILD","EDEADLK","EEXIST","EFAULT","EFBIG","EINTR","EINVAL","EIO","EISDIR","EMFILE","EMLINK","ENFILE","ENODEV","ENOENT","ENOEXEC","ENOMEM","ENOSPC","ENOTDIR","ENOTTY","ENXIO","EPERM","EPIPE","EROFS","ESPIPE","ESRCH","ETXTBSY","EXDEV"]),u=l.next();!u.done;u=l.next()){var s=u.value,_=null===(i=t.constants)||void 0===i?void 0:i[s];if(!_)throw Error("posix constant ".concat(s," not known"));var c=o.default[s];if(!c)throw Error("wasm constant ".concat(s," not known"));a[_]=c}}catch(t){e={error:t}}finally{try{u&&!u.done&&(r=l.return)&&r.call(l)}finally{if(e)throw e.error}}return a}},5792:function(t,e,r){"use strict";var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=i(r(2508)),a=r(4121),l=i(r(9171)),u=(0,o.default)("posix:fork-exec");e.default=function(t){var e=t.posix,r=t.recv,i=t.wasi;function o(t){var e=i.FD_MAP.get(t);return null==e?-1:e.real}function s(){var t,r,o={};try{for(var a=n(i.FD_MAP.keys()),l=a.next();!l.done;l=a.next()){var s=l.value,_=i.FD_MAP.get(s);try{e.is_inheritable(_.real)&&(o[s]=_.real)}catch(t){u("getInheritableDescriptorsMap",_.real,t)}}}catch(e){t={error:e}}finally{try{l&&!l.done&&(r=a.return)&&r.call(a)}finally{if(t)throw t.error}}return o}return{python_wasm_set_inheritable:function(t,r){if(null==e.set_inheritable)return 0;var n=o(t);if(-1==n)throw Error("invalid file descriptor");try{e.set_inheritable(n,!!r)}catch(t){return 0}return 0},python_wasm_fork_exec:function(t,n,i,_,c,f,I,S,E,d,A,p,v,T,h,y,m,g,W,O,R,w,b,N,D,F){var L;u("called fork_exec"),u("ignoring these: ",{restore_signals:T,call_setsid:h,pgid_to_set:y,call_setgid:m,gid:g,call_setgroups:W,groups_size:O,groups:R,call_setuid:w,uid:b,child_umask:N,child_sigmask:D}),u("before change",{p2cread:c,p2cwrite:f,c2pread:I,c2pwrite:S,errread:E,errwrite:d,errpipe_read:A,errpipe_write:p});for(var G=[],C=(0,a.nativeToWasm)(e),P=0;P<100;P++)G[P]=null!==(L=C[P])&&void 0!==L?L:l.default.ENOENT;var H=JSON.stringify(s()),M=r.arrayOfStrings(i);M.length>0&&M.push("WASI_FD_INFO=".concat(H));var U={exec_array:r.arrayOfStrings(t),argv:r.arrayOfStrings(n),envp:M,cwd:r.string(_),p2cread:o(c),p2cwrite:o(f),c2pread:o(I),c2pwrite:o(S),errread:o(E),errwrite:o(d),errpipe_read:o(A),errpipe_write:o(p),close_fds:v,fds_to_keep:r.arrayOfI32(F).map(o),err_map:G,WASI_FD_INFO:H};u("opts",U),u("descriptors map = ",s());try{var B=e.fork_exec(U);return u("got subprocess = ",B),B}catch(t){return u("error doing fork",t),-1}}}}},8294:function(t,e,r){"use strict";var n=r(4155),i=this&&this.__assign||function(){return i=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},i.apply(this,arguments)},o=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},a=this&&this.__spreadArray||function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var u=l(r(5792)),s=l(r(987)),_=l(r(3349)),c=l(r(1017)),f=l(r(1930)),I=l(r(4509)),S=l(r(5652)),E=l(r(7793)),d=l(r(580)),A=l(r(406)),p=l(r(4603)),v=l(r(3498)),T=l(r(4325)),h=r(9171),y=l(r(9171)),m=l(r(2508)),g=(0,m.default)("posix:not-implemented"),W=(0,m.default)("posix:call"),O=(0,m.default)("posix:return");n.env.__STUPID_HACK__="",e.default=function(t){var e,r=i(i(i(i(i(i(i(i(i(i(i(i(i({},(0,u.default)(t)),(0,s.default)(t)),(0,_.default)(t)),(0,c.default)(t)),(0,f.default)(t)),(0,I.default)(t)),(0,S.default)(t)),(0,E.default)(t)),(0,A.default)(t)),(0,d.default)(t)),(0,p.default)(t)),(0,v.default)(t)),(0,T.default)(t)),n={},l={};if(null!=t.posix.constants)for(var m in t.posix.constants)l[t.posix.constants[m]]=m;function R(e){var r=l[e];if(null!=r){var n=y.default[r];if(null!=n)return void t.callFunction("setErrno",n)}g("Unable to map nativeErrno (please update code)",e)}e=null!=t.posix.chdir?function(){var e,r;null===(r=(e=t.posix).chdir)||void 0===r||r.call(e,t.getcwd())}:function(){};var w=function(i){n[i]=function(){for(var n,l=[],u=0;u<arguments.length;u++)l[u]=arguments[u];e();try{W(i,l);var s=r[i].apply(r,a([],o(l),!1));return O(i,s),s}catch(e){return null!=e.wasiErrno?t.callFunction("setErrno",e.wasiErrno):null!=e.code?R(parseInt(e.code)):"NotImplementedError"==e.name?t.callFunction("setErrno",y.default.ENOSYS):g("Posix library raised exception without error code",e),null!==(n=e.ret)&&void 0!==n?n:-1}}};for(var b in r)w(b);return n.init=function(){(0,h.initConstants)(t)},n}},987:function(t,e,r){"use strict";var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=r(9063),a=i(r(9171));function l(t,e){if(0==e)return e;if(e==t.constants.AF_INET)return a.default.AF_INET;if(e==t.constants.AF_INET6)return a.default.AF_INET6;throw Error("unsupported native address family: ".concat(e))}e.default=function(t){var e,r,i=t.memory,u=t.posix,s=t.callFunction,_=t.recv,c=t.send,f=t.free,I={},S=function(t){I[t]=function(){return(0,o.notImplemented)(t)}};try{for(var E=n(" getprotobyname getservbyname getservbyport getnameinfo getpeername".split(/\s+/)),d=E.next();!d.done;d=E.next())S(d.value)}catch(t){e={error:t}}finally{try{d&&!d.done&&(r=E.return)&&r.call(E)}finally{if(e)throw e.error}}function A(t,e,r){var n=c.malloc(2+e),o=new DataView(i.buffer);o.setUint16(n,t,!0);for(var a=0;a<e;a++)o.setUint8(n+2+a,r[a]);return n}function p(t,e){new DataView(i.buffer).setUint32(t,e,!0)}function v(t){var e=c.malloc(4*(t.length+1));if(0==e)throw Error("out of memory");for(var r=0;r<t.length;r++)p(e+4*r,c.string(t[r]));return p(e+4*t.length,0),e}function T(t){var e=l(u,t.h_addrtype);return s("sendHostent",c.string(t.h_name),v(t.h_aliases),e,t.h_length,v(t.h_addr_list),t.h_addr_list.length)}I.gethostbyname=function(t){try{null==u.gethostbyname&&(0,o.notImplemented)("gethostbyaddr",0);var e=_.string(t);return T(u.gethostbyname(e))}catch(t){throw t.ret=0,t}},I.gethostbyaddr=function(t,e,r){try{null==u.gethostbyaddr&&(0,o.notImplemented)("gethostbyaddr",0);var n=s("recvAddr",t,r);if(0==n)return 0;var i=_.string(n);return f(n),T(u.gethostbyaddr(i))}catch(t){throw t.ret=0,t}},I.getaddrinfo=function(t,e,r,n){if(null==u.getaddrinfo)return(0,o.notImplemented)("getaddrinfo"),-1;var f,I=_.string(t),S=_.string(e),E=function(t){var e=new DataView(i.buffer),r=e.getUint32(t,!0);t+=4;var n=function(t,e){if(0==e)return e;if(e==a.default.AF_INET)return t.constants.AF_INET;if(e==a.default.AF_INET6)return t.constants.AF_INET6;throw Error("unsupported WASM address family: ".concat(e))}(u,e.getUint32(t,!0));t+=4;var o=function(t,e){if(!e)return e;for(var r in a.default)if(r.startsWith("SOCK")&&a.default[r]==e&&null!=t.constants[r])return t.constants[r];throw Error("unsupported socktype ".concat(e))}(u,e.getUint32(t,!0));return t+=4,{flags:r,family:n,socktype:o,protocol:e.getUint32(t,!0)}}(r);try{f=u.getaddrinfo(I,S,E)}catch(t){if(t.code)return parseInt(t.code);throw t}for(var d=0,v=0,T=f.length-1;T>=0;){var h=f[T];h.ai_family=h.sa_family=l(u,h.ai_family);var y=A(h.sa_family,h.ai_addrlen,h.sa_data);if(!y)throw Error("error creating sockaddr");if(!(v=s("sendAddrinfo",h.ai_flags,h.ai_family,h.ai_socktype,h.ai_protocol,h.ai_addrlen,y,null!=h.ai_canonname?c.string(h.ai_canonname):0,d)))throw Error("error creating addrinfo structure");d=v,T-=1}if(!v)throw Error("error creating addrinfo structure");return p(n,v),0};var h={};I.gai_strerror=function(t){var e,r;if(null!=h[t])return h[t];var n=c.string(null!==(r=null===(e=u.gai_strerror)||void 0===e?void 0:e.call(u,t))&&void 0!==r?r:"Unknown error");return h[t]=n,n};var y={};I.hstrerror=function(t){var e,r;if(null!=y[t])return y[t];var n=c.string(null!==(r=null===(e=u.hstrerror)||void 0===e?void 0:e.call(u,t))&&void 0!==r?r:"Unknown error");return y[t]=n,n};var m=null;return I.__h_errno_location=function(){if(null==m&&(m=c.malloc(4),c.i32(m,0)),null==m)throw Error("bug");return m},I}},3349:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(9063),o=n(r(9171));e.default=function(t){var e=t.posix,r=t.recv,n=t.send,a=t.callFunction;return{if_indextoname:function(t,r){var a,l=e.if_indextoname;null==l&&(0,i.notImplemented)("if_indextoname");try{a=l(t)}catch(t){return 0}return n.string(a,{ptr:r,len:o.default.IFNAMSIZ}),r},if_nametoindex:function(t){var n=e.if_nametoindex;null==n&&(0,i.notImplemented)("if_nametoindex");var o=r.string(t);try{return n(o)}catch(t){return 0}},if_nameindex:function(){var t=e.if_nameindex;try{if(null==t){var r=a("createNameIndexArray",0);if(0==r)throw Error("out of memory");return r}var i=t(),o=a("createNameIndexArray",i.length);if(0==o)throw Error("out of memory");for(var l=0;l<i.length;l++)a("setNameIndexElement",o,l,i[l][0],n.string(i[l][1]));return o}catch(t){throw t.ret=0,t}},if_freenameindex:function(t){a("freeNameIndexArray",t)}}}},1017:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(9063);e.default=function(t){var e=t.callFunction,r=t.posix,i=t.recv,o=t.send;function a(t,r){e("set_statvfs",t,r.f_bsize,r.f_frsize,BigInt(r.f_blocks),BigInt(r.f_bfree),BigInt(r.f_bavail),BigInt(r.f_files),BigInt(r.f_ffree),BigInt(r.f_favail),r.f_fsid,r.f_flag,r.f_namemax)}var l=0;return{login_tty:function(t){return null==r.login_tty&&(0,n.notImplemented)("login_tty"),r.login_tty(t),0},statvfs:function(t,e){null==r.statvfs&&(0,n.notImplemented)("statvfs");var o=i.string(t);return a(e,r.statvfs(o)),0},fstatvfs:function(t,e){return null==r.fstatvfs&&(0,n.notImplemented)("statvfs"),a(e,r.fstatvfs(t)),0},ctermid:function(t){if(null==r.ctermid&&(0,n.notImplemented)("ctermid"),t){var e=r.ctermid();return o.string(e,{ptr:t,len:e.length+1}),t}if(l)return l;var i=r.ctermid();return l=o.string(i)},getpwnam_r:function(){(0,n.notImplemented)("getpwnam_r")},getpwuid:function(){(0,n.notImplemented)("getpwnam_r")},getpwuid_r:function(){(0,n.notImplemented)("getpwnam_r")},openpty:function(){(0,n.notImplemented)("openpty")},msync:function(){(0,n.notImplemented)("msync")},madvise:function(){(0,n.notImplemented)("madvise")},mremap:function(){(0,n.notImplemented)("mremap")},backtrace:function(){(0,n.notImplemented)("backgrace")}}}},1930:function(t,e,r){"use strict";var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0});var i=r(9063);e.default=function(t){var e,r,o={},a=function(t){o[t]=function(){return(0,i.notImplemented)(t)}};try{for(var l=n("sched_get_priority_max sched_get_priority_min sched_getparam sched_getscheduler sched_rr_get_interval sched_setparam sched_setscheduler".split(/\s+/)),u=l.next();!u.done;u=l.next())a(u.value)}catch(t){e={error:t}}finally{try{u&&!u.done&&(r=l.return)&&r.call(l)}finally{if(e)throw e.error}}return o}},4509:function(t,e,r){"use strict";var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.setSignalSet=e.getSignalSet=void 0;var o=i(r(9171)),a={};function l(t){return null==a[t]&&(a[t]=new Set),a[t]}e.getSignalSet=l,e.setSignalSet=function(t,e){a[t]=e};var u=new Set;e.default=function(t){var e=t.process,r={kill:function(t,r){return null==e.kill||e.kill(t,r),0},raise:function(t){var n;return r.kill(null!==(n=e.pid)&&void 0!==n?n:1,t)},killpg:function(t,r){return null==e.kill||e.kill(-t,r),0},sigemptyset:function(t){return l(t).clear(),0},sigfillset:function(t){for(var e=l(t),r=1;r<=31;r++)e.add(r);return 0},sigaddset:function(t,e){return l(t).add(e),0},sigdelset:function(t,e){return l(t).delete(e),0},sigismember:function(t,e){return l(t).has(e)?1:0},sigprocmask:function(t,e,r){var i,a,s,_,c,f;try{if(!e)return 0;var I=l(e);switch(t){case o.default.SIG_BLOCK:try{for(var S=n(I),E=S.next();!E.done;E=S.next()){var d=E.value;u.add(d)}}catch(t){i={error:t}}finally{try{E&&!E.done&&(a=S.return)&&a.call(S)}finally{if(i)throw i.error}}return 0;case o.default.SIG_UNBLOCK:try{for(var A=n(I),p=A.next();!p.done;p=A.next())d=p.value,u.delete(d)}catch(t){s={error:t}}finally{try{p&&!p.done&&(_=A.return)&&_.call(A)}finally{if(s)throw s.error}}return 0;case o.default.SIG_SETMASK:u.clear();try{for(var v=n(I),T=v.next();!T.done;T=v.next())d=T.value,u.add(d)}catch(t){c={error:t}}finally{try{T&&!T.done&&(f=v.return)&&f.call(v)}finally{if(c)throw c.error}}return 0;default:throw Error("sigprocmask - invalid how=".concat(t))}}finally{r&&function(t){var e,r,i=l(t);i.clear();try{for(var o=n(u),a=o.next();!a.done;a=o.next()){var s=a.value;i.add(s)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}}(r)}}};return r.pthread_sigmask=r.sigprocmask,r}},5652:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(r(4121));e.default=function(t){return{socket:function(t,e,r){throw(0,i.default)("ENOTSUP")}}}},7793:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(9063),i=r(4509);e.default=function(t){var e=t.callFunction,r=t.posix,o=t.recv,a=t.send,l={},u={};function s(t,e){if(void 0===e&&(e=!1),null==u[t])return u[t]={};var r=u[t];if(null!=r)return e&&(null!=r.sigdefaultPtr&&(r.sigdefault=(0,i.getSignalSet)(r.sigdefaultPtr)),null!=r.sigmaskPtr&&(r.sigmask=(0,i.getSignalSet)(r.sigmaskPtr))),r;throw Error("bug")}return{posix_spawnattr_setschedparam:function(t,r){return s(t).schedparam={sched_priority:e("get_posix_spawnattr_schedparam_sched_priority",r)},0},posix_spawnattr_getschedparam:function(t,r){var n,i=null!==(n=s(t).schedparam)&&void 0!==n?n:0;return e("set_posix_spawnattr_schedparam_sched_priority",r,i),0},posix_spawnattr_setschedpolicy:function(t,e){return s(t).schedpolicy=e,0},posix_spawnattr_getschedpolicy:function(t,e){var r;return a.i32(e,null!==(r=s(t).schedpolicy)&&void 0!==r?r:0),0},posix_spawnattr_init:function(t){return u[t]={},0},posix_spawnattr_destroy:function(t){return delete u[t],0},posix_spawnattr_setflags:function(t,e){return s(t).flags=e,0},posix_spawnattr_getflags:function(t,e){var r;return a.i32(e,null!==(r=s(t).flags)&&void 0!==r?r:0),0},posix_spawnattr_setpgroup:function(t,e){return s(t).pgroup=e,0},posix_spawnattr_getpgroup:function(t,e){var r;return a.i32(e,null!==(r=s(t).pgroup)&&void 0!==r?r:0),0},posix_spawnattr_setsigmask:function(t,e){return s(t).sigmaskPtr=e,0},posix_spawnattr_getsigmask:function(t,e){var r=s(t).sigmaskPtr;return(0,i.setSignalSet)(e,(0,i.getSignalSet)(r)),0},posix_spawnattr_setsigdefault:function(t,e){return s(t).sigdefaultPtr=e,0},posix_spawnattr_getsigdefault:function(t,e){var r=s(t).sigdefaultPtr;return(0,i.setSignalSet)(e,(0,i.getSignalSet)(r)),0},posix_spawn:function(t,e,i,u,_,c){null==r.posix_spawn&&(0,n.notImplemented)("posix_spawn");var f=o.string(e),I=o.arrayOfStrings(_),S=o.arrayOfStrings(c),E=r.posix_spawn(f,l[i],s(u,!0),I,S);return a.i32(t,E),0},posix_spawnp:function(t,e,i,u,_,c){null==r.posix_spawnp&&(0,n.notImplemented)("posix_spawnp");var f=o.string(e),I=o.arrayOfStrings(_),S=o.arrayOfStrings(c),E=r.posix_spawnp(f,l[i],s(u,!0),I,S);return a.i32(t,E),0},posix_spawn_file_actions_init:function(t){return l[t]=[],0},posix_spawn_file_actions_destroy:function(t){return delete l[t],0},posix_spawn_file_actions_addclose:function(t,e){return null==l[t]&&(l[t]=[]),l[t].push(["addclose",e]),0},posix_spawn_file_actions_addopen:function(t,e,r,n,i){null==l[t]&&(l[t]=[]);var a=o.string(r);return l[t].push(["addopen",e,a,n,i]),0},posix_spawn_file_actions_adddup2:function(t,e,r){return null==l[t]&&(l[t]=[]),l[t].push(["adddup2",e,r]),0}}}},406:function(t,e,r){"use strict";var n=r(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=r(6470),a=i(r(9171)),l=i(r(4121));e.default=function(t){var e=t.fs,r=t.process,i=t.recv,u=t.wasi;return{chmod:function(t,r){if(!r)return 0;var n=i.string(t);return e.chmodSync(n,r),0},_fchmod:function(t,r){if(!r)return 0;var i=u.FD_MAP.get(t);return i?(e.fchmodSync(i.real,r),0):(n.warn("bad file descriptor, fchmod"),-1)},fchmodat:function(t,n,s,_){if(!s)return 0;var c=function(t,e,n){var i,s,_;if(void 0===n&&(n=!1),(0,o.isAbsolute)("path"))return e;if(t==a.default.AT_FDCWD)_=null!==(s=null===(i=r.cwd)||void 0===i?void 0:i.call(r))&&void 0!==s?s:"/";else{var c=u.FD_MAP.get(t);if(!c)throw(0,l.default)("EBADF");_=c.path}if(0==e.length){if(!n)throw(0,l.default)("ENOENT");return _}return(0,o.join)(_,e)}(t,i.string(n));return e.chmodSync(c,s),0},lchmod:function(t,r){if(!r)return 0;var n=i.string(t);return e.lchmodSync(n,r),0},umask:function(t){var e,n;return null!==(n=null===(e=r.umask)||void 0===e?void 0:e.call(r,t))&&void 0!==n?n:18}}}},580:(t,e,r)=>{"use strict";var n=r(5108);Object.defineProperty(e,"__esModule",{value:!0});var i=r(9063);e.default=function(t){var e=t.child_process,r=t.os,o=t.recv,a=t.send;return{longjmp:function(){(0,i.notImplemented)("longjmp")},getloadavg:function(t,e){var n=r.loadavg;if(null==n)return-1;var i=n();return a.f64(t,i[0]),a.f64(t+8,i[1]),a.f64(t+16,i[2]),e},system:function(t){null==e.spawnSync&&(0,i.notImplemented)("system is not implemented yet");var r=o.string(t),a=e.spawnSync(r,{shell:!0}),l=a.stdout,u=a.stderr,s=a.status;return n.log(l.toString()),n.warn(u.toString()),s}}}},4603:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(6786);e.default=function(t){var e=t.child_process,r=t.memory,i=t.os;return{clock_settime:function(t,o){var a,l;if(null==e.spawnSync)throw Error("clock_settime is not supported on this platform");var u,s,_=new DataView(r.buffer).getUint32(o,!0),c="";switch(null===(a=i.platform)||void 0===a?void 0:a.call(i)){case"darwin":u="date",s=["-f","%s","".concat(_)];break;case"linux":u="date",s=["--set=@".concat(_)];break;case"win32":var f=new Date(1e3*_);u="date",s=[n("m/d/yyyy",f)],c="time",s=[n("HH:MM:ss",f)];break;default:throw Error("clock_settime not supported on platform  = ".concat(null===(l=i.platform)||void 0===l?void 0:l.call(i)))}var I=e.spawnSync(u,s),S=I.status,E=I.stderr;if(S)throw Error("clock_settime failed - ".concat(E));if(c){var d=e.spawnSync(c,[]),A=d.status,p=d.stderr;if(A)throw Error("clock_settime failed - ".concat(p))}return 0}}}},3498:function(t,e,r){"use strict";var n=r(5108),i=this&&this.__assign||function(){return i=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},i.apply(this,arguments)},o=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},a=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var u=r(9063),s=l(r(9171)),_=l(r(2508)),c=r(3728),f=(0,_.default)("posix:unistd");e.default=function(t){var e=t.fs,r=t.os,l=t.process,_=t.recv,I=t.send,S=t.wasi,E=t.posix,d=t.memory,A=void 0;function p(t){var e=S.FD_MAP.get(t);if(null==e)throw Error("invalid file descriptor");return e.real}var v=S.FD_MAP.get(0),T=S.FD_MAP.get(1),h={chown:function(t,r,n){var i=_.string(t);return e.chownSync(i,r,n),0},lchown:function(t,r,n){var i=_.string(t);return e.lchownSync(i,r,n),0},_fchown:function(t,r,n){return e.fchownSync(p(t),r,n),0},getuid:function(){var t,e;return null!==(e=null===(t=l.getuid)||void 0===t?void 0:t.call(l))&&void 0!==e?e:0},getgid:function(){var t,e;return null!==(e=null===(t=l.getgid)||void 0===t?void 0:t.call(l))&&void 0!==e?e:0},_geteuid:function(){var t,e;return null!==(e=null===(t=l.geteuid)||void 0===t?void 0:t.call(l))&&void 0!==e?e:0},getegid:function(){var t,e;return null!==(e=null===(t=l.getegid)||void 0===t?void 0:t.call(l))&&void 0!==e?e:0},getgroups:function(t,e){var r,n=null===(r=l.getgroups)||void 0===r?void 0:r.call(l);if(null==n)return 0;if(0==t)return n.length;var i=Math.min(n.length,t);if(0==i)return 0;for(var o=new DataView(d.buffer),a=0;a<i;a++)o.setUint32(e+4*a,n[a],!0);return i},getpid:function(){var t;return null!==(t=l.pid)&&void 0!==t?t:1},getpgid:function(t){var e,r;return null!==(r=null===(e=E.getpgid)||void 0===e?void 0:e.call(E,t))&&void 0!==r?r:1},setpgid:function(t,e){return null==E.setpgid&&(0,u.notImplemented)("setpgid"),E.setpgid(t,e),0},getpgrp:function(){var t,e;return null!==(e=null===(t=E.getpgrp)||void 0===t?void 0:t.call(E))&&void 0!==e?e:1},nice:function(t){var e,n,i=null===(e=r.getPriority)||void 0===e?void 0:e.call(r);null!=i&&(null===(n=r.setPriority)||void 0===n||n.call(r,i+t))},getpriority:function(t,e){var i;return null==r.getPriority?0:0!=t?(n.warn("getpriority can only be implemented in node.js for *process id*"),0):null===(i=r.getPriority)||void 0===i?void 0:i.call(r,e)},setpriority:function(t,e,i){var o;return null==r.setPriority?0:0!=t?(n.warn("setpriority can only be implemented in node.js for *process id*"),-1):null===(o=r.setPriority)||void 0===o?void 0:o.call(r,e,i)},dup:function(t){null==E.dup&&(0,u.notImplemented)("dup");var e=S.FD_MAP.get(t),r=E.dup(e.real),n=S.getUnusedFileDescriptor();return S.FD_MAP.set(n,i(i({},e),{real:r})),n},dup2:function(t,e){var r;null==E.dup2&&(0,u.notImplemented)("dup2");var n,o=S.FD_MAP.get(t);n=S.FD_MAP.has(e)&&null!==(r=S.FD_MAP.get(e).real)&&void 0!==r?r:e;var a=E.dup2(o.real,n);return S.FD_MAP.set(e,i(i({},o),{real:a})),e},sync:function(){var t,r;if(null!=e.fsyncSync)try{for(var n=o(S.FD_MAP),i=n.next();!i.done;i=n.next()){var l=a(i.value,2),u=(l[0],l[1].real);e.fsyncSync(u)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(t)throw t.error}}},setuid:function(){throw Error("setuid is not supported")},seteuid:function(t){return null==E.seteuid&&(0,u.notImplemented)("seteuid"),E.seteuid(t),0},setegid:function(t){return null==E.setegid&&(0,u.notImplemented)("setegid"),E.setegid(t),0},setgid:function(t){return null==l.setgid&&(0,u.notImplemented)("setgid"),l.setgid(t),0},setsid:function(t){return null==E.setsid&&(0,u.notImplemented)("setsid"),E.setsid(t)},getsid:function(){(0,u.notImplemented)("getsid")},setreuid:function(t){return null==E.setreuid&&(0,u.notImplemented)("setreuid"),E.setreuid(t),0},setregid:function(t){return null==E.setregid&&(0,u.notImplemented)("setregid"),E.setregid(t),0},getppid:function(){return null==E.getppid?h.getpid():E.getppid()},setgroups:function(){(0,u.notImplemented)("setgroups")},setpgrp:function(){(0,u.notImplemented)("setpgrp")},tcgetpgrp:function(){(0,u.notImplemented)("tcgetpgrp")},tcsetpgrp:function(){(0,u.notImplemented)("tcsetpgrp")},fork:function(){var t;null==E.fork&&(0,u.notImplemented)("fork");var e=E.fork();return 0==e&&(null===(t=E.close_event_loop)||void 0===t||t.call(E)),e},fork1:function(){(0,u.notImplemented)("fork1")},forkpty:function(){(0,u.notImplemented)("forkpty")},getlogin:function(){var t,e,n;if(null!=A)return A;var i=null!==(n=null===(e=null===(t=r.userInfo)||void 0===t?void 0:t.call(r))||void 0===e?void 0:e.username)&&void 0!==n?n:"user";if(null==(A=I.string(i)))throw Error("bug");return A},gethostname:function(t,e){if(null==r.hostname)throw Error("gethostname not supported on this platform");var n=r.hostname();return I.string(n,{ptr:t,len:e}),0},sethostname:function(t,e){if(null==E.sethostname)throw Error("sethostname not supported on this platform");var r=_.string(t,e);return E.sethostname(r),0},ttyname_r:function(t,e,r){if(null==E.ttyname)throw Error("ttyname_r is not supported on this platform");return I.string(E.ttyname(t),{ptr:e,len:r}),0},alarm:function(t){if(null==E.alarm)throw Error("alarm is not supported on this platform");return E.alarm(t)},getresuid:function(t,e,r){null==E.getresuid&&(0,u.notImplemented)("getresuid");var n=E.getresuid(),i=n.ruid,o=n.euid,a=n.suid,l=new DataView(d.buffer);return l.setUint32(t,i,!0),l.setUint32(e,o,!0),l.setUint32(r,a,!0),0},getresgid:function(t,e,r){null==E.getresgid&&(0,u.notImplemented)("getresgid");var n=E.getresgid(),i=n.rgid,o=n.egid,a=n.sgid,l=new DataView(d.buffer);return l.setUint32(t,i,!0),l.setUint32(e,o,!0),l.setUint32(r,a,!0),0},setresuid:function(t,e,r){return null==E.setresuid&&(0,u.notImplemented)("setresuid"),E.setresuid(t,e,r),0},setresgid:function(t,e,r){return null==E.setresgid&&(0,u.notImplemented)("setresgid"),E.setresgid(t,e,r),0},execve:function(t,e,r){null==E._execve&&(0,u.notImplemented)("execve");var n=_.string(t),i=_.arrayOfStrings(e),o=_.arrayOfStrings(r);return f("execve",n,i,o),E._execve(n,i,o),0},execv:function(t,e){null==E.execv&&(0,u.notImplemented)("execve");var r=_.string(t),n=_.arrayOfStrings(e);return f("execv",r,n),E.execv(r,n),0},execlp:function(){(0,u.notImplemented)("execlp")},fexecve:function(t,e,r){null==E._fexecve&&(0,u.notImplemented)("fexecve");var n=_.arrayOfStrings(e),i=_.arrayOfStrings(r);return E._fexecve(p(t),n,i),0},pipe:function(t){null==E.pipe&&(0,u.notImplemented)("pipe");var e=E.pipe(),r=e.readfd,n=e.writefd,i=S.getUnusedFileDescriptor();S.FD_MAP.set(i,{real:r,rights:v.rights,filetype:c.constants.WASI_FILETYPE_SOCKET_STREAM});var o=S.getUnusedFileDescriptor();return S.FD_MAP.set(o,{real:n,rights:T.rights,filetype:c.constants.WASI_FILETYPE_SOCKET_STREAM}),I.i32(t,i),I.i32(t+4,o),0},pipe2:function(t,e){var r,i;null==E.pipe2&&(0,u.notImplemented)("pipe2");var o=0;e&s.default.O_NONBLOCK&&(o+=null!==(i=null===(r=E.constants)||void 0===r?void 0:r.O_NONBLOCK)&&void 0!==i?i:0);var a=E.pipe2(o),l=a.readfd,_=a.writefd;return n.warn("pipe2 -- TODO: we almost certainly need to abstract these through our WASI fd object!"),I.i32(t,l),I.i32(t+4,_),0},lockf:function(t,e,r){var n,i,a=E.lockf;null==a&&(0,u.notImplemented)("lockf");var l=void 0;try{for(var _=o(["F_ULOCK","F_LOCK","F_TLOCK","F_TEST"]),c=_.next();!c.done;c=_.next()){var f=c.value;if(e==s.default[f]){l=E.constants[f];break}}}catch(t){n={error:t}}finally{try{c&&!c.done&&(i=_.return)&&i.call(_)}finally{if(n)throw n.error}}if(null==l)throw Error("invalid cmd ".concat(e));return a(p(t),l,BigInt(r)),0},pause:function(){var t=E.pause;return null==t&&(0,u.notImplemented)("pause"),t()},initgroups:function(t,e){var r=l.initgroups;return null==r&&(0,u.notImplemented)("initgroups"),r(_.string(t),e),0},getgrouplist:function(t,e,r,n){var i,o=E.getgrouplist,a=_.string(t),l=_.i32(n);i=null==o?[e]:o(a,e);for(var u=Math.min(i.length,l),s=0;s<u;s++)I.u32(r+4*s,i[s]);return I.i32(n,i.length),u<i.length?-1:0}};return h}},9063:function(t,e){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.notImplemented=e.NotImplementedError=void 0;var i=function(t){function e(e,r){var n=t.call(this,"".concat(e," is not implemented yet"))||this;return n.name="NotImplementedError",null!=r&&(n.ret=r),n}return n(e,t),e}(Error);e.NotImplementedError=i,e.notImplemented=function(t,e){throw new i(t,e)}},4325:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(9063);e.default=function(t){var e=t.posix,r=t.send;return{wait:function(t){null==e.wait&&(0,n.notImplemented)("wait");var i=e.wait(),o=i.ret,a=i.wstatus;return r.i32(t,a),o},waitid:function(){return(0,n.notImplemented)("waitid"),-1},waitpid:function(t,i,o){null==e.waitpid&&(0,n.notImplemented)("waitpid");var a=e.waitpid(t,o),l=a.ret,u=a.wstatus;return r.i32(i,u),l}}}},4586:function(t,e,r){"use strict";var n=r(5108),i=this&&this.__assign||function(){return i=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},i.apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var o={createKey:function(t){return JSON.stringify(t)},ignoreSingleUndefined:!1};e.default=function(t,e){e=i(i({},o),e||{});var r={};return function(){for(var i=[],o=0;o<arguments.length;o++)i[o]=arguments[o];e.ignoreSingleUndefined&&1===i.length&&void 0===i[0]&&(n.warn("Ignoring single undefined arg (reuseInFlight)"),i=[]);var a=e.createKey(i);return r.hasOwnProperty(a)||(r[a]=t.apply(this,i).then((function(t){return delete r[a],t}),(function(t){throw delete r[a],t}))),r[a]}}},2989:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__assign||function(){return o=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},o.apply(this,arguments)},a=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function a(t){try{u(n.next(t))}catch(t){o(t)}}function l(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,l)}u((n=n.apply(t,e||[])).next())}))},l=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},u=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var _=r(3728),c=s(r(5516)),f=s(r(4420)),I=s(r(699)),S=s(r(2508)),E=r(7187),d=s(r(115)),A=s(r(8812)),p=s(r(1235)),v=(0,S.default)("wasm:worker");function T(t,e){var r;return void 0===e&&(e={}),a(this,void 0,void 0,(function(){function n(t,e){var r=new Uint8Array(p.readFileSync(t)),n=new WebAssembly.Module(r);return new WebAssembly.Instance(n,e)}var i,s,I,S,E,A,p,T,y,m=this;return l(this,(function(g){switch(g.label){case 0:v("wasmImportBrowser"),i=[],s=function(t){var e,r;return l(this,(function(n){switch(n.label){case 0:return"zipurl"!=t.type?[3,5]:(e=void 0,t.async?[3,3]:(r={type:"zip"},[4,fetch(t.zipurl)]));case 1:return[4,n.sent().arrayBuffer()];case 2:return r.data=n.sent(),r.mountpoint=t.mountpoint,e=r,[3,4];case 3:e={type:"zip-async",getData:function(){return a(m,void 0,void 0,(function(){return l(this,(function(e){switch(e.label){case 0:return[4,fetch(t.zipurl)];case 1:return[4,e.sent().arrayBuffer()];case 2:return[2,e.sent()]}}))}))},mountpoint:t.mountpoint},n.label=4;case 4:return i.push(e),[3,6];case 5:i.push(t),n.label=6;case 6:return[2]}}))},g.label=1;case 1:g.trys.push([1,6,7,8]),I=u(null!==(r=e.fs)&&void 0!==r?r:[]),S=I.next(),g.label=2;case 2:return S.done?[3,5]:(E=S.value,[5,s(E)]);case 3:g.sent(),g.label=4;case 4:return S=I.next(),[3,2];case 5:return[3,8];case 6:return A=g.sent(),T={error:A},[3,8];case 7:try{S&&!S.done&&(y=I.return)&&y.call(I)}finally{if(T)throw T.error}return[7];case 8:return p=(0,_.createFileSystem)(i),[4,(0,f.default)({source:t,bindings:o(o({},c.default),{fs:p,posix:d.default}),options:e,importWebAssembly:h,importWebAssemblySync:n,readFileSync:function(t){return p.readFileSync(t)},maxMemoryMB:1e3})];case 9:return[2,g.sent()]}}))}))}function h(t,e){return a(this,void 0,void 0,(function(){return l(this,(function(r){switch(r.label){case 0:return[4,WebAssembly.instantiateStreaming(fetch(t),e)];case 1:return[2,r.sent().instance]}}))}))}e.default=T,null==self.document&&function(){v("initializing worker");var t=new(function(t){function e(){var e=t.call(this)||this;return e.postMessage=self.postMessage.bind(self),self.onmessage=function(t){var r=t.data;e.emit("message",r)},e}return i(e,t),e}(E.EventEmitter));(0,I.default)({wasmImport:T,parent:t,captureOutput:!0,IOHandler:crossOriginIsolated?A.default:p.default})}()},4420:function(t,e,r){"use strict";var n=r(4155),i=this&&this.__assign||function(){return i=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},i.apply(this,arguments)},o=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(e,r);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,n,i)}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),l=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&o(e,t,r);return a(e,t),e},u=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function a(t){try{u(n.next(t))}catch(t){o(t)}}function l(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,l)}u((n=n.apply(t,e||[])).next())}))},s=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},_=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},c=this&&this.__spreadArray||function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))},f=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.strlen=void 0;var I=f(r(3728)),S=f(r(4586)),E=f(r(9117)),d=l(r(9168)),A=f(r(1772)),p=f(r(8294)),v=f(r(2894)),T=f(r(1869)),h=(0,f(r(2508)).default)("wasm-worker");e.strlen=function(t,e){for(var r=new Uint8Array(e.buffer),n=t;r[n];)n+=1;return n-t};var y={},m=(0,S.default)((function(t){var e,r,o,a=t.source,l=t.bindings,f=t.options,S=void 0===f?{}:f,m=t.importWebAssemblySync,g=t.importWebAssembly,W=t.readFileSync,O=t.maxMemoryMB;return u(this,void 0,void 0,(function(){function t(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];var n=D.getFunction(t);if(null==n)throw Error("error - ".concat(t," is not defined"));return n.apply(void 0,c([],_(e),!1))}function u(){if(null==D.getcwd)throw Error("error - ".concat(name," is not defined"));return D.getcwd()}function f(t){D.exports.c_free(t)}var R,w,b,N,D,F,L,G,C,P,H;return s(this,(function(s){switch(s.label){case 0:if(h("doWasmImport",a),null!=y[a])return[2,y[a]];for(P in R=(new Date).valueOf(),w=new WebAssembly.Memory(i({initial:(0,d.MBtoPages)(10)},O?{maximum:(0,d.MBtoPages)(O)}:{})),b=new WebAssembly.Table({initial:1e4,element:"anyfunc"}),null==(N={env:i(i(i({},{reportError:function(t,e){var r=w.buffer.slice(t,t+e),n=new TextDecoder;throw Error(n.decode(r))}}),S.wasmEnv),{memory:w,__indirect_function_table:b})}).env.wasmGetSignalState&&(N.env.wasmGetSignalState=function(){return 0}),null==N.env.wasmSendString&&(N.env.wasmSendString=function(t,e){D.result=D.recv.string(t,e)}),null==N.env.wasmSetException&&(N.env.wasmSetException=function(){D.resultException=!0}),null==N.env.getrandom&&(N.env.getrandom=function(t,e,r){return l.randomFillSync(new Uint8Array(w.buffer),t,e),e}),null==N.env.main&&(N.env.main=function(){return 0}),null==N.env._Py_emscripten&&(N.env._Py_emscripten_runtime=function(){return 0}),(0,A.default)(b,N.env),F=l.fs,L={preopens:{"/":"/"},bindings:l,args:n.argv,env:S.env,sleep:S.sleep,getStdin:S.getStdin,sendStdout:S.sendStdout,sendStderr:S.sendStderr},G=new I.default(L),N.wasi_snapshot_preview1=G.wasiImport,C=(0,p.default)({fs:F,send:new v.default({memory:w,callFunction:t}),recv:new T.default({memory:w,callFunction:t}),wasi:G,process:n,os:null!==(e=l.os)&&void 0!==e?e:{},posix:null!==(r=l.posix)&&void 0!==r?r:{},child_process:null!==(o=l.child_process)&&void 0!==o?o:{},memory:w,callFunction:t,getcwd:u,free:f}))null==N.env[P]&&(N.env[P]=C[P]);if(null==a)throw Error("source must be defined for now...");return[4,(0,d.default)({path:a,importWebAssemblySync:m,importWebAssembly:g,readFileSync:W,importObject:N,stub:!1})];case 1:return H=s.sent(),null!=G&&G.start(H,w),D=new E.default(H.exports,w,F,b),null==S.init?[3,3]:[4,S.init(D)];case 2:s.sent(),s.label=3;case 3:return C.init(),y[a]=D,S.time&&h.enabled&&h("imported ".concat(a," in ").concat((new Date).valueOf()-R,"ms")),D.table=b,D.wasi=G,D.posixEnv=C,[2,D]}}))}))}),{createKey:function(t){return t[0]}});e.default=m},699:function(t,e,r){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},n.apply(this,arguments)},i=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function a(t){try{u(n.next(t))}catch(t){o(t)}}function l(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,l)}u((n=n.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},a=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},l=this&&this.__spreadArray||function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=(0,u(r(2508)).default)("wasm:worker:init");e.default=function(t){var e=this,r=t.wasmImport,u=t.parent,_=t.captureOutput,c=t.IOHandler,f=void 0;u.on("message",(function(t){return i(e,void 0,void 0,(function(){var e,i,I,S,E,d;return o(this,(function(o){switch(o.label){case 0:switch(s("worker got message ",t),t.event){case"init":return[3,1];case"callWithString":return[3,5];case"call":return[3,6];case"waitUntilFsLoaded":return[3,7]}return[3,12];case 1:return o.trys.push([1,3,,4]),e=new c(t.options,(function(){u.postMessage({event:"service-worker-broken"})})),i=n(n({},t.options),{sleep:e.sleep.bind(e),getStdin:e.getStdin.bind(e),wasmEnv:{wasmGetSignalState:e.getSignalState.bind(e)}}),_&&(i.sendStdout=function(t){s("sendStdout",t),u.postMessage({event:"stdout",data:t})},i.sendStderr=function(t){s("sendStderr",t),u.postMessage({event:"stderr",data:t})}),[4,r(t.name,i)];case 2:return f=o.sent(),u.postMessage({event:"init",status:"ok"}),[3,4];case 3:return I=o.sent(),u.postMessage({event:"init",status:"error",error:I.toString()}),[3,4];case 4:return[2];case 5:if(null==f)throw Error("wasm must be initialized");try{u.postMessage({id:t.id,result:f.callWithString.apply(f,l([t.name,t.str],a(t.args),!1))})}catch(e){u.postMessage({id:t.id,error:e})}return[2];case 6:if(null==f)throw Error("wasm must be initialized");return u.postMessage({id:t.id,result:f.callWithString(t.name,"",[])}),[2];case 7:if(null==(null==f?void 0:f.fs))throw Error("wasm.fs must be initialized");o.label=8;case 8:return o.trys.push([8,10,,11]),[4,null===(d=(E=f.fs).waitUntilLoaded)||void 0===d?void 0:d.call(E)];case 9:return o.sent(),u.postMessage({id:t.id,result:{}}),[3,11];case 10:return S=o.sent(),u.postMessage({id:t.id,error:S}),[3,11];case 11:case 12:return[2]}}))}))}))}},9117:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function a(t){try{u(n.next(t))}catch(t){o(t)}}function l(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,l)}u((n=n.apply(t,e||[])).next())}))},a=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},l=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},u=this&&this.__spreadArray||function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))},s=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},_=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var c=r(7187),f=_(r(2894)),I=_(r(1869)),S=new TextEncoder,E=8192,d=function(t){function e(e,r,n,i){var o=t.call(this)||this;o.result=void 0,o.resultException=!1,o._getFunctionCache={},o.exports=e,o.memory=r,o.table=i,o.fs=n;var a={memory:o.memory,callFunction:function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];var n=o.getFunction(t);if(null==n)throw Error("error - ".concat(t," is not defined"));return n.apply(void 0,u([],l(e),!1))}};return o.send=new f.default(a),o.recv=new I.default(a),o}return i(e,t),e.prototype.terminal=function(t){return void 0===t&&(t=["command"]),o(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,this.callWithString("terminal",t)];case 1:return[2,e.sent()]}}))}))},e.prototype.writeToStdin=function(t){throw Error("not implemented")},e.prototype.callWithString=function(t,e){for(var r,n,i,o,a,_,c,f,I=[],d=2;d<arguments.length;d++)I[d-2]=arguments[d];this.result=void 0,this.resultException=!1;var A,p=this.getFunction(t);if(null==p)throw Error('no function "'.concat(t,'" defined in wasm module'));if("string"==typeof e){var v=S.encode(e);if(v.length<E)return A=this.callWithSmallString(p,v),null!==(c=this.result)&&void 0!==c?c:A;var T=this.send.encodedString(v);try{A=p.apply(void 0,u([T],l(I),!1))}finally{this.exports.c_free(T)}}else{var h=[];try{for(var y=s(e),m=y.next();!m.done;m=y.next()){var g=m.value;h.push(this.send.string(g))}}catch(t){r={error:t}}finally{try{m&&!m.done&&(n=y.return)&&n.call(y)}finally{if(r)throw r.error}}var W=h.length,O=(T=this.exports.c_malloc(4*W),new Int32Array(this.memory.buffer,T,W)),R=0;try{for(var w=s(h),b=w.next();!b.done;b=w.next()){var N=b.value;O[R]=N,R+=1}}catch(t){i={error:t}}finally{try{b&&!b.done&&(o=w.return)&&o.call(w)}finally{if(i)throw i.error}}try{A=p.apply(void 0,u([W,T],l(I),!1))}finally{this.exports.c_free(T);try{for(var D=s(h),F=D.next();!F.done;F=D.next())N=F.value,this.exports.c_free(N)}catch(t){a={error:t}}finally{try{F&&!F.done&&(_=D.return)&&_.call(D)}finally{if(a)throw a.error}}}}if(this.resultException)throw Error("RuntimeError");return null!==(f=this.result)&&void 0!==f?f:A},e.prototype.getSmallStringPtr=function(){if(null==this.smallStringPtr&&(this.smallStringPtr=this.exports.c_malloc(E),!this.smallStringPtr))throw Error("MemoryError -- out of memory allocating small string buffer");return this.smallStringPtr},e.prototype.callWithSmallString=function(t,e){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];var i=this.getSmallStringPtr(),o=e.length+1,a=new Int8Array(this.memory.buffer,i,o);return a.set(e),a[o-1]=0,t.apply(void 0,u([i],l(r),!1))},e.prototype.getFunction=function(t){var e=this._getFunctionCache[t];if(null!=e)return e;if(null!=this.table){var r=this.exports["__WASM_EXPORT__".concat(t)];if(null!=r){var n=this.table.get(r());if(null!=n)return this._getFunctionCache[t]=n,n}}return this.exports[t]},e.prototype.getcwd=function(){var t=this.getFunction("getcwd");if(null==t)throw Error("C library function getcwd must be exported");return this.recv.string(t(this.getSmallStringPtr(),E))},e.prototype.waitUntilFsLoaded=function(){var t,e;return o(this,void 0,void 0,(function(){return a(this,(function(r){switch(r.label){case 0:if(null==this.fs)throw Error("fs must be defined");return[4,null===(e=(t=this.fs).waitUntilLoaded)||void 0===e?void 0:e.call(t)];case 1:return[2,r.sent()]}}))}))},e.prototype.signal=function(t){throw Error("not implemented")},e}(c.EventEmitter);e.default=d},8812:function(t,e,r){"use strict";var n=r(8764).Buffer,i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=(0,i(r(2508)).default)("wasm:worker:io-using-atomics"),a=function(){function t(t){if(o("creating ioHandler"),null==t.stdinLengthBuffer)throw Error("must define stdinLengthBuffer");if(null==t.stdinBuffer)throw Error("must define stdinBuffer");if(null==t.signalBuffer)throw Error("must define signalBuffer");this.stdinBuffer=n.from(t.stdinBuffer),this.stdinLength=new Int32Array(t.stdinLengthBuffer),this.signalState=new Int32Array(t.signalBuffer),this.sleepArray=new Int32Array(new SharedArrayBuffer(4))}return t.prototype.sleep=function(t){for(o("sleep starting, milliseconds=",t);t>0;){var e=Math.min(t,500);if(Atomics.wait(this.sleepArray,0,0,e),t-=e,Atomics.load(this.signalState,0))return}},t.prototype.getStdin=function(){for(;0==this.stdinLength[0];)if(o("getStdin: waiting for some new stdin"),Atomics.wait(this.stdinLength,0,0,1e3),Atomics.load(this.signalState,0))return n.from("");var t=this.stdinLength[0];o("getStdin: have stdin, processing ",t," bytes");var e=n.alloc(t);return this.stdinBuffer.copy(e,0,0,t),Atomics.store(this.stdinLength,0,0),Atomics.notify(this.stdinLength,0),e},t.prototype.getSignalState=function(){var t=Atomics.load(this.signalState,0);return t?(o("signalState",this.signalState[0]),Atomics.store(this.signalState,0,0),t):0},t}();e.default=a},1235:function(t,e,r){"use strict";var n=r(8764).Buffer,i=r(5108),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=(0,o(r(2508)).default)("wasm:worker:io-using-atomics"),l=function(){function t(t,e){if(this.lastSignalCheck=0,a(t),this.id=t.id,this.serviceWorkerBroken=e,null==this.id)throw Error("".concat(this.id," must be a v4 uuid"))}return t.prototype.request=function(t,e){void 0===e&&(e={});var r=new XMLHttpRequest;r.open("POST","/python-wasm-sw/".concat(t),!1),r.setRequestHeader("cache-control","no-cache, no-store, max-age=0");try{r.send(JSON.stringify(e))}catch(t){this.serviceWorkerBroken(),u(t)}return 200!=r.status&&304!=r.status&&(this.serviceWorkerBroken(),u("invalid status=".concat(r.status))),r},t.prototype.sleep=function(t){a("sleep ",t);for(var e=(new Date).valueOf();(new Date).valueOf()-e<=t;){try{this.request("sleep",{ms:Math.min(t,500)})}catch(t){return void a("sleep error",t)}if(this.getSignal(!1))return}},t.prototype.getStdin=function(){var t,e=this.request("read-stdin",{id:this.id,ms:3e3});return 200==e.status?n.from(null!==(t=e.responseText)&&void 0!==t?t:""):n.from("")},t.prototype.getSignal=function(t){var e,r=this.request("read-signal",{clear:t,id:this.id});return null!==(e=parseInt(r.responseText))&&void 0!==e?e:0},t.prototype.getSignalState=function(){var t=(new Date).valueOf();return t-this.lastSignalCheck<500?0:(this.lastSignalCheck=t,this.getSignal(!0))},t}();function u(t,e){void 0===e&&(e=3e3),i.warn("service worker not working, so burning CPU to avoid DOS'ing the server -- ",t);for(var r=(new Date).valueOf();(new Date).valueOf()-r<=e;);}e.default=l},115:(t,e,r)=>{"use strict";var n=r(4155);Object.defineProperty(e,"__esModule",{value:!0});var i={getpid:function(){return n.pid},getppid:function(){var t,e;return null!==(e=null===(t=i.getpid)||void 0===t?void 0:t.call(i))&&void 0!==e?e:1}};e.default=i},1869:function(t,e){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.RecvFromWasmAbstractBase=void 0;var i=new TextDecoder,o=function(){function t(){}return t.prototype.view=function(){return new DataView(this.memory.buffer)},t.prototype.strlen=function(t){for(var e=new Uint8Array(this.memory.buffer),r=t;e[r];)r+=1;return r-t},t.prototype.pointer=function(t){return this.view().getUint32(t,!0)},t.prototype.u32=function(t){return this.view().getUint32(t,!0)},t.prototype.i32=function(t){return this.view().getInt32(t,!0)},t.prototype.pointer2=function(t){return new Uint32Array(this.memory.buffer)[t]},t.prototype.string=function(t,e){if(null==e&&null==(e=this.strlen(t)))throw Error("bug");var r=this.memory.buffer.slice(t,t+e);return i.decode(r)},t.prototype.arrayOfStrings=function(t){for(var e=[];;){var r=this.pointer(t);if(!r)break;e.push(this.string(r)),t+=4}return e},t.prototype.arrayOfI32=function(t){var e=[];if(0==t)return e;for(;;){var r=this.pointer(t);if(!r)break;e.push(this.i32(r)),t+=4}return e},t}();e.RecvFromWasmAbstractBase=o;var a=function(t){function e(e){var r=e.memory,n=e.callFunction,i=t.call(this)||this;return i.memory=r,i.callFunction=n,i}return n(e,t),e}(o);e.default=a},2894:function(t,e){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.SendToWasmAbstractBase=void 0;var i=new TextEncoder,o=function(){function t(){}return t.prototype.malloc=function(t){var e=this.callFunction("c_malloc",t);if(!e)throw Error("Out of Memory");return e},t.prototype.view=function(){return new DataView(this.memory.buffer)},t.prototype.pointer=function(t,e){this.view().setUint32(t,e,!0)},t.prototype.i32=function(t,e){this.view().setInt32(t,e,!0)},t.prototype.f64=function(t,e){this.view().setFloat64(t,e,!0)},t.prototype.f32=function(t,e){this.view().setFloat32(t,e,!0)},t.prototype.u32=function(t,e){this.view().setUint32(t,e,!0)},t.prototype.string=function(t,e){return this.encodedString(i.encode(t),e)},t.prototype.encodedString=function(t,e){var r;null!=e&&(t=t.slice(0,e.len-1));var n=t.length+1,i=null!==(r=null==e?void 0:e.ptr)&&void 0!==r?r:this.malloc(n),o=new Int8Array(this.memory.buffer,i,n);return o.set(t),o[n-1]=0,i},t.prototype.arrayOfStrings=function(t){for(var e=this.malloc(4*(t.length+1)),r=0;r<t.length;r++){var n=this.string(t[r]);this.pointer(e+4*r,n)}return this.pointer(e+4*t.length,0),e},t.prototype.buffer=function(t){var e=this.malloc(t.byteLength),r=new Uint8Array(this.memory.buffer);return t.copy(r,e),e},t}();e.SendToWasmAbstractBase=o;var a=function(t){function e(e){var r=e.memory,n=e.callFunction,i=t.call(this)||this;return i.memory=r,i.callFunction=n,i}return n(e,t),e}(o);e.default=a},1772:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=(0,n(r(2508)).default)("python-wasm-trampoline");e.default=function(t,e){e._PyImport_InitFunc_TrampolineCall=function(e){var r=t.get(e)();return i("_PyImport_InitFunc_TrampolineCall - ptr=",e," r=",r),r},e._PyCFunctionWithKeywords_TrampolineCall=function(e,r,n,i){return t.get(e)(r,n,i)},e.descr_set_trampoline_call=function(e,r,n,i){return t.get(e)(r,n,i)},e.descr_get_trampoline_call=function(e,r,n){return t.get(e)(r,n)}}},9696:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){!function(){if("performance"in self||(self.performance={}),Date.now=Date.now||function(){return(new Date).getTime()},"now"in self.performance==0){var t=Date.now();performance.timing&&performance.timing.navigationStart&&(t=performance.timing.navigationStart),self.performance.now=function(){return Date.now()-t}}}();var e=Math.floor(.001*(Date.now()-performance.now())),r=.001*performance.now(),n=Math.floor(r)+e,i=Math.floor(r%1*1e9);return t&&(n-=t[0],(i-=t[1])<0&&(n--,i+=1e9)),[n,i]};r.bigint=function(t){var e=r(t);return 1e9*e[0]+e[1]},e.default=r},5516:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(1632),o=n(r(9639)),a=n(r(9696)),l=r(2327),u={hrtime:a.default.bigint,exit:function(t){throw new l.WASIExitError(t)},kill:function(t){throw new l.WASIKillError(t)},randomFillSync:i.randomFillSync,isTTY:function(){return!0},path:o.default,fs:null};e.default=u},3622:(t,e)=>{"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),e.WASI_ENOMSG=e.WASI_ENOMEM=e.WASI_ENOLINK=e.WASI_ENOLCK=e.WASI_ENOEXEC=e.WASI_ENOENT=e.WASI_ENODEV=e.WASI_ENOBUFS=e.WASI_ENFILE=e.WASI_ENETUNREACH=e.WASI_ENETRESET=e.WASI_ENETDOWN=e.WASI_ENAMETOOLONG=e.WASI_EMULTIHOP=e.WASI_EMSGSIZE=e.WASI_EMLINK=e.WASI_EMFILE=e.WASI_ELOOP=e.WASI_EISDIR=e.WASI_EISCONN=e.WASI_EIO=e.WASI_EINVAL=e.WASI_EINTR=e.WASI_EINPROGRESS=e.WASI_EILSEQ=e.WASI_EIDRM=e.WASI_EHOSTUNREACH=e.WASI_EFBIG=e.WASI_EFAULT=e.WASI_EEXIST=e.WASI_EDQUOT=e.WASI_EDOM=e.WASI_EDESTADDRREQ=e.WASI_EDEADLK=e.WASI_ECONNRESET=e.WASI_ECONNREFUSED=e.WASI_ECONNABORTED=e.WASI_ECHILD=e.WASI_ECANCELED=e.WASI_EBUSY=e.WASI_EBADMSG=e.WASI_EBADF=e.WASI_EALREADY=e.WASI_EAGAIN=e.WASI_EAFNOSUPPORT=e.WASI_EADDRNOTAVAIL=e.WASI_EADDRINUSE=e.WASI_EACCES=e.WASI_E2BIG=e.WASI_ESUCCESS=void 0,e.WASI_SIGVTALRM=e.WASI_SIGUSR2=e.WASI_SIGUSR1=e.WASI_SIGURG=e.WASI_SIGTTOU=e.WASI_SIGTTIN=e.WASI_SIGTSTP=e.WASI_SIGTRAP=e.WASI_SIGTERM=e.WASI_SIGSTOP=e.WASI_SIGSEGV=e.WASI_SIGQUIT=e.WASI_SIGPIPE=e.WASI_SIGKILL=e.WASI_SIGINT=e.WASI_SIGILL=e.WASI_SIGHUP=e.WASI_SIGFPE=e.WASI_SIGCONT=e.WASI_SIGCHLD=e.WASI_SIGBUS=e.WASI_SIGALRM=e.WASI_SIGABRT=e.WASI_ENOTCAPABLE=e.WASI_EXDEV=e.WASI_ETXTBSY=e.WASI_ETIMEDOUT=e.WASI_ESTALE=e.WASI_ESRCH=e.WASI_ESPIPE=e.WASI_EROFS=e.WASI_ERANGE=e.WASI_EPROTOTYPE=e.WASI_EPROTONOSUPPORT=e.WASI_EPROTO=e.WASI_EPIPE=e.WASI_EPERM=e.WASI_EOWNERDEAD=e.WASI_EOVERFLOW=e.WASI_ENXIO=e.WASI_ENOTTY=e.WASI_ENOTSUP=e.WASI_ENOTSOCK=e.WASI_ENOTRECOVERABLE=e.WASI_ENOTEMPTY=e.WASI_ENOTDIR=e.WASI_ENOTCONN=e.WASI_ENOSYS=e.WASI_ENOSPC=e.WASI_ENOPROTOOPT=void 0,e.RIGHTS_REGULAR_FILE_BASE=e.RIGHTS_CHARACTER_DEVICE_INHERITING=e.RIGHTS_CHARACTER_DEVICE_BASE=e.RIGHTS_BLOCK_DEVICE_INHERITING=e.RIGHTS_BLOCK_DEVICE_BASE=e.RIGHTS_ALL=e.WASI_RIGHT_SOCK_SHUTDOWN=e.WASI_RIGHT_POLL_FD_READWRITE=e.WASI_RIGHT_PATH_UNLINK_FILE=e.WASI_RIGHT_PATH_REMOVE_DIRECTORY=e.WASI_RIGHT_PATH_SYMLINK=e.WASI_RIGHT_FD_FILESTAT_SET_TIMES=e.WASI_RIGHT_FD_FILESTAT_SET_SIZE=e.WASI_RIGHT_FD_FILESTAT_GET=e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES=e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE=e.WASI_RIGHT_PATH_FILESTAT_GET=e.WASI_RIGHT_PATH_RENAME_TARGET=e.WASI_RIGHT_PATH_RENAME_SOURCE=e.WASI_RIGHT_PATH_READLINK=e.WASI_RIGHT_FD_READDIR=e.WASI_RIGHT_PATH_OPEN=e.WASI_RIGHT_PATH_LINK_TARGET=e.WASI_RIGHT_PATH_LINK_SOURCE=e.WASI_RIGHT_PATH_CREATE_FILE=e.WASI_RIGHT_PATH_CREATE_DIRECTORY=e.WASI_RIGHT_FD_ALLOCATE=e.WASI_RIGHT_FD_ADVISE=e.WASI_RIGHT_FD_WRITE=e.WASI_RIGHT_FD_TELL=e.WASI_RIGHT_FD_SYNC=e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS=e.WASI_RIGHT_FD_SEEK=e.WASI_RIGHT_FD_READ=e.WASI_RIGHT_FD_DATASYNC=e.WASI_FDFLAG_SYNC=e.WASI_FDFLAG_RSYNC=e.WASI_FDFLAG_NONBLOCK=e.WASI_FDFLAG_DSYNC=e.WASI_FDFLAG_APPEND=e.WASI_FILETYPE_SYMBOLIC_LINK=e.WASI_FILETYPE_SOCKET_STREAM=e.WASI_FILETYPE_SOCKET_DGRAM=e.WASI_FILETYPE_REGULAR_FILE=e.WASI_FILETYPE_DIRECTORY=e.WASI_FILETYPE_CHARACTER_DEVICE=e.WASI_FILETYPE_BLOCK_DEVICE=e.WASI_FILETYPE_UNKNOWN=e.WASI_SIGXFSZ=e.WASI_SIGXCPU=void 0,e.SIGNAL_MAP=e.ERROR_MAP=e.WASI_WHENCE_END=e.WASI_WHENCE_CUR=e.WASI_WHENCE_SET=e.WASI_STDERR_FILENO=e.WASI_STDOUT_FILENO=e.WASI_STDIN_FILENO=e.WASI_DIRCOOKIE_START=e.WASI_PREOPENTYPE_DIR=e.WASI_O_TRUNC=e.WASI_O_EXCL=e.WASI_O_DIRECTORY=e.WASI_O_CREAT=e.WASI_FILESTAT_SET_MTIM_NOW=e.WASI_FILESTAT_SET_MTIM=e.WASI_FILESTAT_SET_ATIM_NOW=e.WASI_FILESTAT_SET_ATIM=e.WASI_EVENTTYPE_FD_WRITE=e.WASI_EVENTTYPE_FD_READ=e.WASI_EVENTTYPE_CLOCK=e.WASI_CLOCK_THREAD_CPUTIME_ID=e.WASI_CLOCK_PROCESS_CPUTIME_ID=e.WASI_CLOCK_MONOTONIC=e.WASI_CLOCK_REALTIME=e.RIGHTS_TTY_INHERITING=e.RIGHTS_TTY_BASE=e.RIGHTS_SOCKET_INHERITING=e.RIGHTS_SOCKET_BASE=e.RIGHTS_DIRECTORY_INHERITING=e.RIGHTS_DIRECTORY_BASE=e.RIGHTS_REGULAR_FILE_INHERITING=void 0,e.WASI_ESUCCESS=0,e.WASI_E2BIG=1,e.WASI_EACCES=2,e.WASI_EADDRINUSE=3,e.WASI_EADDRNOTAVAIL=4,e.WASI_EAFNOSUPPORT=5,e.WASI_EAGAIN=6,e.WASI_EALREADY=7,e.WASI_EBADF=8,e.WASI_EBADMSG=9,e.WASI_EBUSY=10,e.WASI_ECANCELED=11,e.WASI_ECHILD=12,e.WASI_ECONNABORTED=13,e.WASI_ECONNREFUSED=14,e.WASI_ECONNRESET=15,e.WASI_EDEADLK=16,e.WASI_EDESTADDRREQ=17,e.WASI_EDOM=18,e.WASI_EDQUOT=19,e.WASI_EEXIST=20,e.WASI_EFAULT=21,e.WASI_EFBIG=22,e.WASI_EHOSTUNREACH=23,e.WASI_EIDRM=24,e.WASI_EILSEQ=25,e.WASI_EINPROGRESS=26,e.WASI_EINTR=27,e.WASI_EINVAL=28,e.WASI_EIO=29,e.WASI_EISCONN=30,e.WASI_EISDIR=31,e.WASI_ELOOP=32,e.WASI_EMFILE=33,e.WASI_EMLINK=34,e.WASI_EMSGSIZE=35,e.WASI_EMULTIHOP=36,e.WASI_ENAMETOOLONG=37,e.WASI_ENETDOWN=38,e.WASI_ENETRESET=39,e.WASI_ENETUNREACH=40,e.WASI_ENFILE=41,e.WASI_ENOBUFS=42,e.WASI_ENODEV=43,e.WASI_ENOENT=44,e.WASI_ENOEXEC=45,e.WASI_ENOLCK=46,e.WASI_ENOLINK=47,e.WASI_ENOMEM=48,e.WASI_ENOMSG=49,e.WASI_ENOPROTOOPT=50,e.WASI_ENOSPC=51,e.WASI_ENOSYS=52,e.WASI_ENOTCONN=53,e.WASI_ENOTDIR=54,e.WASI_ENOTEMPTY=55,e.WASI_ENOTRECOVERABLE=56,e.WASI_ENOTSOCK=57,e.WASI_ENOTSUP=58,e.WASI_ENOTTY=59,e.WASI_ENXIO=60,e.WASI_EOVERFLOW=61,e.WASI_EOWNERDEAD=62,e.WASI_EPERM=63,e.WASI_EPIPE=64,e.WASI_EPROTO=65,e.WASI_EPROTONOSUPPORT=66,e.WASI_EPROTOTYPE=67,e.WASI_ERANGE=68,e.WASI_EROFS=69,e.WASI_ESPIPE=70,e.WASI_ESRCH=71,e.WASI_ESTALE=72,e.WASI_ETIMEDOUT=73,e.WASI_ETXTBSY=74,e.WASI_EXDEV=75,e.WASI_ENOTCAPABLE=76,e.WASI_SIGABRT=0,e.WASI_SIGALRM=1,e.WASI_SIGBUS=2,e.WASI_SIGCHLD=3,e.WASI_SIGCONT=4,e.WASI_SIGFPE=5,e.WASI_SIGHUP=6,e.WASI_SIGILL=7,e.WASI_SIGINT=8,e.WASI_SIGKILL=9,e.WASI_SIGPIPE=10,e.WASI_SIGQUIT=11,e.WASI_SIGSEGV=12,e.WASI_SIGSTOP=13,e.WASI_SIGTERM=14,e.WASI_SIGTRAP=15,e.WASI_SIGTSTP=16,e.WASI_SIGTTIN=17,e.WASI_SIGTTOU=18,e.WASI_SIGURG=19,e.WASI_SIGUSR1=20,e.WASI_SIGUSR2=21,e.WASI_SIGVTALRM=22,e.WASI_SIGXCPU=23,e.WASI_SIGXFSZ=24,e.WASI_FILETYPE_UNKNOWN=0,e.WASI_FILETYPE_BLOCK_DEVICE=1,e.WASI_FILETYPE_CHARACTER_DEVICE=2,e.WASI_FILETYPE_DIRECTORY=3,e.WASI_FILETYPE_REGULAR_FILE=4,e.WASI_FILETYPE_SOCKET_DGRAM=5,e.WASI_FILETYPE_SOCKET_STREAM=6,e.WASI_FILETYPE_SYMBOLIC_LINK=7,e.WASI_FDFLAG_APPEND=1,e.WASI_FDFLAG_DSYNC=2,e.WASI_FDFLAG_NONBLOCK=4,e.WASI_FDFLAG_RSYNC=8,e.WASI_FDFLAG_SYNC=16,e.WASI_RIGHT_FD_DATASYNC=BigInt(1),e.WASI_RIGHT_FD_READ=BigInt(2),e.WASI_RIGHT_FD_SEEK=BigInt(4),e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS=BigInt(8),e.WASI_RIGHT_FD_SYNC=BigInt(16),e.WASI_RIGHT_FD_TELL=BigInt(32),e.WASI_RIGHT_FD_WRITE=BigInt(64),e.WASI_RIGHT_FD_ADVISE=BigInt(128),e.WASI_RIGHT_FD_ALLOCATE=BigInt(256),e.WASI_RIGHT_PATH_CREATE_DIRECTORY=BigInt(512),e.WASI_RIGHT_PATH_CREATE_FILE=BigInt(1024),e.WASI_RIGHT_PATH_LINK_SOURCE=BigInt(2048),e.WASI_RIGHT_PATH_LINK_TARGET=BigInt(4096),e.WASI_RIGHT_PATH_OPEN=BigInt(8192),e.WASI_RIGHT_FD_READDIR=BigInt(16384),e.WASI_RIGHT_PATH_READLINK=BigInt(32768),e.WASI_RIGHT_PATH_RENAME_SOURCE=BigInt(65536),e.WASI_RIGHT_PATH_RENAME_TARGET=BigInt(131072),e.WASI_RIGHT_PATH_FILESTAT_GET=BigInt(262144),e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE=BigInt(524288),e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES=BigInt(1048576),e.WASI_RIGHT_FD_FILESTAT_GET=BigInt(2097152),e.WASI_RIGHT_FD_FILESTAT_SET_SIZE=BigInt(4194304),e.WASI_RIGHT_FD_FILESTAT_SET_TIMES=BigInt(8388608),e.WASI_RIGHT_PATH_SYMLINK=BigInt(16777216),e.WASI_RIGHT_PATH_REMOVE_DIRECTORY=BigInt(33554432),e.WASI_RIGHT_PATH_UNLINK_FILE=BigInt(67108864),e.WASI_RIGHT_POLL_FD_READWRITE=BigInt(134217728),e.WASI_RIGHT_SOCK_SHUTDOWN=BigInt(268435456),e.RIGHTS_ALL=e.WASI_RIGHT_FD_DATASYNC|e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_SEEK|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_SYNC|e.WASI_RIGHT_FD_TELL|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_ADVISE|e.WASI_RIGHT_FD_ALLOCATE|e.WASI_RIGHT_PATH_CREATE_DIRECTORY|e.WASI_RIGHT_PATH_CREATE_FILE|e.WASI_RIGHT_PATH_LINK_SOURCE|e.WASI_RIGHT_PATH_LINK_TARGET|e.WASI_RIGHT_PATH_OPEN|e.WASI_RIGHT_FD_READDIR|e.WASI_RIGHT_PATH_READLINK|e.WASI_RIGHT_PATH_RENAME_SOURCE|e.WASI_RIGHT_PATH_RENAME_TARGET|e.WASI_RIGHT_PATH_FILESTAT_GET|e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE|e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_FD_FILESTAT_SET_TIMES|e.WASI_RIGHT_FD_FILESTAT_SET_SIZE|e.WASI_RIGHT_PATH_SYMLINK|e.WASI_RIGHT_PATH_UNLINK_FILE|e.WASI_RIGHT_PATH_REMOVE_DIRECTORY|e.WASI_RIGHT_POLL_FD_READWRITE|e.WASI_RIGHT_SOCK_SHUTDOWN,e.RIGHTS_BLOCK_DEVICE_BASE=e.RIGHTS_ALL,e.RIGHTS_BLOCK_DEVICE_INHERITING=e.RIGHTS_ALL,e.RIGHTS_CHARACTER_DEVICE_BASE=e.RIGHTS_ALL,e.RIGHTS_CHARACTER_DEVICE_INHERITING=e.RIGHTS_ALL,e.RIGHTS_REGULAR_FILE_BASE=e.WASI_RIGHT_FD_DATASYNC|e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_SEEK|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_SYNC|e.WASI_RIGHT_FD_TELL|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_ADVISE|e.WASI_RIGHT_FD_ALLOCATE|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_FD_FILESTAT_SET_SIZE|e.WASI_RIGHT_FD_FILESTAT_SET_TIMES|e.WASI_RIGHT_POLL_FD_READWRITE,e.RIGHTS_REGULAR_FILE_INHERITING=BigInt(0),e.RIGHTS_DIRECTORY_BASE=e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_SYNC|e.WASI_RIGHT_FD_ADVISE|e.WASI_RIGHT_PATH_CREATE_DIRECTORY|e.WASI_RIGHT_PATH_CREATE_FILE|e.WASI_RIGHT_PATH_LINK_SOURCE|e.WASI_RIGHT_PATH_LINK_TARGET|e.WASI_RIGHT_PATH_OPEN|e.WASI_RIGHT_FD_READDIR|e.WASI_RIGHT_PATH_READLINK|e.WASI_RIGHT_PATH_RENAME_SOURCE|e.WASI_RIGHT_PATH_RENAME_TARGET|e.WASI_RIGHT_PATH_FILESTAT_GET|e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE|e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_FD_FILESTAT_SET_TIMES|e.WASI_RIGHT_PATH_SYMLINK|e.WASI_RIGHT_PATH_UNLINK_FILE|e.WASI_RIGHT_PATH_REMOVE_DIRECTORY|e.WASI_RIGHT_POLL_FD_READWRITE,e.RIGHTS_DIRECTORY_INHERITING=e.RIGHTS_DIRECTORY_BASE|e.RIGHTS_REGULAR_FILE_BASE,e.RIGHTS_SOCKET_BASE=e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_POLL_FD_READWRITE|e.WASI_RIGHT_SOCK_SHUTDOWN,e.RIGHTS_SOCKET_INHERITING=e.RIGHTS_ALL,e.RIGHTS_TTY_BASE=e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_POLL_FD_READWRITE,e.RIGHTS_TTY_INHERITING=BigInt(0),e.WASI_CLOCK_REALTIME=0,e.WASI_CLOCK_MONOTONIC=1,e.WASI_CLOCK_PROCESS_CPUTIME_ID=2,e.WASI_CLOCK_THREAD_CPUTIME_ID=3,e.WASI_EVENTTYPE_CLOCK=0,e.WASI_EVENTTYPE_FD_READ=1,e.WASI_EVENTTYPE_FD_WRITE=2,e.WASI_FILESTAT_SET_ATIM=1,e.WASI_FILESTAT_SET_ATIM_NOW=2,e.WASI_FILESTAT_SET_MTIM=4,e.WASI_FILESTAT_SET_MTIM_NOW=8,e.WASI_O_CREAT=1,e.WASI_O_DIRECTORY=2,e.WASI_O_EXCL=4,e.WASI_O_TRUNC=8,e.WASI_PREOPENTYPE_DIR=0,e.WASI_DIRCOOKIE_START=0,e.WASI_STDIN_FILENO=0,e.WASI_STDOUT_FILENO=1,e.WASI_STDERR_FILENO=2,e.WASI_WHENCE_SET=0,e.WASI_WHENCE_CUR=1,e.WASI_WHENCE_END=2,e.ERROR_MAP={E2BIG:e.WASI_E2BIG,EACCES:e.WASI_EACCES,EADDRINUSE:e.WASI_EADDRINUSE,EADDRNOTAVAIL:e.WASI_EADDRNOTAVAIL,EAFNOSUPPORT:e.WASI_EAFNOSUPPORT,EALREADY:e.WASI_EALREADY,EAGAIN:e.WASI_EAGAIN,EBADF:e.WASI_EBADF,EBADMSG:e.WASI_EBADMSG,EBUSY:e.WASI_EBUSY,ECANCELED:e.WASI_ECANCELED,ECHILD:e.WASI_ECHILD,ECONNABORTED:e.WASI_ECONNABORTED,ECONNREFUSED:e.WASI_ECONNREFUSED,ECONNRESET:e.WASI_ECONNRESET,EDEADLOCK:e.WASI_EDEADLK,EDESTADDRREQ:e.WASI_EDESTADDRREQ,EDOM:e.WASI_EDOM,EDQUOT:e.WASI_EDQUOT,EEXIST:e.WASI_EEXIST,EFAULT:e.WASI_EFAULT,EFBIG:e.WASI_EFBIG,EHOSTDOWN:e.WASI_EHOSTUNREACH,EHOSTUNREACH:e.WASI_EHOSTUNREACH,EIDRM:e.WASI_EIDRM,EILSEQ:e.WASI_EILSEQ,EINPROGRESS:e.WASI_EINPROGRESS,EINTR:e.WASI_EINTR,EINVAL:e.WASI_EINVAL,EIO:e.WASI_EIO,EISCONN:e.WASI_EISCONN,EISDIR:e.WASI_EISDIR,ELOOP:e.WASI_ELOOP,EMFILE:e.WASI_EMFILE,EMLINK:e.WASI_EMLINK,EMSGSIZE:e.WASI_EMSGSIZE,EMULTIHOP:e.WASI_EMULTIHOP,ENAMETOOLONG:e.WASI_ENAMETOOLONG,ENETDOWN:e.WASI_ENETDOWN,ENETRESET:e.WASI_ENETRESET,ENETUNREACH:e.WASI_ENETUNREACH,ENFILE:e.WASI_ENFILE,ENOBUFS:e.WASI_ENOBUFS,ENODEV:e.WASI_ENODEV,ENOENT:e.WASI_ENOENT,ENOEXEC:e.WASI_ENOEXEC,ENOLCK:e.WASI_ENOLCK,ENOLINK:e.WASI_ENOLINK,ENOMEM:e.WASI_ENOMEM,ENOMSG:e.WASI_ENOMSG,ENOPROTOOPT:e.WASI_ENOPROTOOPT,ENOSPC:e.WASI_ENOSPC,ENOSYS:e.WASI_ENOSYS,ENOTCONN:e.WASI_ENOTCONN,ENOTDIR:e.WASI_ENOTDIR,ENOTEMPTY:e.WASI_ENOTEMPTY,ENOTRECOVERABLE:e.WASI_ENOTRECOVERABLE,ENOTSOCK:e.WASI_ENOTSOCK,ENOTTY:e.WASI_ENOTTY,ENXIO:e.WASI_ENXIO,EOVERFLOW:e.WASI_EOVERFLOW,EOWNERDEAD:e.WASI_EOWNERDEAD,EPERM:e.WASI_EPERM,EPIPE:e.WASI_EPIPE,EPROTO:e.WASI_EPROTO,EPROTONOSUPPORT:e.WASI_EPROTONOSUPPORT,EPROTOTYPE:e.WASI_EPROTOTYPE,ERANGE:e.WASI_ERANGE,EROFS:e.WASI_EROFS,ESPIPE:e.WASI_ESPIPE,ESRCH:e.WASI_ESRCH,ESTALE:e.WASI_ESTALE,ETIMEDOUT:e.WASI_ETIMEDOUT,ETXTBSY:e.WASI_ETXTBSY,EXDEV:e.WASI_EXDEV},e.SIGNAL_MAP=((r={})[e.WASI_SIGHUP]="SIGHUP",r[e.WASI_SIGINT]="SIGINT",r[e.WASI_SIGQUIT]="SIGQUIT",r[e.WASI_SIGILL]="SIGILL",r[e.WASI_SIGTRAP]="SIGTRAP",r[e.WASI_SIGABRT]="SIGABRT",r[e.WASI_SIGBUS]="SIGBUS",r[e.WASI_SIGFPE]="SIGFPE",r[e.WASI_SIGKILL]="SIGKILL",r[e.WASI_SIGUSR1]="SIGUSR1",r[e.WASI_SIGSEGV]="SIGSEGV",r[e.WASI_SIGUSR2]="SIGUSR2",r[e.WASI_SIGPIPE]="SIGPIPE",r[e.WASI_SIGALRM]="SIGALRM",r[e.WASI_SIGTERM]="SIGTERM",r[e.WASI_SIGCHLD]="SIGCHLD",r[e.WASI_SIGCONT]="SIGCONT",r[e.WASI_SIGSTOP]="SIGSTOP",r[e.WASI_SIGTSTP]="SIGTSTP",r[e.WASI_SIGTTIN]="SIGTTIN",r[e.WASI_SIGTTOU]="SIGTTOU",r[e.WASI_SIGURG]="SIGURG",r[e.WASI_SIGXCPU]="SIGXCPU",r[e.WASI_SIGXFSZ]="SIGXFSZ",r[e.WASI_SIGVTALRM]="SIGVTALRM",r)},214:function(t,e,r){"use strict";var n=r(5108),i=this&&this.__assign||function(){return i=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},i.apply(this,arguments)},o=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function a(t){try{u(n.next(t))}catch(t){o(t)}}function l(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,l)}u((n=n.apply(t,e||[])).next())}))},a=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},l=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.createFileSystem=void 0;var s=u(r(6665)),_=r(9827),c=r(2839);function f(t,e){if("zip"==t.type)return function(t,e){void 0===e&&(e="/");var r=(0,_.createFsFromVolume)(new _.Volume);return(0,s.default)({data:t,fs:r,directory:e}),r}(t.data,t.mountpoint);if("zip-async"==t.type)return function(t,e){void 0===e&&(e="/");var r=(0,_.createFsFromVolume)(new _.Volume),i=o(this,void 0,void 0,(function(){var i,o;return a(this,(function(a){switch(a.label){case 0:return a.trys.push([0,2,,3]),[4,t()];case 1:return i=a.sent(),[3,3];case 2:throw o=a.sent(),n.warn("FAILED to load async filesystem for '".concat(e,"' - ").concat(o)),o;case 3:return(0,s.default)({data:i,fs:r,directory:e}),[2]}}))}));return r.waitUntilLoaded=function(){return i},r}(t.getData,t.mountpoint);if("zipfile"==t.type)throw Error("you must convert zipfile -- read ".concat(t.zipfile," into memory"));if("zipurl"==t.type)throw Error("you must convert zipurl -- read ".concat(t.zipurl," into memory"));if("native"==t.type)return null==e?e:function(t){var e=this;function r(e){var r=0;for(var n in _.fs.constants)n.startsWith("O_")&&e&_.fs.constants[n]&&(r|=t.constants[n]);return r}var n=i(i({},t.promises),{open:function(r,n,i){return o(e,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,t.promises.open(r,n,i)];case 1:return[2,e.sent()]}}))}))}});return i(i({},i(i({},t),{promises:n})),{open:function(n,i,l){return o(e,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,t.open(n,r(i),l)];case 1:return[2,e.sent()]}}))}))},openSync:function(e,n,i){return t.openSync(e,r(n),i)}})}(e);if("mem"==t.type)return I(t.contents);if("dev"==t.type)return function(){var t=_.Volume.fromJSON({"/dev/stdin":"","/dev/stdout":"","/dev/stderr":""});t.releasedFds=[0,1,2];var e=t.openSync("/dev/stderr","w"),r=t.openSync("/dev/stdout","w"),n=t.openSync("/dev/stdin","r");if(2!=e)throw Error("invalid handle for stderr: ".concat(e));if(1!=r)throw Error("invalid handle for stdout: ".concat(r));if(0!=n)throw Error("invalid handle for stdin: ".concat(n));return(0,_.createFsFromVolume)(t)}();throw Error("unknown spec type - ".concat(JSON.stringify(t)))}function I(t){var e=null!=t?_.Volume.fromJSON(t):new _.Volume;return(0,_.createFsFromVolume)(e)}e.createFileSystem=function(t,e){var r,n,u,s=this;if(0==t.length)return I();if(1==t.length)return null!==(u=f(t[0],e))&&void 0!==u?u:I();var S=new c.Union,E=[];try{for(var d=l(t),A=d.next();!A.done;A=d.next()){var p=f(A.value,e);null!=p&&(S.use(p),null!=p.waitUntilLoaded&&E.push(p.waitUntilLoaded.bind(p)))}}catch(t){r={error:t}}finally{try{A&&!A.done&&(n=d.return)&&n.call(d)}finally{if(r)throw r.error}}return i(i({},S),{constants:_.fs.constants,waitUntilLoaded:function(){return o(s,void 0,void 0,(function(){var t,e,r,n,i;return a(this,(function(o){switch(o.label){case 0:o.trys.push([0,5,6,7]),t=l(E),e=t.next(),o.label=1;case 1:return e.done?[3,4]:[4,(0,e.value)()];case 2:o.sent(),o.label=3;case 3:return e=t.next(),[3,1];case 4:return[3,7];case 5:return r=o.sent(),n={error:r},[3,7];case 6:try{e&&!e.done&&(i=t.return)&&i.call(t)}finally{if(n)throw n.error}return[7];case 7:return[2]}}))}))}})}},3728:function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(e,r);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,n,i)}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&n(e,t,r);return i(e,t),e},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.constants=e.createFileSystem=void 0;var l=a(r(9215));e.default=l.default;var u=r(214);Object.defineProperty(e,"createFileSystem",{enumerable:!0,get:function(){return u.createFileSystem}});var s=o(r(3622));e.constants=s},2327:function(t,e){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.WASIKillError=e.WASIExitError=e.WASIError=void 0;var i=function(t){function e(r){var n=t.call(this)||this;return n.errno=r,Object.setPrototypeOf(n,e.prototype),n}return n(e,t),e}(Error);e.WASIError=i;var o=function(t){function e(r){var n=t.call(this,"WASI Exit error: ".concat(r))||this;return n.code=r,Object.setPrototypeOf(n,e.prototype),n}return n(e,t),e}(Error);e.WASIExitError=o;var a=function(t){function e(r){var n=t.call(this,"WASI Kill signal: ".concat(r))||this;return n.signal=r,Object.setPrototypeOf(n,e.prototype),n}return n(e,t),e}(Error);e.WASIKillError=a},6665:function(t,e,r){"use strict";var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a};Object.defineProperty(e,"__esModule",{value:!0});var o=r(6470),a=r(1811);e.default=function(t){var e,r,l=t.data,u=t.fs,s=t.directory;if(l instanceof ArrayBuffer&&(l=new Uint8Array(l)),!(l instanceof Uint8Array))throw Error("impossible");var _=(0,a.unzipSync)(l);try{for(var c=n(Object.entries(_)),f=c.next();!f.done;f=c.next()){var I=i(f.value,2),S=I[0],E=I[1],d=(0,o.join)(s,S);u.mkdirSync((0,o.dirname)(d),{recursive:!0}),u.writeFileSync(d,E)}}catch(t){e={error:t}}finally{try{f&&!f.done&&(r=c.return)&&r.call(c)}finally{if(e)throw e.error}}}},9215:function(t,e,r){"use strict";var n=r(8764).Buffer,i=r(5108),o=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},a=this&&this.__spreadArray||function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))},l=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=u(r(5912)),_=(0,s.default)("wasi"),c=(0,s.default)("wasi:open"),f=r(2327),I=u(r(905)),S=r(3622),E=S.WASI_RIGHT_FD_DATASYNC|S.WASI_RIGHT_FD_READ|S.WASI_RIGHT_FD_SYNC|S.WASI_RIGHT_FD_ADVISE|S.WASI_RIGHT_FD_FILESTAT_GET|S.WASI_RIGHT_POLL_FD_READWRITE,d=S.WASI_RIGHT_FD_DATASYNC|S.WASI_RIGHT_FD_WRITE|S.WASI_RIGHT_FD_SYNC|S.WASI_RIGHT_FD_ADVISE|S.WASI_RIGHT_FD_FILESTAT_GET|S.WASI_RIGHT_POLL_FD_READWRITE,A=d,p=function(t){var e=Math.trunc(t),r=BigInt(Math.round(1e6*(t-e)));return BigInt(e)*BigInt(1e6)+r},v=function(t){"number"==typeof t&&(t=Math.trunc(t));var e=BigInt(t);return Number(e/BigInt(1e6))},T=function(t){return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];try{return t.apply(void 0,a([],o(e),!1))}catch(t){for(var n=t;null!=n.prev;)n=n.prev;if((null==n?void 0:n.code)&&"string"==typeof(null==n?void 0:n.code))return S.ERROR_MAP[n.code]||S.WASI_EINVAL;if(n instanceof f.WASIError)return n.errno;throw n}}},h=function(t,e){var r=t.FD_MAP.get(e);if(!r)throw new f.WASIError(S.WASI_EBADF);if(void 0===r.filetype){var n=t.bindings.fs.fstatSync(r.real),i=y(t,e,n),o=i.filetype,a=i.rightsBase,l=i.rightsInheriting;r.filetype=o,r.rights||(r.rights={base:a,inheriting:l})}return r},y=function(t,e,r){switch(!0){case r.isBlockDevice():return{filetype:S.WASI_FILETYPE_BLOCK_DEVICE,rightsBase:S.RIGHTS_BLOCK_DEVICE_BASE,rightsInheriting:S.RIGHTS_BLOCK_DEVICE_INHERITING};case r.isCharacterDevice():var n=S.WASI_FILETYPE_CHARACTER_DEVICE;return void 0!==e&&t.bindings.isTTY(e)?{filetype:n,rightsBase:S.RIGHTS_TTY_BASE,rightsInheriting:S.RIGHTS_TTY_INHERITING}:{filetype:n,rightsBase:S.RIGHTS_CHARACTER_DEVICE_BASE,rightsInheriting:S.RIGHTS_CHARACTER_DEVICE_INHERITING};case r.isDirectory():return{filetype:S.WASI_FILETYPE_DIRECTORY,rightsBase:S.RIGHTS_DIRECTORY_BASE,rightsInheriting:S.RIGHTS_DIRECTORY_INHERITING};case r.isFIFO():return{filetype:S.WASI_FILETYPE_SOCKET_STREAM,rightsBase:S.RIGHTS_SOCKET_BASE,rightsInheriting:S.RIGHTS_SOCKET_INHERITING};case r.isFile():return{filetype:S.WASI_FILETYPE_REGULAR_FILE,rightsBase:S.RIGHTS_REGULAR_FILE_BASE,rightsInheriting:S.RIGHTS_REGULAR_FILE_INHERITING};case r.isSocket():return{filetype:S.WASI_FILETYPE_SOCKET_STREAM,rightsBase:S.RIGHTS_SOCKET_BASE,rightsInheriting:S.RIGHTS_SOCKET_INHERITING};case r.isSymbolicLink():return{filetype:S.WASI_FILETYPE_SYMBOLIC_LINK,rightsBase:BigInt(0),rightsInheriting:BigInt(0)};default:return{filetype:S.WASI_FILETYPE_UNKNOWN,rightsBase:BigInt(0),rightsInheriting:BigInt(0)}}},m=function(){function t(t){var e,r,i=this;this.env={},this.sleep=t.sleep,this.getStdin=t.getStdin,this.sendStdout=t.sendStdout,this.sendStderr=t.sendStderr;var u={};t.preopens&&(u=t.preopens),t&&t.env&&(this.env=t.env);var s=[];t&&t.args&&(s=t.args);var m=t.bindings;this.memory=void 0,this.view=void 0,this.bindings=m,this.FD_MAP=new Map([[S.WASI_STDIN_FILENO,{real:0,filetype:S.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:E,inheriting:BigInt(0)},path:"/dev/stdin"}],[S.WASI_STDOUT_FILENO,{real:1,filetype:S.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:d,inheriting:BigInt(0)},path:"/dev/stdout"}],[S.WASI_STDERR_FILENO,{real:2,filetype:S.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:A,inheriting:BigInt(0)},path:"/dev/stderr"}]]);var g=this.bindings.fs,W=this.bindings.path;try{for(var O=l(Object.entries(u)),R=O.next();!R.done;R=O.next()){var w=o(R.value,2),b=w[0],N=w[1],D=g.openSync(N,g.constants.O_RDONLY),F=this.getUnusedFileDescriptor();this.FD_MAP.set(F,{real:D,filetype:S.WASI_FILETYPE_DIRECTORY,rights:{base:S.RIGHTS_DIRECTORY_BASE,inheriting:S.RIGHTS_DIRECTORY_INHERITING},fakePath:b,path:N})}}catch(t){e={error:t}}finally{try{R&&!R.done&&(r=O.return)&&r.call(O)}finally{if(e)throw e.error}}var L=function(t,e){return i.refreshMemory(),Array.from({length:e},(function(e,r){var n=t+8*r,o=i.view.getUint32(n,!0),a=i.view.getUint32(n+4,!0),l=new Uint8Array(i.memory.buffer,o,a);return(0,I.default)(l)}))},G=function(t,e){var r=h(i,t);if(e!==BigInt(0)&&(r.rights.base&e)===BigInt(0))throw new f.WASIError(S.WASI_EPERM);return r},C=m.hrtime(),P=function(t){switch(t){case S.WASI_CLOCK_MONOTONIC:return m.hrtime();case S.WASI_CLOCK_REALTIME:return p(Date.now());case S.WASI_CLOCK_PROCESS_CPUTIME_ID:case S.WASI_CLOCK_THREAD_CPUTIME_ID:return m.hrtime()-C;default:return null}};this.wasiImport={args_get:function(t,e){i.refreshMemory();var r=t,o=e;return s.forEach((function(t){i.view.setUint32(r,o,!0),r+=4,o+=n.from(i.memory.buffer).write("".concat(t,"\0"),o)})),S.WASI_ESUCCESS},args_sizes_get:function(t,e){i.refreshMemory(),i.view.setUint32(t,s.length,!0);var r=s.reduce((function(t,e){return t+n.byteLength(e)+1}),0);return i.view.setUint32(e,r,!0),S.WASI_ESUCCESS},environ_get:function(t,e){i.refreshMemory();var r=t,a=e;return Object.entries(i.env).forEach((function(t){var e=o(t,2),l=e[0],u=e[1];i.view.setUint32(r,a,!0),r+=4,a+=n.from(i.memory.buffer).write("".concat(l,"=").concat(u,"\0"),a)})),S.WASI_ESUCCESS},environ_sizes_get:function(t,e){i.refreshMemory();var r=Object.entries(i.env).map((function(t){var e=o(t,2),r=e[0],n=e[1];return"".concat(r,"=").concat(n,"\0")})),a=r.reduce((function(t,e){return t+n.byteLength(e)}),0);return i.view.setUint32(t,r.length,!0),i.view.setUint32(e,a,!0),S.WASI_ESUCCESS},clock_res_get:function(t,e){var r;switch(t){case S.WASI_CLOCK_MONOTONIC:case S.WASI_CLOCK_PROCESS_CPUTIME_ID:case S.WASI_CLOCK_THREAD_CPUTIME_ID:r=BigInt(1);break;case S.WASI_CLOCK_REALTIME:r=BigInt(1e3)}if(!r)throw Error("invalid clockId");return i.view.setBigUint64(e,r),S.WASI_ESUCCESS},clock_time_get:function(t,e,r){i.refreshMemory();var n=P(t);return null===n?S.WASI_EINVAL:(i.view.setBigUint64(r,BigInt(n),!0),S.WASI_ESUCCESS)},fd_advise:T((function(t,e,r,n){return G(t,S.WASI_RIGHT_FD_ADVISE),S.WASI_ENOSYS})),fd_allocate:T((function(t,e,r){return G(t,S.WASI_RIGHT_FD_ALLOCATE),S.WASI_ENOSYS})),fd_close:T((function(t){var e=G(t,BigInt(0));return g.closeSync(e.real),i.FD_MAP.delete(t),S.WASI_ESUCCESS})),fd_datasync:T((function(t){var e=G(t,S.WASI_RIGHT_FD_DATASYNC);return g.fdatasyncSync(e.real),S.WASI_ESUCCESS})),fd_fdstat_get:T((function(t,e){var r=G(t,BigInt(0));if(i.refreshMemory(),null==r.filetype)throw Error("stats.filetype must be set");return i.view.setUint8(e,r.filetype),i.view.setUint16(e+2,0,!0),i.view.setUint16(e+4,0,!0),i.view.setBigUint64(e+8,BigInt(r.rights.base),!0),i.view.setBigUint64(e+8+8,BigInt(r.rights.inheriting),!0),S.WASI_ESUCCESS})),fd_fdstat_set_flags:T((function(t,e){return G(t,S.WASI_RIGHT_FD_FDSTAT_SET_FLAGS),S.WASI_ENOSYS})),fd_fdstat_set_rights:T((function(t,e,r){var n=G(t,BigInt(0));return(n.rights.base|e)>n.rights.base||(n.rights.inheriting|r)>n.rights.inheriting?S.WASI_EPERM:(n.rights.base=e,n.rights.inheriting=r,S.WASI_ESUCCESS)})),fd_filestat_get:T((function(t,e){var r=G(t,S.WASI_RIGHT_FD_FILESTAT_GET),n=g.fstatSync(r.real);if(i.refreshMemory(),i.view.setBigUint64(e,BigInt(n.dev),!0),e+=8,i.view.setBigUint64(e,BigInt(n.ino),!0),e+=8,null==r.filetype)throw Error("stats.filetype must be set");return i.view.setUint8(e,r.filetype),e+=8,i.view.setBigUint64(e,BigInt(n.nlink),!0),e+=8,i.view.setBigUint64(e,BigInt(n.size),!0),e+=8,i.view.setBigUint64(e,p(n.atimeMs),!0),e+=8,i.view.setBigUint64(e,p(n.mtimeMs),!0),e+=8,i.view.setBigUint64(e,p(n.ctimeMs),!0),S.WASI_ESUCCESS})),fd_filestat_set_size:T((function(t,e){var r=G(t,S.WASI_RIGHT_FD_FILESTAT_SET_SIZE);return g.ftruncateSync(r.real,Number(e)),S.WASI_ESUCCESS})),fd_filestat_set_times:T((function(t,e,r,n){var i=G(t,S.WASI_RIGHT_FD_FILESTAT_SET_TIMES),o=g.fstatSync(i.real),a=o.atime,l=o.mtime,u=v(P(S.WASI_CLOCK_REALTIME)),s=S.WASI_FILESTAT_SET_ATIM|S.WASI_FILESTAT_SET_ATIM_NOW;if((n&s)===s)return S.WASI_EINVAL;var _=S.WASI_FILESTAT_SET_MTIM|S.WASI_FILESTAT_SET_MTIM_NOW;return(n&_)===_?S.WASI_EINVAL:((n&S.WASI_FILESTAT_SET_ATIM)===S.WASI_FILESTAT_SET_ATIM?a=v(e):(n&S.WASI_FILESTAT_SET_ATIM_NOW)===S.WASI_FILESTAT_SET_ATIM_NOW&&(a=u),(n&S.WASI_FILESTAT_SET_MTIM)===S.WASI_FILESTAT_SET_MTIM?l=v(r):(n&S.WASI_FILESTAT_SET_MTIM_NOW)===S.WASI_FILESTAT_SET_MTIM_NOW&&(l=u),g.futimesSync(i.real,new Date(a),new Date(l)),S.WASI_ESUCCESS)})),fd_prestat_get:T((function(t,e){var r,o=G(t,BigInt(0));return o.path?(i.refreshMemory(),i.view.setUint8(e,S.WASI_PREOPENTYPE_DIR),i.view.setUint32(e+4,n.byteLength(null!==(r=o.fakePath)&&void 0!==r?r:o.path),!0),S.WASI_ESUCCESS):S.WASI_EINVAL})),fd_prestat_dir_name:T((function(t,e,r){var o,a=G(t,BigInt(0));return a.path?(i.refreshMemory(),n.from(i.memory.buffer).write(null!==(o=a.fakePath)&&void 0!==o?o:a.path,e,r,"utf8"),S.WASI_ESUCCESS):S.WASI_EINVAL})),fd_pwrite:T((function(t,e,r,n,o){var a=G(t,S.WASI_RIGHT_FD_WRITE|S.WASI_RIGHT_FD_SEEK),l=0;return L(e,r).forEach((function(t){for(var e=0;e<t.byteLength;)e+=g.writeSync(a.real,t,e,t.byteLength-e,Number(n)+l+e);l+=e})),i.view.setUint32(o,l,!0),S.WASI_ESUCCESS})),fd_write:T((function(t,e,r,n){var o=G(t,S.WASI_RIGHT_FD_WRITE),a=1==o.real,l=2==o.real,u=0;return L(e,r).forEach((function(t){if(0!=t.byteLength)if(a&&null!=i.sendStdout)i.sendStdout(t),u+=t.byteLength;else if(l&&null!=i.sendStderr)i.sendStderr(t),u+=t.byteLength;else{for(var e=0;e<t.byteLength;){var r=g.writeSync(o.real,t,e,t.byteLength-e,o.offset?Number(o.offset):null);o.offset&&(o.offset+=BigInt(r)),e+=r}u+=e}})),i.view.setUint32(n,u,!0),S.WASI_ESUCCESS})),fd_pread:T((function(t,e,r,n,o){var a,u,s=G(t,S.WASI_RIGHT_FD_READ|S.WASI_RIGHT_FD_SEEK),_=0;try{t:for(var c=l(L(e,r)),f=c.next();!f.done;f=c.next()){for(var I=f.value,E=0;E<I.byteLength;){var d=I.byteLength-E,A=g.readSync(s.real,I,E,I.byteLength-E,Number(n)+_+E);if(E+=A,_+=A,0===A||A<d)break t}_+=E}}catch(t){a={error:t}}finally{try{f&&!f.done&&(u=c.return)&&u.call(c)}finally{if(a)throw a.error}}return i.view.setUint32(o,_,!0),S.WASI_ESUCCESS})),fd_read:T((function(t,e,r,n){var o,a,u=G(t,S.WASI_RIGHT_FD_READ),s=0===u.real,_=0;try{t:for(var c=l(L(e,r)),f=c.next();!f.done;f=c.next())for(var I=f.value,E=0;E<I.byteLength;){var d=I.byteLength-E,A=s||void 0===u.offset?null:Number(u.offset),p=0;if(s&&null!=i.getStdin?null!=i.stdinBuffer&&((p=i.stdinBuffer.copy(I))==i.stdinBuffer.length?i.stdinBuffer=void 0:i.stdinBuffer=i.stdinBuffer.slice(p)):p=g.readSync(u.real,I,E,d,A),u.filetype==S.WASI_FILETYPE_REGULAR_FILE&&(u.offset=(u.offset?u.offset:BigInt(0))+BigInt(p)),E+=p,_+=p,0===p||p<d)break t}}catch(t){o={error:t}}finally{try{f&&!f.done&&(a=c.return)&&a.call(c)}finally{if(o)throw o.error}}return i.view.setUint32(n,_,!0),S.WASI_ESUCCESS})),fd_readdir:T((function(t,e,r,o,a){var l=G(t,S.WASI_RIGHT_FD_READDIR);i.refreshMemory();for(var u=g.readdirSync(l.path,{withFileTypes:!0}),s=e,_=Number(o);_<u.length;_+=1){var c=u[_],f=n.byteLength(c.name);if(e-s>r)break;if(i.view.setBigUint64(e,BigInt(_+1),!0),(e+=8)-s>r)break;var I=g.lstatSync(W.resolve(l.path,c.name));if(i.view.setBigUint64(e,BigInt(I.ino),!0),(e+=8)-s>r)break;if(i.view.setUint32(e,f,!0),(e+=4)-s>r)break;var E=void 0;switch(!0){case I.isBlockDevice():E=S.WASI_FILETYPE_BLOCK_DEVICE;break;case I.isCharacterDevice():E=S.WASI_FILETYPE_CHARACTER_DEVICE;break;case I.isDirectory():E=S.WASI_FILETYPE_DIRECTORY;break;case I.isFIFO():E=S.WASI_FILETYPE_SOCKET_STREAM;break;case I.isFile():E=S.WASI_FILETYPE_REGULAR_FILE;break;case I.isSocket():E=S.WASI_FILETYPE_SOCKET_STREAM;break;case I.isSymbolicLink():E=S.WASI_FILETYPE_SYMBOLIC_LINK;break;default:E=S.WASI_FILETYPE_UNKNOWN}if(i.view.setUint8(e,E),e+=1,(e+=3)+f>=s+r)break;n.from(i.memory.buffer).write(c.name,e),e+=f}var d=e-s;return i.view.setUint32(a,Math.min(d,r),!0),S.WASI_ESUCCESS})),fd_renumber:T((function(t,e){return G(t,BigInt(0)),G(e,BigInt(0)),g.closeSync(i.FD_MAP.get(t).real),i.FD_MAP.set(t,i.FD_MAP.get(e)),i.FD_MAP.delete(e),S.WASI_ESUCCESS})),fd_seek:T((function(t,e,r,n){var o=G(t,S.WASI_RIGHT_FD_SEEK);switch(i.refreshMemory(),r){case S.WASI_WHENCE_CUR:o.offset=(o.offset?o.offset:BigInt(0))+BigInt(e);break;case S.WASI_WHENCE_END:var a=g.fstatSync(o.real).size;o.offset=BigInt(a)+BigInt(e);break;case S.WASI_WHENCE_SET:o.offset=BigInt(e)}if(null==o.offset)throw Error("stats.offset must be defined");return i.view.setBigUint64(n,o.offset,!0),S.WASI_ESUCCESS})),fd_tell:T((function(t,e){var r=G(t,S.WASI_RIGHT_FD_TELL);return i.refreshMemory(),r.offset||(r.offset=BigInt(0)),i.view.setBigUint64(e,r.offset,!0),S.WASI_ESUCCESS})),fd_sync:T((function(t){var e=G(t,S.WASI_RIGHT_FD_SYNC);return g.fsyncSync(e.real),S.WASI_ESUCCESS})),path_create_directory:T((function(t,e,r){var o=G(t,S.WASI_RIGHT_PATH_CREATE_DIRECTORY);if(!o.path)return S.WASI_EINVAL;i.refreshMemory();var a=n.from(i.memory.buffer,e,r).toString();return g.mkdirSync(W.resolve(o.path,a)),S.WASI_ESUCCESS})),path_filestat_get:T((function(t,e,r,o,a){var l=G(t,S.WASI_RIGHT_PATH_FILESTAT_GET);if(!l.path)return S.WASI_EINVAL;i.refreshMemory();var u,s=n.from(i.memory.buffer,r,o).toString();return u=e?g.statSync(W.resolve(l.path,s)):g.lstatSync(W.resolve(l.path,s)),i.view.setBigUint64(a,BigInt(u.dev),!0),a+=8,i.view.setBigUint64(a,BigInt(u.ino),!0),a+=8,i.view.setUint8(a,y(i,void 0,u).filetype),a+=8,i.view.setBigUint64(a,BigInt(u.nlink),!0),a+=8,i.view.setBigUint64(a,BigInt(u.size),!0),a+=8,i.view.setBigUint64(a,p(u.atimeMs),!0),a+=8,i.view.setBigUint64(a,p(u.mtimeMs),!0),a+=8,i.view.setBigUint64(a,p(u.ctimeMs),!0),S.WASI_ESUCCESS})),path_filestat_set_times:T((function(t,e,r,o,a,l,u){var s=G(t,S.WASI_RIGHT_PATH_FILESTAT_SET_TIMES);if(!s.path)return S.WASI_EINVAL;i.refreshMemory();var _=g.fstatSync(s.real),c=_.atime,f=_.mtime,I=v(P(S.WASI_CLOCK_REALTIME)),E=S.WASI_FILESTAT_SET_ATIM|S.WASI_FILESTAT_SET_ATIM_NOW;if((u&E)===E)return S.WASI_EINVAL;var d=S.WASI_FILESTAT_SET_MTIM|S.WASI_FILESTAT_SET_MTIM_NOW;if((u&d)===d)return S.WASI_EINVAL;(u&S.WASI_FILESTAT_SET_ATIM)===S.WASI_FILESTAT_SET_ATIM?c=v(a):(u&S.WASI_FILESTAT_SET_ATIM_NOW)===S.WASI_FILESTAT_SET_ATIM_NOW&&(c=I),(u&S.WASI_FILESTAT_SET_MTIM)===S.WASI_FILESTAT_SET_MTIM?f=v(l):(u&S.WASI_FILESTAT_SET_MTIM_NOW)===S.WASI_FILESTAT_SET_MTIM_NOW&&(f=I);var A=n.from(i.memory.buffer,r,o).toString();return g.utimesSync(W.resolve(s.path,A),new Date(c),new Date(f)),S.WASI_ESUCCESS})),path_link:T((function(t,e,r,o,a,l,u){var s=G(t,S.WASI_RIGHT_PATH_LINK_SOURCE),_=G(a,S.WASI_RIGHT_PATH_LINK_TARGET);if(!s.path||!_.path)return S.WASI_EINVAL;i.refreshMemory();var c=n.from(i.memory.buffer,r,o).toString(),f=n.from(i.memory.buffer,l,u).toString();return g.linkSync(W.resolve(s.path,c),W.resolve(_.path,f)),S.WASI_ESUCCESS})),path_open:T((function(t,e,r,o,a,l,u,s,_){var I=G(t,S.WASI_RIGHT_PATH_OPEN);l=BigInt(l),u=BigInt(u);var E,d=(l&(S.WASI_RIGHT_FD_READ|S.WASI_RIGHT_FD_READDIR))!==BigInt(0),A=(l&(S.WASI_RIGHT_FD_DATASYNC|S.WASI_RIGHT_FD_WRITE|S.WASI_RIGHT_FD_ALLOCATE|S.WASI_RIGHT_FD_FILESTAT_SET_SIZE))!==BigInt(0);A&&d?E=g.constants.O_RDWR:d?E=g.constants.O_RDONLY:A&&(E=g.constants.O_WRONLY);var p=l|S.WASI_RIGHT_PATH_OPEN,v=l|u;0!=(a&S.WASI_O_CREAT)&&(E|=g.constants.O_CREAT,p|=S.WASI_RIGHT_PATH_CREATE_FILE),0!=(a&S.WASI_O_DIRECTORY)&&(E|=g.constants.O_DIRECTORY),0!=(a&S.WASI_O_EXCL)&&(E|=g.constants.O_EXCL),0!=(a&S.WASI_O_TRUNC)&&(E|=g.constants.O_TRUNC,p|=S.WASI_RIGHT_PATH_FILESTAT_SET_SIZE),0!=(s&S.WASI_FDFLAG_APPEND)&&(E|=g.constants.O_APPEND),0!=(s&S.WASI_FDFLAG_DSYNC)&&(g.constants.O_DSYNC?E|=g.constants.O_DSYNC:E|=g.constants.O_SYNC,v|=S.WASI_RIGHT_FD_DATASYNC),0!=(s&S.WASI_FDFLAG_NONBLOCK)&&(E|=g.constants.O_NONBLOCK),0!=(s&S.WASI_FDFLAG_RSYNC)&&(g.constants.O_RSYNC?E|=g.constants.O_RSYNC:E|=g.constants.O_SYNC,v|=S.WASI_RIGHT_FD_SYNC),0!=(s&S.WASI_FDFLAG_SYNC)&&(E|=g.constants.O_SYNC,v|=S.WASI_RIGHT_FD_SYNC),A&&0==(E&(g.constants.O_APPEND|g.constants.O_TRUNC))&&(v|=S.WASI_RIGHT_FD_SEEK),i.refreshMemory();var T=n.from(i.memory.buffer,r,o).toString();if(c("path_open",T),T.startsWith("proc/"))throw new f.WASIError(S.WASI_EBADF);var y,m,O,R=W.resolve(I.path,T);if(W.relative(I.path,R).startsWith(".."))return S.WASI_ENOTCAPABLE;try{if(y=g.realpathSync(R),W.relative(I.path,y).startsWith(".."))return S.WASI_ENOTCAPABLE}catch(t){if("ENOENT"!==(null==t?void 0:t.code))throw t;y=R}try{m=g.statSync(y).isDirectory()}catch(t){}O=!A&&m?g.openSync(y,g.constants.O_RDONLY):g.openSync(y,E);var w=i.getUnusedFileDescriptor();return i.FD_MAP.set(w,{real:O,filetype:void 0,rights:{base:p,inheriting:v},path:y}),h(i,w),i.view.setUint32(_,w,!0),S.WASI_ESUCCESS})),path_readlink:T((function(t,e,r,o,a,l){var u=G(t,S.WASI_RIGHT_PATH_READLINK);if(!u.path)return S.WASI_EINVAL;i.refreshMemory();var s=n.from(i.memory.buffer,e,r).toString(),_=W.resolve(u.path,s),c=g.readlinkSync(_),f=n.from(i.memory.buffer).write(c,o,a);return i.view.setUint32(l,f,!0),S.WASI_ESUCCESS})),path_remove_directory:T((function(t,e,r){var o=G(t,S.WASI_RIGHT_PATH_REMOVE_DIRECTORY);if(!o.path)return S.WASI_EINVAL;i.refreshMemory();var a=n.from(i.memory.buffer,e,r).toString();return g.rmdirSync(W.resolve(o.path,a)),S.WASI_ESUCCESS})),path_rename:T((function(t,e,r,o,a,l){var u=G(t,S.WASI_RIGHT_PATH_RENAME_SOURCE),s=G(o,S.WASI_RIGHT_PATH_RENAME_TARGET);if(!u.path||!s.path)return S.WASI_EINVAL;i.refreshMemory();var _=n.from(i.memory.buffer,e,r).toString(),c=n.from(i.memory.buffer,a,l).toString();return g.renameSync(W.resolve(u.path,_),W.resolve(s.path,c)),S.WASI_ESUCCESS})),path_symlink:T((function(t,e,r,o,a){var l=G(r,S.WASI_RIGHT_PATH_SYMLINK);if(!l.path)return S.WASI_EINVAL;i.refreshMemory();var u=n.from(i.memory.buffer,t,e).toString(),s=n.from(i.memory.buffer,o,a).toString();return g.symlinkSync(u,W.resolve(l.path,s)),S.WASI_ESUCCESS})),path_unlink_file:T((function(t,e,r){var o=G(t,S.WASI_RIGHT_PATH_UNLINK_FILE);if(!o.path)return S.WASI_EINVAL;i.refreshMemory();var a=n.from(i.memory.buffer,e,r).toString();return g.unlinkSync(W.resolve(o.path,a)),S.WASI_ESUCCESS})),poll_oneoff:function(t,e,r,n){var o=0,a=BigInt(0),l=BigInt(m.hrtime());i.refreshMemory();for(var u=0;u<r;u+=1){var s=i.view.getBigUint64(t,!0);t+=8;var _=i.view.getUint8(t);switch(t+=1,_){case S.WASI_EVENTTYPE_CLOCK:t+=7;var c=i.view.getUint32(t,!0);t+=4,t+=4;var f=i.view.getBigUint64(t,!0);t+=8,t+=8;var I=i.view.getUint16(t,!0);t+=2,t+=6;var E=1===I,d=S.WASI_ESUCCESS,A=P(c);if(null==A)d=S.WASI_EINVAL;else{var p=(T=E?f:A+f)-A;p>a&&(a=p)}i.view.setBigUint64(e,s,!0),e+=8,i.view.setUint16(e,d,!0),e+=2,i.view.setUint8(e,S.WASI_EVENTTYPE_CLOCK),e+=1,e+=5,o+=1;break;case S.WASI_EVENTTYPE_FD_READ:case S.WASI_EVENTTYPE_FD_WRITE:t+=3,t+=4,i.view.setBigUint64(e,s,!0),e+=8,i.view.setUint16(e,S.WASI_ENOSYS,!0),e+=2,i.view.setUint8(e,_),e+=1,e+=5,o+=1,s==BigInt(0)&&S.WASI_EVENTTYPE_FD_READ==_&&null!=i.getStdin&&(i.stdinBuffer||(i.stdinBuffer=i.getStdin()));break;default:return S.WASI_EINVAL}}if(i.view.setUint32(n,o,!0),(a-=BigInt(m.hrtime())-l)>0)if(null!=i.sleep)i.sleep(v(a));else for(var T=BigInt(m.hrtime())+a;BigInt(m.hrtime())<T;);return S.WASI_ESUCCESS},proc_exit:function(t){return m.exit(t),S.WASI_ESUCCESS},proc_raise:function(t){return t in S.SIGNAL_MAP?(m.kill(S.SIGNAL_MAP[t]),S.WASI_ESUCCESS):S.WASI_EINVAL},random_get:function(t,e){return i.refreshMemory(),m.randomFillSync(new Uint8Array(i.memory.buffer),t,e),e},sched_yield:function(){return S.WASI_ESUCCESS},sock_recv:function(){return S.WASI_ENOSYS},sock_send:function(){return S.WASI_ENOSYS},sock_shutdown:function(){return S.WASI_ENOSYS}},_.enabled&&Object.keys(this.wasiImport).forEach((function(t){var e=i.wasiImport[t];i.wasiImport[t]=function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];_(t,r);try{var i=e.apply(void 0,a([],o(r),!1));return _("result = ",i),i}catch(t){throw _("error: ",t),t}}}))}return t.prototype.getUnusedFileDescriptor=function(){for(var t=3;this.FD_MAP.has(t);)t+=1;if(t>32768)throw Error("no available file descriptors");return t},t.prototype.refreshMemory=function(){this.view&&0!==this.view.buffer.byteLength||(this.view=new DataView(this.memory.buffer))},t.prototype.setMemory=function(t){this.memory=t},t.prototype.start=function(t,e){var r=t.exports;if(null===r||"object"!=typeof r)throw new Error("instance.exports must be an Object. Received ".concat(r,"."));if(null==e&&!((e=r.memory)instanceof WebAssembly.Memory))throw new Error("instance.exports.memory must be a WebAssembly.Memory. Recceived ".concat(e,"."));this.setMemory(e),r._start&&r._start()},t.prototype.getImportNamespace=function(t){var e,r,n=null;try{for(var i=l(WebAssembly.Module.imports(t)),o=i.next();!o.done;o=i.next()){var a=o.value;if("function"===a.kind&&a.module.startsWith("wasi_"))if(n){if(n!==a.module)throw new Error("Multiple namespaces detected.")}else n=a.module}}catch(t){e={error:t}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(e)throw e.error}}return n},t.prototype.getImports=function(t){switch(this.getImportNamespace(t)){case"wasi_unstable":return{wasi_unstable:this.wasiImport};case"wasi_snapshot_preview1":return{wasi_snapshot_preview1:this.wasiImport};default:throw new Error("Can't detect a WASI namespace for the WebAssembly Module")}},t.prototype.initWasiFdInfo=function(){if(null!=this.env.WASI_FD_INFO){var t=JSON.parse(this.env.WASI_FD_INFO);for(var e in t){i.log(e);var r=parseInt(e);if(!this.FD_MAP.has(r)){var n=t[e];try{this.bindings.fs.fstatSync(n)}catch(t){i.log("discarding ",{wasi_fd:e,real:n});continue}var o={real:n,filetype:S.WASI_FILETYPE_SOCKET_STREAM,rights:{base:E,inheriting:BigInt(0)}};this.FD_MAP.set(r,o)}}i.log("after initWasiFdInfo: ",this.FD_MAP),i.log("fdInfo = ",t)}else i.log("no WASI_FD_INFO")},t}();e.default=m},9862:()=>{},964:()=>{}},n={};function i(t){var e=n[t];if(void 0!==e)return e.exports;var o=n[t]={id:t,loaded:!1,exports:{}};return r[t].call(o.exports,o,o.exports,i),o.loaded=!0,o.exports}i.m=r,i.x=()=>{var t=i.O(void 0,[756],(()=>i(2989)));return i.O(t)},t=[],i.O=(e,r,n,o)=>{if(!r){var a=1/0;for(_=0;_<t.length;_++){for(var[r,n,o]=t[_],l=!0,u=0;u<r.length;u++)(!1&o||a>=o)&&Object.keys(i.O).every((t=>i.O[t](r[u])))?r.splice(u--,1):(l=!1,o<a&&(a=o));if(l){t.splice(_--,1);var s=n();void 0!==s&&(e=s)}}return e}o=o||0;for(var _=t.length;_>0&&t[_-1][2]>o;_--)t[_]=t[_-1];t[_]=[r,n,o]},i.f={},i.e=t=>Promise.all(Object.keys(i.f).reduce(((e,r)=>(i.f[r](t,e),e)),[])),i.u=t=>"a9d92d1e93772556b748.js",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),(()=>{var t={922:1};i.f.i=(e,r)=>{t[e]||importScripts(i.p+i.u(e))};var e=self.webpackChunk_wapython_website=self.webpackChunk_wapython_website||[],r=e.push.bind(e);e.push=e=>{var[n,o,a]=e;for(var l in o)i.o(o,l)&&(i.m[l]=o[l]);for(a&&a(i);n.length;)t[n.pop()]=1;r(e)}})(),e=i.x,i.x=()=>i.e(756).then(e),i.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,